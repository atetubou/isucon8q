Total: 28.02s
ROUTINE ======================== main.adminLoginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      5.22s (flat, cum) 18.63% of Total
         .          .    159:func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    160:	return func(c echo.Context) error {
         .          .    161:		if _, err := getLoginAdministrator(c); err != nil {
         .          .    162:			return resError(c, "admin_login_required", 401)
         .          .    163:		}
         .      5.22s    164:		return next(c)
         .          .    165:	}
         .          .    166:}
         .          .    167:
         .          .    168:func getLoginUser(c echo.Context) (*User, error) {
         .          .    169:	userID := sessUserID(c)
ROUTINE ======================== main.fillinAdministrator.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.68s (flat, cum)  9.56% of Total
         .          .    288:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    289:	return func(c echo.Context) error {
         .          .    290:		if administrator, err := getLoginAdministrator(c); err == nil {
         .          .    291:			c.Set("administrator", administrator)
         .          .    292:		}
         .      2.68s    293:		return next(c)
         .          .    294:	}
         .          .    295:}
         .          .    296:
         .          .    297:func validateRank(rank string) bool {
         .          .    298:	var count int
ROUTINE ======================== main.fillinUser.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      4.21s (flat, cum) 15.02% of Total
         .          .    279:func fillinUser(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    280:	return func(c echo.Context) error {
         .          .    281:		if user, err := getLoginUser(c); err == nil {
         .          .    282:			c.Set("user", user)
         .          .    283:		}
         .      4.21s    284:		return next(c)
         .          .    285:	}
         .          .    286:}
         .          .    287:
         .          .    288:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    289:	return func(c echo.Context) error {
ROUTINE ======================== main.getEvent in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     100ms     17.77s (flat, cum) 63.42% of Total
         .          .    222:	return events, nil
         .          .    223:}
         .          .    224:
         .          .    225:func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .    226:	var event Event
         .       40ms    227:	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .    228:		return nil, err
         .          .    229:	}
         .          .    230:	event.Sheets = map[string]*Sheets{
         .          .    231:		"S": &Sheets{},
         .          .    232:		"A": &Sheets{},
         .          .    233:		"B": &Sheets{},
         .          .    234:		"C": &Sheets{},
         .          .    235:	}
         .          .    236:
         .       10ms    237:	rows, err := db.Query("SELECT * FROM sheets ORDER BY `rank`, num")
         .          .    238:	if err != nil {
         .          .    239:		return nil, err
         .          .    240:	}
         .          .    241:	defer rows.Close()
         .          .    242:
      10ms      400ms    243:	for rows.Next() {
         .       50ms    244:		var sheet Sheet
         .      620ms    245:		if err := rows.Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .    246:			return nil, err
         .          .    247:		}
      10ms       30ms    248:		event.Sheets[sheet.Rank].Price = event.Price + sheet.Price
         .          .    249:		event.Total++
         .       20ms    250:		event.Sheets[sheet.Rank].Total++
         .          .    251:
         .       60ms    252:		var reservation Reservation
      30ms     16.39s    253:		err := db.QueryRow("SELECT * FROM reservations WHERE event_id = ? AND sheet_id = ? AND canceled_at IS NULL GROUP BY event_id, sheet_id HAVING reserved_at = MIN(reserved_at)", event.ID, sheet.ID).Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt)
         .          .    254:		if err == nil {
         .          .    255:			sheet.Mine = reservation.UserID == loginUserID
         .          .    256:			sheet.Reserved = true
         .          .    257:			sheet.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .    258:		} else if err == sql.ErrNoRows {
         .          .    259:			event.Remains++
      10ms       30ms    260:			event.Sheets[sheet.Rank].Remains++
         .          .    261:		} else {
         .          .    262:			return nil, err
         .          .    263:		}
         .          .    264:
      40ms      120ms    265:		event.Sheets[sheet.Rank].Detail = append(event.Sheets[sheet.Rank].Detail, &sheet)
         .          .    266:	}
         .          .    267:
         .          .    268:	return &event, nil
         .          .    269:}
         .          .    270:
ROUTINE ======================== main.getEvents in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      6.89s (flat, cum) 24.59% of Total
         .          .    208:			continue
         .          .    209:		}
         .          .    210:		events = append(events, &event)
         .          .    211:	}
         .          .    212:	for i, v := range events {
         .      6.89s    213:		event, err := getEvent(v.ID, -1)
         .          .    214:		if err != nil {
         .          .    215:			return nil, err
         .          .    216:		}
         .          .    217:		for k := range event.Sheets {
         .          .    218:			event.Sheets[k].Detail = nil
ROUTINE ======================== main.getLoginUser in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum) 0.071% of Total
         .          .    164:		return next(c)
         .          .    165:	}
         .          .    166:}
         .          .    167:
         .          .    168:func getLoginUser(c echo.Context) (*User, error) {
         .       20ms    169:	userID := sessUserID(c)
         .          .    170:	if userID == 0 {
         .          .    171:		return nil, errors.New("not logged in")
         .          .    172:	}
         .          .    173:	var user User
         .          .    174:	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
ROUTINE ======================== main.loginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      7.93s (flat, cum) 28.30% of Total
         .          .    147:	sess.Save(c.Request(), c.Response())
         .          .    148:}
         .          .    149:
         .          .    150:func loginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    151:	return func(c echo.Context) error {
         .       10ms    152:		if _, err := getLoginUser(c); err != nil {
         .          .    153:			return resError(c, "login_required", 401)
         .          .    154:		}
         .      7.92s    155:		return next(c)
         .          .    156:	}
         .          .    157:}
         .          .    158:
         .          .    159:func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    160:	return func(c echo.Context) error {
ROUTINE ======================== main.main in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.036% of Total
         .          .    925:			reports = append(reports, report)
         .          .    926:		}
         .          .    927:		return renderReportCSV(c, reports)
         .          .    928:	}, adminLoginRequired)
         .          .    929:
         .       10ms    930:	e.Start(":8080")
         .          .    931:}
         .          .    932:
         .          .    933:type Report struct {
         .          .    934:	ReservationID int64
         .          .    935:	EventID       int64
ROUTINE ======================== main.main.func10 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.69s (flat, cum)  6.03% of Total
         .          .    583:		user, err := getLoginUser(c)
         .          .    584:		if err != nil {
         .          .    585:			return err
         .          .    586:		}
         .          .    587:
         .      1.68s    588:		event, err := getEvent(eventID, user.ID)
         .          .    589:		if err != nil {
         .          .    590:			if err == sql.ErrNoRows {
         .          .    591:				return resError(c, "invalid_event", 404)
         .          .    592:			}
         .          .    593:			return err
         .          .    594:		} else if !event.PublicFg {
         .          .    595:			return resError(c, "invalid_event", 404)
         .          .    596:		}
         .          .    597:
         .       10ms    598:		if !validateRank(params.Rank) {
         .          .    599:			return resError(c, "invalid_rank", 400)
         .          .    600:		}
         .          .    601:
         .          .    602:		var sheet Sheet
         .          .    603:		var reservationID int64
ROUTINE ======================== main.main.func11 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      840ms (flat, cum)  3.00% of Total
         .          .    651:		user, err := getLoginUser(c)
         .          .    652:		if err != nil {
         .          .    653:			return err
         .          .    654:		}
         .          .    655:
         .      840ms    656:		event, err := getEvent(eventID, user.ID)
         .          .    657:		if err != nil {
         .          .    658:			if err == sql.ErrNoRows {
         .          .    659:				return resError(c, "invalid_event", 404)
         .          .    660:			}
         .          .    661:			return err
ROUTINE ======================== main.main.func12 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.68s (flat, cum)  9.56% of Total
         .          .    707:	e.GET("/admin/", func(c echo.Context) error {
         .          .    708:		var events []*Event
         .          .    709:		administrator := c.Get("administrator")
         .          .    710:		if administrator != nil {
         .          .    711:			var err error
         .      2.68s    712:			if events, err = getEvents(true); err != nil {
         .          .    713:				return err
         .          .    714:			}
         .          .    715:		}
         .          .    716:		return c.Render(200, "admin.tmpl", echo.Map{
         .          .    717:			"events":        events,
ROUTINE ======================== main.main.func16 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       90ms (flat, cum)  0.32% of Total
         .          .    785:		}
         .          .    786:		if err := tx.Commit(); err != nil {
         .          .    787:			return err
         .          .    788:		}
         .          .    789:
         .       90ms    790:		event, err := getEvent(eventID, -1)
         .          .    791:		if err != nil {
         .          .    792:			return err
         .          .    793:		}
         .          .    794:		return c.JSON(200, event)
         .          .    795:	}, adminLoginRequired)
ROUTINE ======================== main.main.func17 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      190ms (flat, cum)  0.68% of Total
         .          .    796:	e.GET("/admin/api/events/:id", func(c echo.Context) error {
         .          .    797:		eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    798:		if err != nil {
         .          .    799:			return resError(c, "not_found", 404)
         .          .    800:		}
         .      190ms    801:		event, err := getEvent(eventID, -1)
         .          .    802:		if err != nil {
         .          .    803:			if err == sql.ErrNoRows {
         .          .    804:				return resError(c, "not_found", 404)
         .          .    805:			}
         .          .    806:			return err
ROUTINE ======================== main.main.func18 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      180ms (flat, cum)  0.64% of Total
         .          .    820:		c.Bind(&params)
         .          .    821:		if params.Closed {
         .          .    822:			params.Public = false
         .          .    823:		}
         .          .    824:
         .       90ms    825:		event, err := getEvent(eventID, -1)
         .          .    826:		if err != nil {
         .          .    827:			if err == sql.ErrNoRows {
         .          .    828:				return resError(c, "not_found", 404)
         .          .    829:			}
         .          .    830:			return err
         .          .    831:		}
         .          .    832:
         .          .    833:		if event.ClosedFg {
         .          .    834:			return resError(c, "cannot_edit_closed_event", 400)
         .          .    835:		} else if event.PublicFg && params.Closed {
         .          .    836:			return resError(c, "cannot_close_public_event", 400)
         .          .    837:		}
         .          .    838:
         .          .    839:		tx, err := db.Begin()
         .          .    840:		if err != nil {
         .          .    841:			return err
         .          .    842:		}
         .          .    843:		if _, err := tx.Exec("UPDATE events SET public_fg = ?, closed_fg = ? WHERE id = ?", params.Public, params.Closed, event.ID); err != nil {
         .          .    844:			tx.Rollback()
         .          .    845:			return err
         .          .    846:		}
         .          .    847:		if err := tx.Commit(); err != nil {
         .          .    848:			return err
         .          .    849:		}
         .          .    850:
         .       90ms    851:		e, err := getEvent(eventID, -1)
         .          .    852:		if err != nil {
         .          .    853:			return err
         .          .    854:		}
         .          .    855:		c.JSON(200, e)
         .          .    856:		return nil
ROUTINE ======================== main.main.func19 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      970ms (flat, cum)  3.46% of Total
         .          .    859:		eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    860:		if err != nil {
         .          .    861:			return resError(c, "not_found", 404)
         .          .    862:		}
         .          .    863:
         .      550ms    864:		event, err := getEvent(eventID, -1)
         .          .    865:		if err != nil {
         .          .    866:			return err
         .          .    867:		}
         .          .    868:
         .          .    869:		rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num, s.price AS sheet_price, e.price AS event_price FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.event_id = ? ORDER BY reserved_at ASC FOR UPDATE", event.ID)
         .          .    870:		if err != nil {
         .          .    871:			return err
         .          .    872:		}
         .          .    873:		defer rows.Close()
         .          .    874:
         .          .    875:		var reports []Report
         .       30ms    876:		for rows.Next() {
         .       10ms    877:			var reservation Reservation
         .          .    878:			var sheet Sheet
         .      100ms    879:			if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.Price); err != nil {
         .          .    880:				return err
         .          .    881:			}
         .          .    882:			report := Report{
         .          .    883:				ReservationID: reservation.ID,
         .          .    884:				EventID:       event.ID,
         .          .    885:				Rank:          sheet.Rank,
         .          .    886:				Num:           sheet.Num,
         .          .    887:				UserID:        reservation.UserID,
         .       90ms    888:				SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .    889:				Price:         event.Price + sheet.Price,
         .          .    890:			}
         .          .    891:			if reservation.CanceledAt != nil {
         .       30ms    892:				report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .    893:			}
         .       30ms    894:			reports = append(reports, report)
         .          .    895:		}
         .      130ms    896:		return renderReportCSV(c, reports)
         .          .    897:	}, adminLoginRequired)
         .          .    898:	e.GET("/admin/api/reports/sales", func(c echo.Context) error {
         .          .    899:		rows, err := db.Query("select r.*, s.rank as sheet_rank, s.num as sheet_num, s.price as sheet_price, e.id as event_id, e.price as event_price from reservations r inner join sheets s on s.id = r.sheet_id inner join events e on e.id = r.event_id order by reserved_at asc for update")
         .          .    900:		if err != nil {
         .          .    901:			return err
ROUTINE ======================== main.main.func2 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      4.21s (flat, cum) 15.02% of Total
         .          .    335:	}
         .          .    336:	e.Use(session.Middleware(sessions.NewCookieStore([]byte("secret"))))
         .          .    337:	e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{Output: os.Stderr}))
         .          .    338:	e.Static("/", "public")
         .          .    339:	e.GET("/", func(c echo.Context) error {
         .      4.21s    340:		events, err := getEvents(false)
         .          .    341:		if err != nil {
         .          .    342:			return err
         .          .    343:		}
         .          .    344:		for i, v := range events {
         .          .    345:			events[i] = sanitizeEvent(v)
ROUTINE ======================== main.main.func20 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      40ms      3.79s (flat, cum) 13.53% of Total
         .          .    901:			return err
         .          .    902:		}
         .          .    903:		defer rows.Close()
         .          .    904:
         .          .    905:		var reports []Report
      10ms      1.24s    906:		for rows.Next() {
         .       30ms    907:			var reservation Reservation
         .       60ms    908:			var sheet Sheet
         .       40ms    909:			var event Event
      10ms      910ms    910:			if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.ID, &event.Price); err != nil {
         .          .    911:				return err
         .          .    912:			}
         .          .    913:			report := Report{
         .          .    914:				ReservationID: reservation.ID,
         .          .    915:				EventID:       event.ID,
         .          .    916:				Rank:          sheet.Rank,
         .          .    917:				Num:           sheet.Num,
         .          .    918:				UserID:        reservation.UserID,
      20ms      310ms    919:				SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .    920:				Price:         event.Price + sheet.Price,
         .          .    921:			}
         .          .    922:			if reservation.CanceledAt != nil {
         .      190ms    923:				report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .    924:			}
         .      360ms    925:			reports = append(reports, report)
         .          .    926:		}
         .      650ms    927:		return renderReportCSV(c, reports)
         .          .    928:	}, adminLoginRequired)
         .          .    929:
         .          .    930:	e.Start(":8080")
         .          .    931:}
         .          .    932:
ROUTINE ======================== main.main.func4 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.036% of Total
         .          .    408:		}
         .          .    409:		if err := tx.Commit(); err != nil {
         .          .    410:			return err
         .          .    411:		}
         .          .    412:
         .       10ms    413:		return c.JSON(201, echo.Map{
         .          .    414:			"id":       userID,
         .          .    415:			"nickname": params.Nickname,
         .          .    416:		})
         .          .    417:	})
         .          .    418:	e.GET("/api/users/:id", func(c echo.Context) error {
ROUTINE ======================== main.main.func5 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      5.39s (flat, cum) 19.24% of Total
         .          .    441:			var sheet Sheet
         .          .    442:			if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num); err != nil {
         .          .    443:				return err
         .          .    444:			}
         .          .    445:
         .      2.74s    446:			event, err := getEvent(reservation.EventID, -1)
         .          .    447:			if err != nil {
         .          .    448:				return err
         .          .    449:			}
         .          .    450:			price := event.Sheets[sheet.Rank].Price
         .          .    451:			event.Sheets = nil
         .          .    452:			event.Total = 0
         .          .    453:			event.Remains = 0
         .          .    454:
         .          .    455:			reservation.Event = event
         .          .    456:			reservation.SheetRank = sheet.Rank
         .          .    457:			reservation.SheetNum = sheet.Num
         .          .    458:			reservation.Price = price
         .          .    459:			reservation.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .    460:			if reservation.CanceledAt != nil {
         .          .    461:				reservation.CanceledAtUnix = reservation.CanceledAt.Unix()
         .          .    462:			}
         .          .    463:			recentReservations = append(recentReservations, reservation)
         .          .    464:		}
         .          .    465:		if recentReservations == nil {
         .          .    466:			recentReservations = make([]Reservation, 0)
         .          .    467:		}
         .          .    468:
         .          .    469:		var totalPrice int
         .          .    470:		if err := db.QueryRow("SELECT IFNULL(SUM(e.price + s.price), 0) FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.user_id = ? AND r.canceled_at IS NULL", user.ID).Scan(&totalPrice); err != nil {
         .          .    471:			return err
         .          .    472:		}
         .          .    473:
         .          .    474:		rows, err = db.Query("SELECT event_id FROM reservations WHERE user_id = ? GROUP BY event_id ORDER BY MAX(IFNULL(canceled_at, reserved_at)) DESC LIMIT 5", user.ID)
         .          .    475:		if err != nil {
         .          .    476:			return err
         .          .    477:		}
         .          .    478:		defer rows.Close()
         .          .    479:
         .          .    480:		var recentEvents []*Event
         .          .    481:		for rows.Next() {
         .          .    482:			var eventID int64
         .          .    483:			if err := rows.Scan(&eventID); err != nil {
         .          .    484:				return err
         .          .    485:			}
         .      2.65s    486:			event, err := getEvent(eventID, -1)
         .          .    487:			if err != nil {
         .          .    488:				return err
         .          .    489:			}
         .          .    490:			for k := range event.Sheets {
         .          .    491:				event.Sheets[k].Detail = nil
ROUTINE ======================== main.main.func6 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.036% of Total
         .          .    507:	e.POST("/api/actions/login", func(c echo.Context) error {
         .          .    508:		var params struct {
         .          .    509:			LoginName string `json:"login_name"`
         .          .    510:			Password  string `json:"password"`
         .          .    511:		}
         .       10ms    512:		c.Bind(&params)
         .          .    513:
         .          .    514:		user := new(User)
         .          .    515:		if err := db.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != nil {
         .          .    516:			if err == sql.ErrNoRows {
         .          .    517:				return resError(c, "authentication_failed", 401)
ROUTINE ======================== main.main.func9 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0         2s (flat, cum)  7.14% of Total
         .          .    553:		if err != nil {
         .          .    554:			return resError(c, "not_found", 404)
         .          .    555:		}
         .          .    556:
         .          .    557:		loginUserID := int64(-1)
         .       10ms    558:		if user, err := getLoginUser(c); err == nil {
         .          .    559:			loginUserID = user.ID
         .          .    560:		}
         .          .    561:
         .      1.96s    562:		event, err := getEvent(eventID, loginUserID)
         .          .    563:		if err != nil {
         .          .    564:			if err == sql.ErrNoRows {
         .          .    565:				return resError(c, "not_found", 404)
         .          .    566:			}
         .          .    567:			return err
         .          .    568:		} else if !event.PublicFg {
         .          .    569:			return resError(c, "not_found", 404)
         .          .    570:		}
         .       30ms    571:		return c.JSON(200, sanitizeEvent(event))
         .          .    572:	})
         .          .    573:	e.POST("/api/events/:id/actions/reserve", func(c echo.Context) error {
         .          .    574:		eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    575:		if err != nil {
         .          .    576:			return resError(c, "not_found", 404)
ROUTINE ======================== main.renderReportCSV in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      780ms (flat, cum)  2.78% of Total
         .          .    940:	CanceledAt    string
         .          .    941:	Price         int64
         .          .    942:}
         .          .    943:
         .          .    944:func renderReportCSV(c echo.Context, reports []Report) error {
         .      200ms    945:	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .    946:
         .          .    947:	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .       10ms    948:	for _, v := range reports {
         .      470ms    949:		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
         .       80ms    950:			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
         .          .    951:	}
         .          .    952:
         .          .    953:	c.Response().Header().Set("Content-Type", `text/csv; charset=UTF-8`)
         .          .    954:	c.Response().Header().Set("Content-Disposition", `attachment; filename="report.csv"`)
         .       20ms    955:	_, err := io.Copy(c.Response(), body)
         .          .    956:	return err
         .          .    957:}
         .          .    958:
         .          .    959:func resError(c echo.Context, e string, status int) error {
         .          .    960:	if e == "" {
ROUTINE ======================== main.renderReportCSV.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      40ms       40ms (flat, cum)  0.14% of Total
         .          .    940:	CanceledAt    string
         .          .    941:	Price         int64
         .          .    942:}
         .          .    943:
         .          .    944:func renderReportCSV(c echo.Context, reports []Report) error {
      40ms       40ms    945:	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .    946:
         .          .    947:	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .          .    948:	for _, v := range reports {
         .          .    949:		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
         .          .    950:			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
ROUTINE ======================== main.renderReportCSV.func1 in /home/isucon/local/go/src/strings/compare.go
      20ms      130ms (flat, cum)  0.46% of Total
         .          .     16:	// using strings.Compare. Basically no one should use strings.Compare.
         .          .     17:	// As the comment above says, it is here only for symmetry with package bytes.
         .          .     18:	// If performance is important, the compiler should be changed to recognize
         .          .     19:	// the pattern so that all code doing three-way comparisons, not just code
         .          .     20:	// using strings.Compare, can benefit.
      10ms       50ms     21:	if a == b {
         .          .     22:		return 0
         .          .     23:	}
      10ms       80ms     24:	if a < b {
         .          .     25:		return -1
         .          .     26:	}
         .          .     27:	return +1
         .          .     28:}
ROUTINE ======================== main.sessUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum) 0.071% of Total
         .          .     84:	LoginName string `json:"login_name,omitempty"`
         .          .     85:	PassHash  string `json:"pass_hash,omitempty"`
         .          .     86:}
         .          .     87:
         .          .     88:func sessUserID(c echo.Context) int64 {
         .       20ms     89:	sess, _ := session.Get("session", c)
         .          .     90:	var userID int64
         .          .     91:	if x, ok := sess.Values["user_id"]; ok {
         .          .     92:		userID, _ = x.(int64)
         .          .     93:	}
         .          .     94:	return userID
ROUTINE ======================== main.validateRank in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.036% of Total
         .          .    294:	}
         .          .    295:}
         .          .    296:
         .          .    297:func validateRank(rank string) bool {
         .          .    298:	var count int
         .       10ms    299:	db.QueryRow("SELECT COUNT(*) FROM sheets WHERE `rank` = ?", rank).Scan(&count)
         .          .    300:	return count > 0
         .          .    301:}
         .          .    302:
         .          .    303:type Renderer struct {
         .          .    304:	templates *template.Template
ROUTINE ======================== runtime.main in /home/isucon/local/go/src/runtime/proc.go
         0       10ms (flat, cum) 0.036% of Total
         .          .    193:		// A program compiled with -buildmode=c-archive or c-shared
         .          .    194:		// has a main, but it is not executed.
         .          .    195:		return
         .          .    196:	}
         .          .    197:	fn = main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .       10ms    198:	fn()
         .          .    199:	if raceenabled {
         .          .    200:		racefini()
         .          .    201:	}
         .          .    202:
         .          .    203:	// Make racy client program work: if panicking on
