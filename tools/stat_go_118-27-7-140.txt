ratio 17.71 %
name main.adminLoginRequired in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      5.27s (flat, cum) 17.71% of Total
         .          .		}
         .          .		return next(c)
         .          .	}
         .          .}
         .          .
         .      5.27sfunc adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .          .		if _, err := getLoginAdministrator(c); err != nil {
         .          .			return resError(c, "admin_login_required", 401)
         .          .		}
         .          .		return next(c)

17.71
ratio 4.4 %
name main.deleteReservationHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.31s (flat, cum)  4.40% of Total
         .          .		return err
         .          .	}
         .          .
         .          .	event, err := getEvent(eventID, user.ID)
         .          .	if err != nil {
         .       10ms		if err == sql.ErrNoRows {
         .          .			return resError(c, "invalid_event", 404)
         .          .		}
         .          .		return err
         .          .	} else if !event.PublicFg {
         .          .		return resError(c, "invalid_event", 404)
         .          .	}
         .          .
         .          .	if !validateRank(rank) {
         .          .		return resError(c, "invalid_rank", 404)
         .          .	}
         .          .
         .          .	var sheet Sheet
         .          .	if err := db.QueryRow("SELECT * FROM sheets WHERE `rank` = ? AND num = ?", rank, num).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "invalid_sheet", 404)
         .          .		}
         .          .		log.Println("we shouldn't reach here...", err)
         .          .		return err
         .          .	}
         .          .
         .          .	for {
         .          .		tx, err := db.Begin()
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .
         .          .		var reservation Reservation
         .      1.25s		if err := tx.QueryRow("SELECT * FROM reservations WHERE event_id = ? AND sheet_id = ? AND canceled_at IS NULL GROUP BY event_id HAVING reserved_at = MIN(reserved_at) FOR UPDATE", event.ID, sheet.ID).Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt); err != nil {
         .          .			tx.Rollback()
         .       10ms			if err == sql.ErrNoRows {
         .       10ms				return resError(c, "not_reserved", 400)
         .          .			}
         .          .			log.Println("re-try: rollback by", err)
         .          .			continue
         .          .		}
         .          .
         .          .		if reservation.UserID != user.ID {
         .          .			tx.Rollback()
         .          .			return resError(c, "not_permitted", 403)
         .          .		}
         .          .
         .       30ms		if _, err := tx.Exec("UPDATE reservations SET canceled_at = ? WHERE id = ?", time.Now().UTC().Format("2006-01-02 15:04:05.000000"), reservation.ID); err != nil {
         .          .			tx.Rollback()
         .          .			log.Println("re-try: rollback by", err)
         .          .			continue
         .          .		}
         .          .

4.4
ratio 0.64 %
name main.getAdminEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      190ms (flat, cum)  0.64% of Total
         .          .	}
         .          .	return c.JSON(200, event)
         .          .}
         .          .
         .          .func getAdminEventHandler(c echo.Context) error {
         .      100ms	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {
         .       80ms		return resError(c, "not_found", 404)
         .          .	}
         .          .	event, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .          .		return err
         .          .	}
         .       10ms	return c.JSON(200, event)
         .          .}
         .          .
         .          .func postAdminEditEventHandler(c echo.Context) error {
         .          .	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {

0.64
ratio 0.13 %
name main.getAdminHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       40ms (flat, cum)  0.13% of Total
         .          .	administrator := c.Get("administrator")
         .          .	log.Printf("getAdminHandler: %q", administrator)
         .          .	if administrator != nil {
         .          .		var err error
         .          .		if events, err = getEvents(true); err != nil {
         .       20ms			log.Printf("getEvents: %v", err)
         .          .			return err
         .          .		}
         .          .	}
         .          .	return c.Render(200, "admin.tmpl", echo.Map{
         .       10ms		"events":        events,
         .          .		"administrator": administrator,
         .       10ms		"origin":        c.Scheme() + "://" + c.Request().Host,
         .          .	})
         .          .}
         .          .
         .          .func postAdminLoginHandler(c echo.Context) error {
         .          .	var params struct {

0.13
ratio 17.04 %
name main.getAdminReportsEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      5.07s (flat, cum) 17.04% of Total
         .          .	c.JSON(200, e)
         .          .	return nil
         .          .
         .          .}
         .          .
         .       80msfunc getAdminReportsEventHandler(c echo.Context) error {
         .      950ms	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .          .
         .      910ms	event, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .
         .      3.13s	rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num, s.price AS sheet_price, e.price AS event_price FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.event_id = ? ORDER BY reserved_at ASC FOR UPDATE", event.ID)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	defer rows.Close()
         .          .

17.04
ratio 14.99 %
name main.getEvent in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      4.46s (flat, cum) 14.99% of Total
         .          .	return events, nil
         .          .}
         .          .
         .          .func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .	var event Event
         .       60ms	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .		return nil, err
         .          .	}
         .          .	event.Sheets = map[string]*Sheets{
         .      120ms		"S": &Sheets{},
         .      4.13s		"A": &Sheets{},
         .          .		"B": &Sheets{},
         .          .		"C": &Sheets{},
         .          .	}
         .          .
         .          .	for _, sheet := range allSheets {
         .       10ms		sheet := sheet
         .          .		event.Sheets[sheet.Rank].Price = event.Price + sheet.Price
         .          .		event.Total++
         .          .		event.Sheets[sheet.Rank].Total++
         .          .
         .          .		reservation := eventSheetCache.Get(event.ID, sheet.ID)
         .          .		if reservation != nil {
         .          .			sheet.Mine = reservation.UserID == loginUserID
         .          .			sheet.Reserved = true
         .          .			sheet.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .		} else {
         .          .			event.Remains++
         .          .			event.Sheets[sheet.Rank].Remains++
         .          .		}
         .          .
         .      140ms		event.Sheets[sheet.Rank].Detail = append(event.Sheets[sheet.Rank].Detail, &sheet)
         .          .	}
         .          .
         .          .	return &event, nil
         .          .}
         .          .

14.99
ratio 0.13 %
name main.getEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       40ms (flat, cum)  0.13% of Total
         .          .	loginUserID := int64(-1)
         .          .	if user, err := getLoginUser(c); err == nil {
         .          .		loginUserID = user.ID
         .          .	}
         .          .
         .       30ms	event, err := getEvent(eventID, loginUserID)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .          .		return err
         .          .	} else if !event.PublicFg {
         .       10ms		return resError(c, "not_found", 404)
         .          .	}
         .          .	return c.JSON(200, sanitizeEvent(event))
         .          .}
         .          .func postReserveHandler(c echo.Context) error {
         .          .	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)

0.13
ratio 19.76 %
name main.getEvents in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     380ms      5.88s (flat, cum) 19.76% of Total
         .          .
         .          .	rows, err := tx.Query("SELECT * FROM events ORDER BY id ASC")
         .          .	if err != nil {
         .          .		return nil, err
         .          .	}
         .       70ms	defer rows.Close()
         .          .
         .          .	var events []*Event
         .      720ms	for rows.Next() {
         .          .		var event Event
     140ms      3.66s		if err := rows.Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
      60ms       60ms			return nil, err
         .          .		}
      30ms      200ms		if !all && !event.PublicFg {
         .          .			continue
         .          .		}
      20ms       20ms		events = append(events, &event)
         .          .	}
         .      280ms	for i, v := range events {
      20ms       20ms		event, err := getEvent(v.ID, -1)
      20ms       20ms		if err != nil {
         .          .			return nil, err
         .          .		}
      50ms      700ms		for k := range event.Sheets {
      40ms      130ms			event.Sheets[k].Detail = nil
         .          .		}
         .          .		events[i] = event
         .          .	}
         .          .	return events, nil
         .          .}

19.76
ratio 0.067 %
name main.getEventsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum) 0.067% of Total
         .          .func getEventsHandler(c echo.Context) error {
         .          .	events, err := getEvents(true)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .       20ms	for i, v := range events {
         .          .		events[i] = sanitizeEvent(v)
         .          .	}
         .          .	return c.JSON(200, events)
         .          .}
         .          .func getEventHandler(c echo.Context) error {

0.067
ratio 2.92 %
name main.getLoginAdministrator in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      870ms (flat, cum)  2.92% of Total
         .          .	var user User
         .          .	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .	return &user, err
         .          .}
         .          .
         .       10msfunc getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .          .	administratorID := sessAdministratorID(c)
         .          .	if administratorID == 0 {
         .      660ms		return nil, errors.New("not logged in")
         .          .	}
         .          .	var administrator Administrator
         .      190ms	err := db.QueryRow("SELECT id, nickname FROM administrators WHERE id = ?", administratorID).Scan(&administrator.ID, &administrator.Nickname)
         .          .	if err != nil {
         .       10ms		log.Fatal("db.QueryRow:", err)
         .          .	}
         .          .	return &administrator, err
         .          .}
         .          .
         .          .func getEvents(all bool) ([]*Event, error) {

2.92
ratio 0.034 %
name main.getLoginUser in /home/isucon/local/go/src/errors/errors.go
         0       10ms (flat, cum) 0.034% of Total
         .          .// Package errors implements functions to manipulate errors.
         .          .package errors
         .          .
         .          .// New returns an error that formats as the given text.
         .          .func New(text string) error {
         .       10ms	return &errorString{text}
         .          .}
         .          .
         .          .// errorString is a trivial implementation of error.
         .          .type errorString struct {
         .          .	s string

0.034
ratio 3.63 %
name main.getUserHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms      1.08s (flat, cum)  3.63% of Total
         .          .	return c.JSON(201, echo.Map{
         .          .		"id":       userID,
         .          .		"nickname": params.Nickname,
         .          .	})
         .          .}
         .       20msfunc getUserHandler(c echo.Context) error {
         .          .	var user User
         .       10ms	if err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", c.Param("id")).Scan(&user.ID, &user.Nickname); err != nil {
         .          .		return err
         .          .	}
         .          .
         .          .	loginUser, err := getLoginUser(c)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	if user.ID != loginUser.ID {
         .      440ms		return resError(c, "forbidden", 403)
         .          .	}
         .          .
         .          .	rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id WHERE r.user_id = ? ORDER BY IFNULL(r.canceled_at, r.reserved_at) DESC LIMIT 5", user.ID)
         .      260ms	if err != nil {
         .          .		return err
         .          .	}
         .          .	defer rows.Close()
         .          .
         .          .	var recentReservations []Reservation
         .          .	for rows.Next() {
         .          .		var reservation Reservation
         .          .		var sheet Sheet
         .          .		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num); err != nil {
         .          .			return err
         .          .		}
         .          .
         .          .		event, err := getEvent(reservation.EventID, -1)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		price := event.Sheets[sheet.Rank].Price
         .          .		event.Sheets = nil
         .          .		event.Total = 0
         .          .		event.Remains = 0
         .          .
         .          .		reservation.Event = event
         .          .		reservation.SheetRank = sheet.Rank
         .          .		reservation.SheetNum = sheet.Num
         .          .		reservation.Price = price
         .          .		reservation.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .		if reservation.CanceledAt != nil {
         .          .			reservation.CanceledAtUnix = reservation.CanceledAt.Unix()
         .          .		}
         .          .		recentReservations = append(recentReservations, reservation)
         .          .	}
         .          .	if recentReservations == nil {
         .          .		recentReservations = make([]Reservation, 0)
         .          .	}
         .          .
         .          .	var totalPrice int
         .          .	if err := db.QueryRow("SELECT IFNULL(SUM(e.price + s.price), 0) FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.user_id = ? AND r.canceled_at IS NULL", user.ID).Scan(&totalPrice); err != nil {
         .          .		return err
         .          .	}
         .          .
         .          .	rows, err = db.Query("SELECT event_id FROM reservations WHERE user_id = ? GROUP BY event_id ORDER BY MAX(IFNULL(canceled_at, reserved_at)) DESC LIMIT 5", user.ID)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .       40ms	defer rows.Close()
         .          .
         .          .	var recentEvents []*Event
         .          .	for rows.Next() {
         .          .		var eventID int64
         .       30ms		if err := rows.Scan(&eventID); err != nil {
         .       50ms			return err
         .          .		}
         .          .		event, err := getEvent(eventID, -1)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		for k := range event.Sheets {
         .          .			event.Sheets[k].Detail = nil
         .          .		}
         .       80ms		recentEvents = append(recentEvents, event)
         .          .	}
      10ms       10ms	if recentEvents == nil {
         .          .		recentEvents = make([]*Event, 0)
         .          .	}
         .          .
         .          .	return c.JSON(200, echo.Map{
         .          .		"id":                  user.ID,
         .       80ms		"nickname":            user.Nickname,
         .       50ms		"recent_reservations": recentReservations,
         .       10ms		"total_price":         totalPrice,
         .          .		"recent_events":       recentEvents,
         .          .	})
         .          .
         .          .}
         .          .

3.63
ratio 95.83 %
name main.main in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      80ms     28.51s (flat, cum) 95.83% of Total
         .          .	var err error
         .          .	logfile, err := os.Create("/tmp/log.log")
         .          .	if err != nil {
         .          .		panic("cannnot open test.log:" + err.Error())
         .          .	}
      10ms       10ms	defer logfile.Close()
         .       60ms	log.SetOutput(io.MultiWriter(logfile, os.Stdout))
         .          .	log.SetFlags(log.Ldate | log.Ltime)
         .          .	
      20ms       20ms	db, err = sql.Open("mysql", dsn)
         .          .	if err != nil {
      10ms      190ms		log.Fatal(err)
         .          .	}
         .          .
         .          .	mainInit()
         .          .
         .          .	e := echo.New()
         .          .	funcs := template.FuncMap{
      10ms       10ms		"encode_json": func(v interface{}) string {
         .          .			b, _ := json.Marshal(v)
         .          .			return string(b)
         .          .		},
         .          .	}
         .          .	e.Renderer = &Renderer{
         .       20ms		templates: template.Must(template.New("").Delims("[[", "]]").Funcs(funcs).ParseGlob("views/*.tmpl")),
         .          .	}
      10ms      770ms	e.Use(session.Middleware(sessions.NewCookieStore([]byte("secret"))))
      10ms      170ms	e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{Output: os.Stderr}))
         .       30ms	e.Static("/", "public")
         .      200ms	e.GET("/", getIndexHandler, fillinUser)
         .       40ms	e.GET("/initialize", getInitializeHandler)
         .      100ms	e.POST("/api/users", postUsersHandler)
         .      140ms	e.GET("/api/users/:id", getUserHandler, loginRequired)
      10ms      1.88s	e.POST("/api/actions/login", postLoginHandler)
         .          .	e.POST("/api/actions/logout", postLogoutHandler, loginRequired)
         .          .	e.GET("/api/events", getEventsHandler)
         .          .	e.GET("/api/events/:id", getEventHandler)
         .       50ms	e.POST("/api/events/:id/actions/reserve", postReserveHandler, loginRequired)
         .          .	e.DELETE("/api/events/:id/sheets/:rank/:num/reservation", deleteReservationHandler, loginRequired)
         .       10ms	e.GET("/admin/", getAdminHandler, fillinAdministrator)
         .          .	e.POST("/admin/api/actions/login", postAdminLoginHandler)
         .      160ms	e.POST("/admin/api/actions/logout", postAdminLogoutHandler, adminLoginRequired)
         .      1.35s	e.GET("/admin/api/events", getAdminEventsHandler, adminLoginRequired)
         .       60ms	e.POST("/admin/api/events", postAdminEventsHandler, adminLoginRequired)
         .     17.67s	e.GET("/admin/api/events/:id", getAdminEventHandler, adminLoginRequired)
         .       40ms	e.POST("/admin/api/events/:id/actions/edit", postAdminEditEventHandler, adminLoginRequired)
         .      4.28s	e.GET("/admin/api/reports/events/:id/sales", getAdminReportsEventHandler, adminLoginRequired)
         .          .	e.GET("/admin/api/reports/sales", getAdminReportsHandler, adminLoginRequired)
         .          .
         .      1.25s	e.Start(":8080")
         .          .}
         .          .
         .          .type Report struct {
         .          .	ReservationID int64
         .          .	EventID       int64

95.83
ratio 1.45 %
name main.main in /home/isucon/local/go/src/text/template/template.go
     210ms      430ms (flat, cum)  1.45% of Total
         .          .}
         .          .
         .          .// init guarantees that t has a valid common structure.
         .          .func (t *Template) init() {
         .          .	if t.common == nil {
      10ms       10ms		c := new(common)
      60ms       60ms		c.tmpl = make(map[string]*Template)
      70ms       70ms		c.parseFuncs = make(FuncMap)
      50ms      260ms		c.execFuncs = make(map[string]reflect.Value)
      20ms       20ms		t.common = c
         .          .	}
         .          .}
         .          .
         .          .// Clone returns a duplicate of the template, including all associated
         .          .// templates. The actual representation is not copied, but the name space of
         .          .// associated templates is, so further calls to Parse in the copy will add
         .          .// templates to the copy but not to the original. Clone can be used to prepare
         .          .// common templates and use them with variant definitions for other templates
         .          .// by adding the variants after the clone is made.
         .          .func (t *Template) Clone() (*Template, error) {
         .          .	nt := t.copy(nil)
         .          .	nt.init()
         .          .	if t.common == nil {
         .          .		return nt, nil
         .          .	}
         .          .	for k, v := range t.tmpl {
         .          .		if k == t.name {
         .          .			nt.tmpl[t.name] = nt
         .          .			continue
         .          .		}
         .          .		// The associated templates share nt's common structure.
         .          .		tmpl := v.copy(nt.common)
         .          .		nt.tmpl[k] = tmpl
         .          .	}
         .          .	t.muFuncs.RLock()
         .          .	defer t.muFuncs.RUnlock()
         .          .	for k, v := range t.parseFuncs {
         .          .		nt.parseFuncs[k] = v
         .          .	}
         .          .	for k, v := range t.execFuncs {
         .          .		nt.execFuncs[k] = v
         .          .	}
         .          .	return nt, nil
         .          .}
         .          .
         .          .// copy returns a shallow copy of t, with common set to the argument.
         .          .func (t *Template) copy(c *common) *Template {
         .          .	nt := New(t.name)
         .          .	nt.Tree = t.Tree
         .          .	nt.common = c
         .          .	nt.leftDelim = t.leftDelim
         .          .	nt.rightDelim = t.rightDelim
         .          .	return nt
         .          .}
         .          .
         .          .// AddParseTree adds parse tree for template with given name and associates it with t.
         .          .// If the template does not already exist, it will create a new one.
         .          .// If the template does exist, it will be replaced.
         .          .func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error) {
         .          .	t.init()
         .          .	// If the name is the name of this template, overwrite this template.
         .          .	nt := t
         .          .	if name != t.name {
         .          .		nt = t.New(name)
         .          .	}
         .          .	// Even if nt == t, we need to install it in the common.tmpl map.
         .          .	if replace, err := t.associate(nt, tree); err != nil {
         .          .		return nil, err
         .          .	} else if replace || nt.Tree == nil {
         .          .		nt.Tree = tree
         .          .	}
         .          .	return nt, nil
         .          .}
         .          .
         .          .// Templates returns a slice of defined templates associated with t.
         .          .func (t *Template) Templates() []*Template {
         .          .	if t.common == nil {
         .          .		return nil
         .          .	}
         .          .	// Return a slice so we don't expose the map.
         .          .	m := make([]*Template, 0, len(t.tmpl))
         .          .	for _, v := range t.tmpl {
         .          .		m = append(m, v)
         .          .	}
         .          .	return m
         .          .}
         .          .
         .          .// Delims sets the action delimiters to the specified strings, to be used in
         .          .// subsequent calls to Parse, ParseFiles, or ParseGlob. Nested template
         .          .// definitions will inherit the settings. An empty delimiter stands for the
         .          .// corresponding default: {{ or }}.
         .          .// The return value is the template, so calls can be chained.
         .          .func (t *Template) Delims(left, right string) *Template {
         .          .	t.init()
         .       10ms	t.leftDelim = left
         .          .	t.rightDelim = right
         .          .	return t
         .          .}
         .          .
         .          .// Funcs adds the elements of the argument map to the template's function map.

1.45
ratio 39.8 %
name main.postAdminEditEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      40ms     11.84s (flat, cum) 39.80% of Total
         .          .		return err
         .          .	}
         .          .	return c.JSON(200, event)
         .          .}
         .          .
         .      100msfunc postAdminEditEventHandler(c echo.Context) error {
         .          .	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .          .
         .      250ms	var params struct {
         .          .		Public bool `json:"public"`
         .          .		Closed bool `json:"closed"`
         .          .	}
         .          .	c.Bind(&params)
         .          .	if params.Closed {
         .          .		params.Public = false
         .          .	}
         .          .
         .          .	event, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .          .		return err
         .          .	}
         .          .
         .          .	if event.ClosedFg {
         .          .		return resError(c, "cannot_edit_closed_event", 400)
         .          .	} else if event.PublicFg && params.Closed {
         .      1.04s		return resError(c, "cannot_close_public_event", 400)
         .          .	}
         .          .
         .          .	tx, err := db.Begin()
         .          .	if err != nil {
         .          .		return err
         .          .	}
      10ms      5.76s	if _, err := tx.Exec("UPDATE events SET public_fg = ?, closed_fg = ? WHERE id = ?", params.Public, params.Closed, event.ID); err != nil {
      10ms       10ms		tx.Rollback()
         .      4.66s		return err
         .          .	}
         .          .	if err := tx.Commit(); err != nil {
         .          .		return err
         .          .	}
         .          .
      20ms       20ms	e, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	c.JSON(200, e)
         .          .	return nil

39.8
ratio 1.61 %
name main.postAdminEventsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms      480ms (flat, cum)  1.61% of Total
         .          .	}
         .          .	c.Bind(&params)
         .          .
         .          .	tx, err := db.Begin()
         .          .	if err != nil {
         .      160ms		return err
         .          .	}
         .          .
         .       90ms	res, err := tx.Exec("INSERT INTO events (title, public_fg, closed_fg, price) VALUES (?, ?, 0, ?)", params.Title, params.Public, params.Price)
         .          .	if err != nil {
         .          .		tx.Rollback()
         .          .		return err
         .          .	}
         .          .	eventID, err := res.LastInsertId()
         .          .	if err != nil {
         .          .		tx.Rollback()
         .          .		return err
         .          .	}
      10ms      210ms	if err := tx.Commit(); err != nil {
         .          .		return err
         .          .	}
         .          .
         .       10ms	event, err := getEvent(eventID, -1)
         .       10ms	if err != nil {
         .          .		return err
         .          .	}
         .          .	return c.JSON(200, event)
         .          .}
         .          .

1.61
ratio 0.17 %
name main.postAdminLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       50ms (flat, cum)  0.17% of Total
         .          .		LoginName string `json:"login_name"`
         .          .		Password  string `json:"password"`
         .          .	}
         .          .	c.Bind(&params)
         .          .
         .       10ms	administrator := new(Administrator)
         .          .	if err := db.QueryRow("SELECT * FROM administrators WHERE login_name = ?", params.LoginName).Scan(&administrator.ID, &administrator.LoginName, &administrator.Nickname, &administrator.PassHash); err != nil {
         .       20ms		if err == sql.ErrNoRows {
         .          .			return resError(c, "authentication_failed", 401)
         .          .		}
         .          .		return err
         .          .	}
         .          .
         .          .	var passHash string
         .          .	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .		return err
         .          .	}
         .       10ms	if administrator.PassHash != passHash {
         .          .		return resError(c, "authentication_failed", 401)
         .          .	}
         .          .
         .          .	sessSetAdministratorID(c, administrator.ID)
         .          .	administrator, err := getLoginAdministrator(c)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .       10ms	return c.JSON(200, administrator)
         .          .}
         .          .
         .          .func postAdminLogoutHandler(c echo.Context) error {
         .          .	sessDeleteAdministratorID(c)
         .          .	return c.NoContent(204)

0.17
ratio 2.08 %
name main.postLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      620ms (flat, cum)  2.08% of Total
         .          .		Password  string `json:"password"`
         .          .	}
         .          .	c.Bind(&params)
         .          .
         .          .	user := new(User)
         .      270ms	if err := db.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "authentication_failed", 401)
         .          .		}
         .          .		return err
         .          .	}
         .          .
         .          .	var passHash string
         .      310ms	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .		return err
         .          .	}
         .          .	if user.PassHash != passHash {
         .          .		return resError(c, "authentication_failed", 401)
         .          .	}
         .          .
         .       20ms	sessSetUserID(c, user.ID)
         .          .	user, err := getLoginUser(c)
         .          .	if err != nil {
         .       20ms		return err
         .          .	}
         .          .	return c.JSON(200, user)
         .          .}
         .          .
         .          .func postLogoutHandler(c echo.Context) error {

2.08
ratio 0.1 %
name main.postLogoutHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       30ms (flat, cum)   0.1% of Total
         .          .	return c.JSON(200, user)
         .          .}
         .          .
         .          .func postLogoutHandler(c echo.Context) error {
         .          .	sessDeleteUserID(c)
         .       30ms	return c.NoContent(204)
         .          .}
         .          .
         .          .func getEventsHandler(c echo.Context) error {
         .          .	events, err := getEvents(true)
         .          .	if err != nil {

0.1
ratio 1.08 %
name main.postReserveHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      320ms (flat, cum)  1.08% of Total
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "invalid_event", 404)
         .          .		}
         .          .		return err
         .          .	} else if !event.PublicFg {
         .       20ms		return resError(c, "invalid_event", 404)
         .          .	}
         .          .
         .          .	if !validateRank(params.Rank) {
         .          .		return resError(c, "invalid_rank", 400)
         .          .	}
         .          .
         .          .	var sheet Sheet
         .          .	var reservationID int64
         .          .	for {
         .          .		tx, err := db.Begin()
         .          .		if err := tx.QueryRow("SELECT * FROM sheets WHERE id NOT IN (SELECT sheet_id FROM reservations WHERE event_id = ? AND canceled_at IS NULL FOR UPDATE) AND `rank` = ? ORDER BY RAND() LIMIT 1", event.ID, params.Rank).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .			tx.Rollback()
         .          .			if err == sql.ErrNoRows {
         .          .				return resError(c, "sold_out", 409)
         .          .			}
         .          .			log.Println("re-try: rollback by", err)
         .          .			continue
         .          .		}
         .          .
         .          .		t := time.Now()
         .      210ms		res, err := tx.Exec("INSERT INTO reservations (event_id, sheet_id, user_id, reserved_at) VALUES (?, ?, ?, ?)", event.ID, sheet.ID, user.ID, t.UTC().Format("2006-01-02 15:04:05.000000"))
         .          .		if err != nil {
         .          .			tx.Rollback()
         .       40ms			log.Println("re-try: rollback by", err)
         .          .			continue
         .          .		}
         .          .		reservationID, err = res.LastInsertId()
         .          .		if err != nil {
         .          .			tx.Rollback()
         .          .			log.Println("re-try: rollback by", err)
         .          .			continue
         .          .		}
         .          .
         .       20ms		eventSheetCache.Set(event.ID, sheet.ID, EventSheetReservation{user.ID, t})
         .          .		if err := tx.Commit(); err != nil {
         .          .			tx.Rollback()
         .          .			log.Println("re-try: rollback by", err)
         .          .			continue
         .          .		}
         .          .		break
         .          .	}
         .          .	return c.JSON(202, echo.Map{
         .       10ms		"id":         reservationID,
         .          .		"sheet_rank": params.Rank,
         .       20ms		"sheet_num":  sheet.Num,
         .          .	})
         .          .}
         .          .func deleteReservationHandler(c echo.Context) error {
         .          .	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {

1.08
ratio 0.94 %
name main.postUsersHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      280ms (flat, cum)  0.94% of Total
         .          .	}()
         .          .
         .          .	return c.NoContent(204)
         .          .}
         .          .
         .       10msfunc postUsersHandler(c echo.Context) error {
         .          .	var params struct {
         .          .		Nickname  string `json:"nickname"`
         .          .		LoginName string `json:"login_name"`
         .          .		Password  string `json:"password"`
         .          .	}
         .          .	c.Bind(&params)
         .          .
         .          .	tx, err := db.Begin()
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .
         .          .	var user User
         .          .	if err := tx.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != sql.ErrNoRows {
         .          .		tx.Rollback()
         .          .		if err == nil {
         .      270ms			return resError(c, "duplicated", 409)
         .          .		}
         .          .		return err
         .          .	}
         .          .
         .          .	res, err := tx.Exec("INSERT INTO users (login_name, pass_hash, nickname) VALUES (?, SHA2(?, 256), ?)", params.LoginName, params.Password, params.Nickname)

0.94
ratio 0.067 %
name main.sessAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum) 0.067% of Total
         .          .}
         .          .
         .          .func sessAdministratorID(c echo.Context) int64 {
         .          .	sess, _ := session.Get("session", c)
         .          .	var administratorID int64
         .       20ms	if x, ok := sess.Values["administrator_id"]; ok {
         .          .		administratorID, _ = x.(int64)
         .          .	}
         .          .	return administratorID
         .          .}
         .          .

0.067
ratio 0.17 %
name main.sessDeleteUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       50ms (flat, cum)  0.17% of Total
         .          .	}
         .          .	sess.Values["user_id"] = id
         .          .	sess.Save(c.Request(), c.Response())
         .          .}
         .          .
         .       20msfunc sessDeleteUserID(c echo.Context) {
         .          .	sess, _ := session.Get("session", c)
         .          .	sess.Options = &sessions.Options{
         .          .		Path:     "/",
         .          .		MaxAge:   3600,
         .       30ms		HttpOnly: true,
         .          .	}
         .          .	delete(sess.Values, "user_id")
         .          .	sess.Save(c.Request(), c.Response())
         .          .}
         .          .

0.17
ratio 0.17 %
name main.sessSetAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       50ms (flat, cum)  0.17% of Total
         .          .	sess.Options = &sessions.Options{
         .          .		Path:     "/",
         .          .		MaxAge:   3600,
         .          .		HttpOnly: true,
         .          .	}
         .       30ms	sess.Values["administrator_id"] = id
         .       20ms	sess.Save(c.Request(), c.Response())
         .          .}
         .          .
         .          .func sessDeleteAdministratorID(c echo.Context) {
         .          .	sess, _ := session.Get("session", c)
         .          .	sess.Options = &sessions.Options{

0.17
ratio 1.31 %
name main.sessSetUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      390ms (flat, cum)  1.31% of Total
         .          .}
         .          .
         .          .func sessSetUserID(c echo.Context, id int64) {
         .          .	sess, _ := session.Get("session", c)
         .          .	sess.Options = &sessions.Options{
         .      200ms		Path:     "/",
         .          .		MaxAge:   3600,
         .          .		HttpOnly: true,
         .          .	}
         .       10ms	sess.Values["user_id"] = id
         .      180ms	sess.Save(c.Request(), c.Response())
         .          .}
         .          .
         .          .func sessDeleteUserID(c echo.Context) {
         .          .	sess, _ := session.Get("session", c)
         .          .	sess.Options = &sessions.Options{

1.31
ratio 0.2 %
name runtime.main in /home/isucon/local/go/src/runtime/proc.go
         0       60ms (flat, cum)   0.2% of Total
         .          .		// A program compiled with -buildmode=c-archive or c-shared
         .          .		// has a main, but it is not executed.
         .          .		return
         .          .	}
         .          .	fn = main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .       60ms	fn()
         .          .	if raceenabled {
         .          .		racefini()
         .          .	}
         .          .
         .          .	// Make racy client program work: if panicking on

0.2
