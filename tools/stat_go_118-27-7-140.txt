ratio 18.63 %
name main.adminLoginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      5.22s (flat, cum) 18.63% of Total
         .          .func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .          .		if _, err := getLoginAdministrator(c); err != nil {
         .          .			return resError(c, "admin_login_required", 401)
         .          .		}
         .      5.22s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func getLoginUser(c echo.Context) (*User, error) {
         .          .	userID := sessUserID(c)

18.63
ratio 9.56 %
name main.fillinAdministrator.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.68s (flat, cum)  9.56% of Total
         .          .func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .          .		if administrator, err := getLoginAdministrator(c); err == nil {
         .          .			c.Set("administrator", administrator)
         .          .		}
         .      2.68s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func validateRank(rank string) bool {
         .          .	var count int

9.56
ratio 15.02 %
name main.fillinUser.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      4.21s (flat, cum) 15.02% of Total
         .          .func fillinUser(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .          .		if user, err := getLoginUser(c); err == nil {
         .          .			c.Set("user", user)
         .          .		}
         .      4.21s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {

15.02
ratio 63.42 %
name main.getEvent in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     100ms     17.77s (flat, cum) 63.42% of Total
         .          .	return events, nil
         .          .}
         .          .
         .          .func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .	var event Event
         .       40ms	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .		return nil, err
         .          .	}
         .          .	event.Sheets = map[string]*Sheets{
         .          .		"S": &Sheets{},
         .          .		"A": &Sheets{},
         .          .		"B": &Sheets{},
         .          .		"C": &Sheets{},
         .          .	}
         .          .
         .       10ms	rows, err := db.Query("SELECT * FROM sheets ORDER BY `rank`, num")
         .          .	if err != nil {
         .          .		return nil, err
         .          .	}
         .          .	defer rows.Close()
         .          .
      10ms      400ms	for rows.Next() {
         .       50ms		var sheet Sheet
         .      620ms		if err := rows.Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .			return nil, err
         .          .		}
      10ms       30ms		event.Sheets[sheet.Rank].Price = event.Price + sheet.Price
         .          .		event.Total++
         .       20ms		event.Sheets[sheet.Rank].Total++
         .          .
         .       60ms		var reservation Reservation
      30ms     16.39s		err := db.QueryRow("SELECT * FROM reservations WHERE event_id = ? AND sheet_id = ? AND canceled_at IS NULL GROUP BY event_id, sheet_id HAVING reserved_at = MIN(reserved_at)", event.ID, sheet.ID).Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt)
         .          .		if err == nil {
         .          .			sheet.Mine = reservation.UserID == loginUserID
         .          .			sheet.Reserved = true
         .          .			sheet.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .		} else if err == sql.ErrNoRows {
         .          .			event.Remains++
      10ms       30ms			event.Sheets[sheet.Rank].Remains++
         .          .		} else {
         .          .			return nil, err
         .          .		}
         .          .
      40ms      120ms		event.Sheets[sheet.Rank].Detail = append(event.Sheets[sheet.Rank].Detail, &sheet)
         .          .	}
         .          .
         .          .	return &event, nil
         .          .}
         .          .

63.42
ratio 24.59 %
name main.getEvents in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      6.89s (flat, cum) 24.59% of Total
         .          .			continue
         .          .		}
         .          .		events = append(events, &event)
         .          .	}
         .          .	for i, v := range events {
         .      6.89s		event, err := getEvent(v.ID, -1)
         .          .		if err != nil {
         .          .			return nil, err
         .          .		}
         .          .		for k := range event.Sheets {
         .          .			event.Sheets[k].Detail = nil

24.59
ratio 0.071 %
name main.getLoginUser in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum) 0.071% of Total
         .          .		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func getLoginUser(c echo.Context) (*User, error) {
         .       20ms	userID := sessUserID(c)
         .          .	if userID == 0 {
         .          .		return nil, errors.New("not logged in")
         .          .	}
         .          .	var user User
         .          .	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)

0.071
ratio 28.3 %
name main.loginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      7.93s (flat, cum) 28.30% of Total
         .          .	sess.Save(c.Request(), c.Response())
         .          .}
         .          .
         .          .func loginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .       10ms		if _, err := getLoginUser(c); err != nil {
         .          .			return resError(c, "login_required", 401)
         .          .		}
         .      7.92s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {

28.3
ratio 0.036 %
name main.main in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.036% of Total
         .          .			reports = append(reports, report)
         .          .		}
         .          .		return renderReportCSV(c, reports)
         .          .	}, adminLoginRequired)
         .          .
         .       10ms	e.Start(":8080")
         .          .}
         .          .
         .          .type Report struct {
         .          .	ReservationID int64
         .          .	EventID       int64

0.036
ratio 6.03 %
name main.main.func10 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.69s (flat, cum)  6.03% of Total
         .          .		user, err := getLoginUser(c)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .
         .      1.68s		event, err := getEvent(eventID, user.ID)
         .          .		if err != nil {
         .          .			if err == sql.ErrNoRows {
         .          .				return resError(c, "invalid_event", 404)
         .          .			}
         .          .			return err
         .          .		} else if !event.PublicFg {
         .          .			return resError(c, "invalid_event", 404)
         .          .		}
         .          .
         .       10ms		if !validateRank(params.Rank) {
         .          .			return resError(c, "invalid_rank", 400)
         .          .		}
         .          .
         .          .		var sheet Sheet
         .          .		var reservationID int64

6.03
ratio 3.0 %
name main.main.func11 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      840ms (flat, cum)  3.00% of Total
         .          .		user, err := getLoginUser(c)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .
         .      840ms		event, err := getEvent(eventID, user.ID)
         .          .		if err != nil {
         .          .			if err == sql.ErrNoRows {
         .          .				return resError(c, "invalid_event", 404)
         .          .			}
         .          .			return err

3.0
ratio 9.56 %
name main.main.func12 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.68s (flat, cum)  9.56% of Total
         .          .	e.GET("/admin/", func(c echo.Context) error {
         .          .		var events []*Event
         .          .		administrator := c.Get("administrator")
         .          .		if administrator != nil {
         .          .			var err error
         .      2.68s			if events, err = getEvents(true); err != nil {
         .          .				return err
         .          .			}
         .          .		}
         .          .		return c.Render(200, "admin.tmpl", echo.Map{
         .          .			"events":        events,

9.56
ratio 0.32 %
name main.main.func16 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       90ms (flat, cum)  0.32% of Total
         .          .		}
         .          .		if err := tx.Commit(); err != nil {
         .          .			return err
         .          .		}
         .          .
         .       90ms		event, err := getEvent(eventID, -1)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		return c.JSON(200, event)
         .          .	}, adminLoginRequired)

0.32
ratio 0.68 %
name main.main.func17 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      190ms (flat, cum)  0.68% of Total
         .          .	e.GET("/admin/api/events/:id", func(c echo.Context) error {
         .          .		eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .		if err != nil {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .      190ms		event, err := getEvent(eventID, -1)
         .          .		if err != nil {
         .          .			if err == sql.ErrNoRows {
         .          .				return resError(c, "not_found", 404)
         .          .			}
         .          .			return err

0.68
ratio 0.64 %
name main.main.func18 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      180ms (flat, cum)  0.64% of Total
         .          .		c.Bind(&params)
         .          .		if params.Closed {
         .          .			params.Public = false
         .          .		}
         .          .
         .       90ms		event, err := getEvent(eventID, -1)
         .          .		if err != nil {
         .          .			if err == sql.ErrNoRows {
         .          .				return resError(c, "not_found", 404)
         .          .			}
         .          .			return err
         .          .		}
         .          .
         .          .		if event.ClosedFg {
         .          .			return resError(c, "cannot_edit_closed_event", 400)
         .          .		} else if event.PublicFg && params.Closed {
         .          .			return resError(c, "cannot_close_public_event", 400)
         .          .		}
         .          .
         .          .		tx, err := db.Begin()
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		if _, err := tx.Exec("UPDATE events SET public_fg = ?, closed_fg = ? WHERE id = ?", params.Public, params.Closed, event.ID); err != nil {
         .          .			tx.Rollback()
         .          .			return err
         .          .		}
         .          .		if err := tx.Commit(); err != nil {
         .          .			return err
         .          .		}
         .          .
         .       90ms		e, err := getEvent(eventID, -1)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		c.JSON(200, e)
         .          .		return nil

0.64
ratio 3.46 %
name main.main.func19 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      970ms (flat, cum)  3.46% of Total
         .          .		eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .		if err != nil {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .          .
         .      550ms		event, err := getEvent(eventID, -1)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .
         .          .		rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num, s.price AS sheet_price, e.price AS event_price FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.event_id = ? ORDER BY reserved_at ASC FOR UPDATE", event.ID)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		defer rows.Close()
         .          .
         .          .		var reports []Report
         .       30ms		for rows.Next() {
         .       10ms			var reservation Reservation
         .          .			var sheet Sheet
         .      100ms			if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.Price); err != nil {
         .          .				return err
         .          .			}
         .          .			report := Report{
         .          .				ReservationID: reservation.ID,
         .          .				EventID:       event.ID,
         .          .				Rank:          sheet.Rank,
         .          .				Num:           sheet.Num,
         .          .				UserID:        reservation.UserID,
         .       90ms				SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .				Price:         event.Price + sheet.Price,
         .          .			}
         .          .			if reservation.CanceledAt != nil {
         .       30ms				report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .			}
         .       30ms			reports = append(reports, report)
         .          .		}
         .      130ms		return renderReportCSV(c, reports)
         .          .	}, adminLoginRequired)
         .          .	e.GET("/admin/api/reports/sales", func(c echo.Context) error {
         .          .		rows, err := db.Query("select r.*, s.rank as sheet_rank, s.num as sheet_num, s.price as sheet_price, e.id as event_id, e.price as event_price from reservations r inner join sheets s on s.id = r.sheet_id inner join events e on e.id = r.event_id order by reserved_at asc for update")
         .          .		if err != nil {
         .          .			return err

3.46
ratio 15.02 %
name main.main.func2 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      4.21s (flat, cum) 15.02% of Total
         .          .	}
         .          .	e.Use(session.Middleware(sessions.NewCookieStore([]byte("secret"))))
         .          .	e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{Output: os.Stderr}))
         .          .	e.Static("/", "public")
         .          .	e.GET("/", func(c echo.Context) error {
         .      4.21s		events, err := getEvents(false)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		for i, v := range events {
         .          .			events[i] = sanitizeEvent(v)

15.02
ratio 13.53 %
name main.main.func20 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      40ms      3.79s (flat, cum) 13.53% of Total
         .          .			return err
         .          .		}
         .          .		defer rows.Close()
         .          .
         .          .		var reports []Report
      10ms      1.24s		for rows.Next() {
         .       30ms			var reservation Reservation
         .       60ms			var sheet Sheet
         .       40ms			var event Event
      10ms      910ms			if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.ID, &event.Price); err != nil {
         .          .				return err
         .          .			}
         .          .			report := Report{
         .          .				ReservationID: reservation.ID,
         .          .				EventID:       event.ID,
         .          .				Rank:          sheet.Rank,
         .          .				Num:           sheet.Num,
         .          .				UserID:        reservation.UserID,
      20ms      310ms				SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .				Price:         event.Price + sheet.Price,
         .          .			}
         .          .			if reservation.CanceledAt != nil {
         .      190ms				report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .			}
         .      360ms			reports = append(reports, report)
         .          .		}
         .      650ms		return renderReportCSV(c, reports)
         .          .	}, adminLoginRequired)
         .          .
         .          .	e.Start(":8080")
         .          .}
         .          .

13.53
ratio 0.036 %
name main.main.func4 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.036% of Total
         .          .		}
         .          .		if err := tx.Commit(); err != nil {
         .          .			return err
         .          .		}
         .          .
         .       10ms		return c.JSON(201, echo.Map{
         .          .			"id":       userID,
         .          .			"nickname": params.Nickname,
         .          .		})
         .          .	})
         .          .	e.GET("/api/users/:id", func(c echo.Context) error {

0.036
ratio 19.24 %
name main.main.func5 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      5.39s (flat, cum) 19.24% of Total
         .          .			var sheet Sheet
         .          .			if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num); err != nil {
         .          .				return err
         .          .			}
         .          .
         .      2.74s			event, err := getEvent(reservation.EventID, -1)
         .          .			if err != nil {
         .          .				return err
         .          .			}
         .          .			price := event.Sheets[sheet.Rank].Price
         .          .			event.Sheets = nil
         .          .			event.Total = 0
         .          .			event.Remains = 0
         .          .
         .          .			reservation.Event = event
         .          .			reservation.SheetRank = sheet.Rank
         .          .			reservation.SheetNum = sheet.Num
         .          .			reservation.Price = price
         .          .			reservation.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .			if reservation.CanceledAt != nil {
         .          .				reservation.CanceledAtUnix = reservation.CanceledAt.Unix()
         .          .			}
         .          .			recentReservations = append(recentReservations, reservation)
         .          .		}
         .          .		if recentReservations == nil {
         .          .			recentReservations = make([]Reservation, 0)
         .          .		}
         .          .
         .          .		var totalPrice int
         .          .		if err := db.QueryRow("SELECT IFNULL(SUM(e.price + s.price), 0) FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.user_id = ? AND r.canceled_at IS NULL", user.ID).Scan(&totalPrice); err != nil {
         .          .			return err
         .          .		}
         .          .
         .          .		rows, err = db.Query("SELECT event_id FROM reservations WHERE user_id = ? GROUP BY event_id ORDER BY MAX(IFNULL(canceled_at, reserved_at)) DESC LIMIT 5", user.ID)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		defer rows.Close()
         .          .
         .          .		var recentEvents []*Event
         .          .		for rows.Next() {
         .          .			var eventID int64
         .          .			if err := rows.Scan(&eventID); err != nil {
         .          .				return err
         .          .			}
         .      2.65s			event, err := getEvent(eventID, -1)
         .          .			if err != nil {
         .          .				return err
         .          .			}
         .          .			for k := range event.Sheets {
         .          .				event.Sheets[k].Detail = nil

19.24
ratio 0.036 %
name main.main.func6 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.036% of Total
         .          .	e.POST("/api/actions/login", func(c echo.Context) error {
         .          .		var params struct {
         .          .			LoginName string `json:"login_name"`
         .          .			Password  string `json:"password"`
         .          .		}
         .       10ms		c.Bind(&params)
         .          .
         .          .		user := new(User)
         .          .		if err := db.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != nil {
         .          .			if err == sql.ErrNoRows {
         .          .				return resError(c, "authentication_failed", 401)

0.036
ratio 7.14 %
name main.main.func9 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0         2s (flat, cum)  7.14% of Total
         .          .		if err != nil {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .          .
         .          .		loginUserID := int64(-1)
         .       10ms		if user, err := getLoginUser(c); err == nil {
         .          .			loginUserID = user.ID
         .          .		}
         .          .
         .      1.96s		event, err := getEvent(eventID, loginUserID)
         .          .		if err != nil {
         .          .			if err == sql.ErrNoRows {
         .          .				return resError(c, "not_found", 404)
         .          .			}
         .          .			return err
         .          .		} else if !event.PublicFg {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .       30ms		return c.JSON(200, sanitizeEvent(event))
         .          .	})
         .          .	e.POST("/api/events/:id/actions/reserve", func(c echo.Context) error {
         .          .		eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .		if err != nil {
         .          .			return resError(c, "not_found", 404)

7.14
ratio 2.78 %
name main.renderReportCSV in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      780ms (flat, cum)  2.78% of Total
         .          .	CanceledAt    string
         .          .	Price         int64
         .          .}
         .          .
         .          .func renderReportCSV(c echo.Context, reports []Report) error {
         .      200ms	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .
         .          .	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .       10ms	for _, v := range reports {
         .      470ms		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
         .       80ms			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
         .          .	}
         .          .
         .          .	c.Response().Header().Set("Content-Type", `text/csv; charset=UTF-8`)
         .          .	c.Response().Header().Set("Content-Disposition", `attachment; filename="report.csv"`)
         .       20ms	_, err := io.Copy(c.Response(), body)
         .          .	return err
         .          .}
         .          .
         .          .func resError(c echo.Context, e string, status int) error {
         .          .	if e == "" {

2.78
ratio 0.14 %
name main.renderReportCSV.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      40ms       40ms (flat, cum)  0.14% of Total
         .          .	CanceledAt    string
         .          .	Price         int64
         .          .}
         .          .
         .          .func renderReportCSV(c echo.Context, reports []Report) error {
      40ms       40ms	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .
         .          .	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .          .	for _, v := range reports {
         .          .		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
         .          .			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))

0.14
ratio 0.46 %
name main.renderReportCSV.func1 in /home/isucon/local/go/src/strings/compare.go
      20ms      130ms (flat, cum)  0.46% of Total
         .          .	// using strings.Compare. Basically no one should use strings.Compare.
         .          .	// As the comment above says, it is here only for symmetry with package bytes.
         .          .	// If performance is important, the compiler should be changed to recognize
         .          .	// the pattern so that all code doing three-way comparisons, not just code
         .          .	// using strings.Compare, can benefit.
      10ms       50ms	if a == b {
         .          .		return 0
         .          .	}
      10ms       80ms	if a < b {
         .          .		return -1
         .          .	}
         .          .	return +1
         .          .}

0.46
ratio 0.071 %
name main.sessUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum) 0.071% of Total
         .          .	LoginName string `json:"login_name,omitempty"`
         .          .	PassHash  string `json:"pass_hash,omitempty"`
         .          .}
         .          .
         .          .func sessUserID(c echo.Context) int64 {
         .       20ms	sess, _ := session.Get("session", c)
         .          .	var userID int64
         .          .	if x, ok := sess.Values["user_id"]; ok {
         .          .		userID, _ = x.(int64)
         .          .	}
         .          .	return userID

0.071
ratio 0.036 %
name main.validateRank in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.036% of Total
         .          .	}
         .          .}
         .          .
         .          .func validateRank(rank string) bool {
         .          .	var count int
         .       10ms	db.QueryRow("SELECT COUNT(*) FROM sheets WHERE `rank` = ?", rank).Scan(&count)
         .          .	return count > 0
         .          .}
         .          .
         .          .type Renderer struct {
         .          .	templates *template.Template

0.036
ratio 0.036 %
name runtime.main in /home/isucon/local/go/src/runtime/proc.go
         0       10ms (flat, cum) 0.036% of Total
         .          .		// A program compiled with -buildmode=c-archive or c-shared
         .          .		// has a main, but it is not executed.
         .          .		return
         .          .	}
         .          .	fn = main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .       10ms	fn()
         .          .	if raceenabled {
         .          .		racefini()
         .          .	}
         .          .
         .          .	// Make racy client program work: if panicking on

0.036
