ratio 73.33 %
name main.getEvent in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms      440ms (flat, cum) 73.33% of Total
         .          .	if err != nil {
         .          .		return nil, err
         .          .	}
         .          .	defer rows.Close()
         .          .
         .       10ms	for rows.Next() {
         .          .		var sheet Sheet
         .       10ms		if err := rows.Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .			return nil, err
         .          .		}
         .          .		event.Sheets[sheet.Rank].Price = event.Price + sheet.Price
         .          .		event.Total++
         .          .		event.Sheets[sheet.Rank].Total++
         .          .
         .          .		var reservation Reservation
         .      410ms		err := db.QueryRow("SELECT * FROM reservations WHERE event_id = ? AND sheet_id = ? AND canceled_at IS NULL GROUP BY event_id, sheet_id HAVING reserved_at = MIN(reserved_at)", event.ID, sheet.ID).Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt)
         .          .		if err == nil {
         .          .			sheet.Mine = reservation.UserID == loginUserID
         .          .			sheet.Reserved = true
         .          .			sheet.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .		} else if err == sql.ErrNoRows {
         .          .			event.Remains++
         .          .			event.Sheets[sheet.Rank].Remains++
         .          .		} else {
         .          .			return nil, err
         .          .		}
         .          .
      10ms       10ms		event.Sheets[sheet.Rank].Detail = append(event.Sheets[sheet.Rank].Detail, &sheet)
         .          .	}
         .          .
         .          .	return &event, nil
         .          .}
         .          .

73.33
ratio 73.33 %
name main.main.func9 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      440ms (flat, cum) 73.33% of Total
         .          .		}
         .          .
         .          .		loginUserID := int64(-1)
         .          .		if user, err := getLoginUser(c); err == nil {
         .          .			loginUserID = user.ID
         .      440ms		}
         .          .
         .          .		event, err := getEvent(eventID, loginUserID)
         .          .		if err != nil {
         .          .			if err == sql.ErrNoRows {
         .          .				return resError(c, "not_found", 404)

73.33
