ratio 16.15 %
name main.adminLoginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      4.09s (flat, cum) 16.15% of Total
         .          .	}
         .          .}
         .          .
         .          .func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .       20ms		if _, err := getLoginAdministrator(c); err != nil {
         .          .			return resError(c, "admin_login_required", 401)
         .          .		}
         .      4.07s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func getLoginUser(c echo.Context) (*User, error) {
         .          .	userID := sessUserID(c)

16.15
ratio 2.21 %
name main.deleteReservationHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      560ms (flat, cum)  2.21% of Total
         .          .	user, err := getLoginUser(c)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .
         .      550ms	event, err := getEvent(eventID, user.ID)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "invalid_event", 404)
         .          .		}
         .          .		return err
         .          .	} else if !event.PublicFg {
         .          .		return resError(c, "invalid_event", 404)
         .          .	}
         .          .
         .       10ms	if !validateRank(rank) {
         .          .		return resError(c, "invalid_rank", 404)
         .          .	}
         .          .
         .          .	var sheet Sheet
         .          .	if err := db.QueryRow("SELECT * FROM sheets WHERE `rank` = ? AND num = ?", rank, num).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {

2.21
ratio 9.04 %
name main.fillinAdministrator.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.29s (flat, cum)  9.04% of Total
         .          .func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .          .		if administrator, err := getLoginAdministrator(c); err == nil {
         .          .			c.Set("administrator", administrator)
         .          .		}
         .      2.29s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func validateRank(rank string) bool {
         .          .	var count int

9.04
ratio 20.06 %
name main.fillinUser.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      5.08s (flat, cum) 20.06% of Total
         .          .func fillinUser(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .          .		if user, err := getLoginUser(c); err == nil {
         .          .			c.Set("user", user)
         .          .		}
         .      5.08s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {

20.06
ratio 0.51 %
name main.getAdminEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      130ms (flat, cum)  0.51% of Total
         .          .func getAdminEventHandler(c echo.Context) error {
         .          .	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .      130ms	event, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .          .		return err

0.51
ratio 9.04 %
name main.getAdminHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.29s (flat, cum)  9.04% of Total
         .          .func getAdminHandler(c echo.Context) error {
         .          .	var events []*Event
         .          .	administrator := c.Get("administrator")
         .          .	if administrator != nil {
         .          .		var err error
         .      2.29s		if events, err = getEvents(true); err != nil {
         .          .			return err
         .          .		}
         .          .	}
         .          .	return c.Render(200, "admin.tmpl", echo.Map{
         .          .		"events":        events,

9.04
ratio 2.05 %
name main.getAdminReportsEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      520ms (flat, cum)  2.05% of Total
         .          .	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .          .
         .      440ms	event, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .
         .          .	rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num, s.price AS sheet_price, e.price AS event_price FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.event_id = ? ORDER BY reserved_at ASC FOR UPDATE", event.ID)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	defer rows.Close()
         .          .
         .          .	var reports []Report
         .       20ms	for rows.Next() {
         .       10ms		var reservation Reservation
         .          .		var sheet Sheet
         .       20ms		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.Price); err != nil {
         .          .			return err
         .          .		}
         .          .		report := Report{
         .          .			ReservationID: reservation.ID,
         .          .			EventID:       event.ID,
         .          .			Rank:          sheet.Rank,
         .          .			Num:           sheet.Num,
         .          .			UserID:        reservation.UserID,
         .          .			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .			Price:         event.Price + sheet.Price,
         .          .		}
         .          .		if reservation.CanceledAt != nil {
         .          .			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .		}
         .       10ms		reports = append(reports, report)
         .          .	}
         .       20ms	return renderReportCSV(c, reports)
         .          .}
         .          .
         .          .func getAdminReportsHandler(c echo.Context) error {
         .          .	rows, err := db.Query("select r.*, s.rank as sheet_rank, s.num as sheet_num, s.price as sheet_price, e.id as event_id, e.price as event_price from reservations r inner join sheets s on s.id = r.sheet_id inner join events e on e.id = r.event_id order by reserved_at asc for update")
         .          .	if err != nil {

2.05
ratio 12.48 %
name main.getAdminReportsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      40ms      3.16s (flat, cum) 12.48% of Total
         .          .		return err
         .          .	}
         .          .	defer rows.Close()
         .          .
         .          .	var reports []Report
         .         1s	for rows.Next() {
         .       20ms		var reservation Reservation
      10ms       40ms		var sheet Sheet
         .       10ms		var event Event
      20ms      800ms		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.ID, &event.Price); err != nil {
         .          .			return err
         .          .		}
         .          .		report := Report{
         .          .			ReservationID: reservation.ID,
         .          .			EventID:       event.ID,
         .          .			Rank:          sheet.Rank,
         .          .			Num:           sheet.Num,
         .          .			UserID:        reservation.UserID,
         .      160ms			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .			Price:         event.Price + sheet.Price,
         .          .		}
         .          .		if reservation.CanceledAt != nil {
         .      140ms			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .		}
      10ms      310ms		reports = append(reports, report)
         .          .	}
         .      680ms	return renderReportCSV(c, reports)
         .          .}
         .          .
         .          .var db *sql.DB
         .          .
         .          .func main() {

12.48
ratio 62.5 %
name main.getEvent in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     140ms     15.83s (flat, cum) 62.50% of Total
         .          .	return events, nil
         .          .}
         .          .
         .          .func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .	var event Event
         .       50ms	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .		return nil, err
         .          .	}
         .          .	event.Sheets = map[string]*Sheets{
         .          .		"S": &Sheets{},
         .          .		"A": &Sheets{},
         .          .		"B": &Sheets{},
         .          .		"C": &Sheets{},
         .          .	}
         .          .
         .       30ms	rows, err := db.Query("SELECT * FROM sheets ORDER BY `rank`, num")
         .          .	if err != nil {
         .          .		return nil, err
         .          .	}
         .          .	defer rows.Close()
         .          .
      10ms      350ms	for rows.Next() {
         .       20ms		var sheet Sheet
         .      660ms		if err := rows.Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .			return nil, err
         .          .		}
      10ms       40ms		event.Sheets[sheet.Rank].Price = event.Price + sheet.Price
         .          .		event.Total++
         .          .		event.Sheets[sheet.Rank].Total++
         .          .
         .       50ms		var reservation Reservation
      30ms     14.48s		err := db.QueryRow("SELECT * FROM reservations WHERE event_id = ? AND sheet_id = ? AND canceled_at IS NULL GROUP BY event_id, sheet_id HAVING reserved_at = MIN(reserved_at)", event.ID, sheet.ID).Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt)
         .          .		if err == nil {
      10ms       10ms			sheet.Mine = reservation.UserID == loginUserID
         .          .			sheet.Reserved = true
      10ms       10ms			sheet.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .		} else if err == sql.ErrNoRows {
         .          .			event.Remains++
      20ms       20ms			event.Sheets[sheet.Rank].Remains++
         .          .		} else {
         .          .			return nil, err
         .          .		}
         .          .
      50ms      110ms		event.Sheets[sheet.Rank].Detail = append(event.Sheets[sheet.Rank].Detail, &sheet)
         .          .	}
         .          .
         .          .	return &event, nil
         .          .}
         .          .

62.5
ratio 4.86 %
name main.getEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.23s (flat, cum)  4.86% of Total
         .          .	if err != nil {
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .          .
         .          .	loginUserID := int64(-1)
         .       10ms	if user, err := getLoginUser(c); err == nil {
         .          .		loginUserID = user.ID
         .          .	}
         .          .
         .      1.19s	event, err := getEvent(eventID, loginUserID)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .          .		return err
         .          .	} else if !event.PublicFg {
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .       30ms	return c.JSON(200, sanitizeEvent(event))
         .          .}
         .          .func postReserveHandler(c echo.Context) error {
         .          .	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {
         .          .		return resError(c, "not_found", 404)

4.86
ratio 29.1 %
name main.getEvents in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      7.37s (flat, cum) 29.10% of Total
         .          .			continue
         .          .		}
         .          .		events = append(events, &event)
         .          .	}
         .          .	for i, v := range events {
         .      7.37s		event, err := getEvent(v.ID, -1)
         .          .		if err != nil {
         .          .			return nil, err
         .          .		}
         .          .		for k := range event.Sheets {
         .          .			event.Sheets[k].Detail = nil

29.1
ratio 20.06 %
name main.getIndexHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      5.08s (flat, cum) 20.06% of Total
         .          .func (r *Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
         .          .	return r.templates.ExecuteTemplate(w, name, data)
         .          .}
         .          .
         .          .func getIndexHandler(c echo.Context) error {
         .      5.08s	events, err := getEvents(false)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	for i, v := range events {
         .          .		events[i] = sanitizeEvent(v)

20.06
ratio 0.079 %
name main.getLoginAdministrator in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum) 0.079% of Total
         .          .	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .	return &user, err
         .          .}
         .          .
         .          .func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .       10ms	administratorID := sessAdministratorID(c)
         .          .	if administratorID == 0 {
         .          .		return nil, errors.New("not logged in")
         .          .	}
         .          .	var administrator Administrator
         .       10ms	err := db.QueryRow("SELECT id, nickname FROM administrators WHERE id = ?", administratorID).Scan(&administrator.ID, &administrator.Nickname)
         .          .	return &administrator, err
         .          .}
         .          .
         .          .func getEvents(all bool) ([]*Event, error) {
         .          .	tx, err := db.Begin()

0.079
ratio 0.12 %
name main.getLoginUser in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       30ms (flat, cum)  0.12% of Total
         .          .	userID := sessUserID(c)
         .          .	if userID == 0 {
         .          .		return nil, errors.New("not logged in")
         .          .	}
         .          .	var user User
         .       30ms	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .	return &user, err
         .          .}
         .          .
         .          .func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .          .	administratorID := sessAdministratorID(c)

0.12
ratio 18.36 %
name main.getUserHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      4.65s (flat, cum) 18.36% of Total
         .          .		var sheet Sheet
         .          .		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num); err != nil {
         .          .			return err
         .          .		}
         .          .
         .      2.34s		event, err := getEvent(reservation.EventID, -1)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		price := event.Sheets[sheet.Rank].Price
         .          .		event.Sheets = nil
         .          .		event.Total = 0
         .          .		event.Remains = 0
         .          .
         .          .		reservation.Event = event
         .          .		reservation.SheetRank = sheet.Rank
         .          .		reservation.SheetNum = sheet.Num
         .          .		reservation.Price = price
         .          .		reservation.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .		if reservation.CanceledAt != nil {
         .          .			reservation.CanceledAtUnix = reservation.CanceledAt.Unix()
         .          .		}
         .          .		recentReservations = append(recentReservations, reservation)
         .          .	}
         .          .	if recentReservations == nil {
         .          .		recentReservations = make([]Reservation, 0)
         .          .	}
         .          .
         .          .	var totalPrice int
         .          .	if err := db.QueryRow("SELECT IFNULL(SUM(e.price + s.price), 0) FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.user_id = ? AND r.canceled_at IS NULL", user.ID).Scan(&totalPrice); err != nil {
         .          .		return err
         .          .	}
         .          .
         .          .	rows, err = db.Query("SELECT event_id FROM reservations WHERE user_id = ? GROUP BY event_id ORDER BY MAX(IFNULL(canceled_at, reserved_at)) DESC LIMIT 5", user.ID)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	defer rows.Close()
         .          .
         .          .	var recentEvents []*Event
         .          .	for rows.Next() {
         .          .		var eventID int64
         .          .		if err := rows.Scan(&eventID); err != nil {
         .          .			return err
         .          .		}
         .      2.31s		event, err := getEvent(eventID, -1)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		for k := range event.Sheets {
         .          .			event.Sheets[k].Detail = nil

18.36
ratio 25.54 %
name main.loginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      6.47s (flat, cum) 25.54% of Total
         .          .func loginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .          .		if _, err := getLoginUser(c); err != nil {
         .          .			return resError(c, "login_required", 401)
         .          .		}
         .      6.47s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {

25.54
ratio 0.71 %
name main.postAdminEditEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      180ms (flat, cum)  0.71% of Total
         .          .	c.Bind(&params)
         .          .	if params.Closed {
         .          .		params.Public = false
         .          .	}
         .          .
         .      120ms	event, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .          .		return err
         .          .	}
         .          .
         .          .	if event.ClosedFg {
         .          .		return resError(c, "cannot_edit_closed_event", 400)
         .          .	} else if event.PublicFg && params.Closed {
         .          .		return resError(c, "cannot_close_public_event", 400)
         .          .	}
         .          .
         .          .	tx, err := db.Begin()
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	if _, err := tx.Exec("UPDATE events SET public_fg = ?, closed_fg = ? WHERE id = ?", params.Public, params.Closed, event.ID); err != nil {
         .          .		tx.Rollback()
         .          .		return err
         .          .	}
         .          .	if err := tx.Commit(); err != nil {
         .          .		return err
         .          .	}
         .          .
         .       60ms	e, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	c.JSON(200, e)
         .          .	return nil

0.71
ratio 0.32 %
name main.postAdminEventsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       80ms (flat, cum)  0.32% of Total
         .          .	}
         .          .	if err := tx.Commit(); err != nil {
         .          .		return err
         .          .	}
         .          .
         .       80ms	event, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	return c.JSON(200, event)
         .          .}

0.32
ratio 0.039 %
name main.postAdminLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.039% of Total
         .          .		Password  string `json:"password"`
         .          .	}
         .          .	c.Bind(&params)
         .          .
         .          .	administrator := new(Administrator)
         .       10ms	if err := db.QueryRow("SELECT * FROM administrators WHERE login_name = ?", params.LoginName).Scan(&administrator.ID, &administrator.LoginName, &administrator.Nickname, &administrator.PassHash); err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "authentication_failed", 401)
         .          .		}
         .          .		return err
         .          .	}

0.039
ratio 0.12 %
name main.postLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       30ms (flat, cum)  0.12% of Total
         .          .		Password  string `json:"password"`
         .          .	}
         .          .	c.Bind(&params)
         .          .
         .          .	user := new(User)
         .       10ms	if err := db.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "authentication_failed", 401)
         .          .		}
         .          .		return err
         .          .	}
         .          .
         .          .	var passHash string
         .          .	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .		return err
         .          .	}
         .          .	if user.PassHash != passHash {
         .          .		return resError(c, "authentication_failed", 401)
         .          .	}
         .          .
         .          .	sessSetUserID(c, user.ID)
         .       20ms	user, err := getLoginUser(c)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	return c.JSON(200, user)
         .          .}

0.12
ratio 4.97 %
name main.postReserveHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.26s (flat, cum)  4.97% of Total
         .          .	user, err := getLoginUser(c)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .
         .      1.24s	event, err := getEvent(eventID, user.ID)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "invalid_event", 404)
         .          .		}
         .          .		return err
         .          .	} else if !event.PublicFg {
         .          .		return resError(c, "invalid_event", 404)
         .          .	}
         .          .
         .          .	if !validateRank(params.Rank) {
         .          .		return resError(c, "invalid_rank", 400)
         .          .	}
         .          .
         .       10ms	var sheet Sheet
         .          .	var reservationID int64
         .          .	for {
         .       10ms		if err := db.QueryRow("SELECT * FROM sheets WHERE id NOT IN (SELECT sheet_id FROM reservations WHERE event_id = ? AND canceled_at IS NULL FOR UPDATE) AND `rank` = ? ORDER BY RAND() LIMIT 1", event.ID, params.Rank).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .			if err == sql.ErrNoRows {
         .          .				return resError(c, "sold_out", 409)
         .          .			}
         .          .			return err
         .          .		}

4.97
ratio 2.76 %
name main.renderReportCSV in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms      700ms (flat, cum)  2.76% of Total
         .          .	CanceledAt    string
         .          .	Price         int64
         .          .}
         .          .
         .          .func renderReportCSV(c echo.Context, reports []Report) error {
         .      110ms	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .
         .          .	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .          .	for _, v := range reports {
         .      440ms		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
      10ms      120ms			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
         .          .	}
         .          .
         .          .	c.Response().Header().Set("Content-Type", `text/csv; charset=UTF-8`)
         .          .	c.Response().Header().Set("Content-Disposition", `attachment; filename="report.csv"`)
         .       30ms	_, err := io.Copy(c.Response(), body)
         .          .	return err
         .          .}
         .          .
         .          .func resError(c echo.Context, e string, status int) error {
         .          .	if e == "" {

2.76
ratio 0.12 %
name main.renderReportCSV.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      30ms       30ms (flat, cum)  0.12% of Total
         .          .	CanceledAt    string
         .          .	Price         int64
         .          .}
         .          .
         .          .func renderReportCSV(c echo.Context, reports []Report) error {
      30ms       30ms	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .
         .          .	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .          .	for _, v := range reports {
         .          .		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
         .          .			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))

0.12
ratio 0.2 %
name main.renderReportCSV.func1 in /home/isucon/local/go/src/strings/compare.go
         0       50ms (flat, cum)   0.2% of Total
         .          .	// using strings.Compare. Basically no one should use strings.Compare.
         .          .	// As the comment above says, it is here only for symmetry with package bytes.
         .          .	// If performance is important, the compiler should be changed to recognize
         .          .	// the pattern so that all code doing three-way comparisons, not just code
         .          .	// using strings.Compare, can benefit.
         .       20ms	if a == b {
         .          .		return 0
         .          .	}
         .       30ms	if a < b {
         .          .		return -1
         .          .	}
         .          .	return +1
         .          .}

0.2
ratio 0.039 %
name main.sessAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.039% of Total
         .          .	delete(sess.Values, "user_id")
         .          .	sess.Save(c.Request(), c.Response())
         .          .}
         .          .
         .          .func sessAdministratorID(c echo.Context) int64 {
         .       10ms	sess, _ := session.Get("session", c)
         .          .	var administratorID int64
         .          .	if x, ok := sess.Values["administrator_id"]; ok {
         .          .		administratorID, _ = x.(int64)
         .          .	}
         .          .	return administratorID

0.039
ratio 0.039 %
name main.validateRank in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.039% of Total
         .          .	}
         .          .}
         .          .
         .          .func validateRank(rank string) bool {
         .          .	var count int
         .       10ms	db.QueryRow("SELECT COUNT(*) FROM sheets WHERE `rank` = ?", rank).Scan(&count)
         .          .	return count > 0
         .          .}
         .          .
         .          .type Renderer struct {
         .          .	templates *template.Template

0.039
