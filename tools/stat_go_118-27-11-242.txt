ratio 6.89 %
name main.(*EventSheetReservationCache).Get in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     540ms      3.44s (flat, cum)  6.89% of Total
         .          .	return EventSheetReservationCache{
         .          .		cache: make(map[EventSheetKey]EventSheetReservation),
         .          .	}
         .          .}
         .          .
      10ms       10msfunc (c *EventSheetReservationCache) Get(eventId int64, sheetId int64) *EventSheetReservation {
         .          .	key := EventSheetKey{ eventId, sheetId }
     170ms      390ms	c.mu.RLock()
      20ms      280ms	defer c.mu.RUnlock()
     310ms      2.31s	if v, ok := c.cache[key]; ok {
         .      110ms		return &v
         .          .	}
      30ms      340ms	return nil
         .          .}
         .          .
         .          .func (c *EventSheetReservationCache) Set(eventId int64, sheetId int64, reservation EventSheetReservation) {
         .          .	key := EventSheetKey{ eventId, sheetId }
         .          .	c.mu.Lock()

6.89
ratio 0.02 %
name main.(*EventSheetReservationCache).Set in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum)  0.02% of Total
         .          .
         .          .func (c *EventSheetReservationCache) Set(eventId int64, sheetId int64, reservation EventSheetReservation) {
         .          .	key := EventSheetKey{ eventId, sheetId }
         .          .	c.mu.Lock()
         .          .	defer c.mu.Unlock()
         .       10ms	c.cache[key] = reservation
         .          .}
         .          .
         .          .func (c *EventSheetReservationCache) Delete(eventId int64, sheetId int64) {
         .          .	key := EventSheetKey{ eventId, sheetId }
         .          .	c.mu.Lock()

0.02
ratio 0.44 %
name main.(*Renderer).Render in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      220ms (flat, cum)  0.44% of Total
         .          .type Renderer struct {
         .          .	templates *template.Template
         .          .}
         .          .
         .          .func (r *Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
         .      220ms	return r.templates.ExecuteTemplate(w, name, data)
         .          .}
         .          .
         .          .func getIndexHandler(c echo.Context) error {
         .          .	events, err := getEvents(false)
         .          .	if err != nil {

0.44
ratio 33.36 %
name main.adminLoginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0     16.65s (flat, cum) 33.36% of Total
         .          .	}
         .          .}
         .          .
         .          .func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .       80ms		if _, err := getLoginAdministrator(c); err != nil {
         .          .			return resError(c, "admin_login_required", 401)
         .          .		}
         .     16.57s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func getLoginUser(c echo.Context) (*User, error) {
         .          .	userID := sessUserID(c)

33.36
ratio 1.76 %
name main.deleteReservationHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      880ms (flat, cum)  1.76% of Total
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .          .	rank := c.Param("rank")
         .          .	num := c.Param("num")
         .          .
         .       20ms	user, err := getLoginUser(c)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .
         .      790ms	event, err := getEvent(eventID, user.ID)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "invalid_event", 404)
         .          .		}
         .          .		return err
         .          .	} else if !event.PublicFg {
         .          .		return resError(c, "invalid_event", 404)
         .          .	}
         .          .
         .       10ms	if !validateRank(rank) {
         .          .		return resError(c, "invalid_rank", 404)
         .          .	}
         .          .
         .          .	var sheet Sheet
         .       40ms	if err := db.QueryRow("SELECT * FROM sheets WHERE `rank` = ? AND num = ?", rank, num).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "invalid_sheet", 404)
         .          .		}
         .          .		return err
         .          .	}
         .          .
         .          .	tx, err := db.Begin()
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .
         .          .	var reservation Reservation
         .       20ms	if err := tx.QueryRow("SELECT * FROM reservations WHERE event_id = ? AND sheet_id = ? AND canceled_at IS NULL GROUP BY event_id HAVING reserved_at = MIN(reserved_at) FOR UPDATE", event.ID, sheet.ID).Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt); err != nil {
         .          .		tx.Rollback()
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "not_reserved", 400)
         .          .		}
         .          .		return err

1.76
ratio 6.13 %
name main.fillinAdministrator.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      3.06s (flat, cum)  6.13% of Total
         .          .	}
         .          .}
         .          .
         .          .func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .       10ms		if administrator, err := getLoginAdministrator(c); err == nil {
         .          .			c.Set("administrator", administrator)
         .          .		}
         .      3.05s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func validateRank(rank string) bool {
         .          .	var count int

6.13
ratio 31.68 %
name main.fillinUser.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0     15.81s (flat, cum) 31.68% of Total
         .          .	return &sanitized
         .          .}
         .          .
         .          .func fillinUser(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .       40ms		if user, err := getLoginUser(c); err == nil {
         .          .			c.Set("user", user)
         .          .		}
         .     15.77s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {

31.68
ratio 0.12 %
name main.getAdminEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       60ms (flat, cum)  0.12% of Total
         .          .func getAdminEventHandler(c echo.Context) error {
         .          .	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .       50ms	event, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .          .		return err
         .          .	}
         .       10ms	return c.JSON(200, event)
         .          .}
         .          .
         .          .func postAdminEditEventHandler(c echo.Context) error {
         .          .	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {

0.12
ratio 6.11 %
name main.getAdminHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      3.05s (flat, cum)  6.11% of Total
         .          .func getAdminHandler(c echo.Context) error {
         .          .	var events []*Event
         .          .	administrator := c.Get("administrator")
         .          .	if administrator != nil {
         .          .		var err error
         .      3.03s		if events, err = getEvents(true); err != nil {
         .          .			return err
         .          .		}
         .          .	}
         .       20ms	return c.Render(200, "admin.tmpl", echo.Map{
         .          .		"events":        events,
         .          .		"administrator": administrator,
         .          .		"origin":        c.Scheme() + "://" + c.Request().Host,
         .          .	})
         .          .}

6.11
ratio 3.33 %
name main.getAdminReportsEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      20ms      1.66s (flat, cum)  3.33% of Total
         .          .	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .          .
         .      290ms	event, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .
         .       20ms	rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num, s.price AS sheet_price, e.price AS event_price FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.event_id = ? ORDER BY reserved_at ASC FOR UPDATE", event.ID)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	defer rows.Close()
         .          .
         .          .	var reports []Report
         .      280ms	for rows.Next() {
         .       10ms		var reservation Reservation
         .       20ms		var sheet Sheet
      20ms      320ms		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.Price); err != nil {
         .          .			return err
         .          .		}
         .          .		report := Report{
         .          .			ReservationID: reservation.ID,
         .          .			EventID:       event.ID,
         .          .			Rank:          sheet.Rank,
         .          .			Num:           sheet.Num,
         .          .			UserID:        reservation.UserID,
         .      140ms			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .			Price:         event.Price + sheet.Price,
         .          .		}
         .          .		if reservation.CanceledAt != nil {
         .      120ms			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .		}
         .       80ms		reports = append(reports, report)
         .          .	}
         .      380ms	return renderReportCSV(c, reports)
         .          .}
         .          .
         .          .func getAdminReportsHandler(c echo.Context) error {
         .          .	rows, err := db.Query("select r.*, s.rank as sheet_rank, s.num as sheet_num, s.price as sheet_price, e.id as event_id, e.price as event_price from reservations r inner join sheets s on s.id = r.sheet_id inner join events e on e.id = r.event_id order by reserved_at asc for update")
         .          .	if err != nil {

3.33
ratio 29.55 %
name main.getAdminReportsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      90ms     14.75s (flat, cum) 29.55% of Total
         .          .		return err
         .          .	}
         .          .	defer rows.Close()
         .          .
         .          .	var reports []Report
      20ms      4.57s	for rows.Next() {
      20ms      160ms		var reservation Reservation
         .      100ms		var sheet Sheet
      10ms      160ms		var event Event
      10ms         4s		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.ID, &event.Price); err != nil {
         .          .			return err
         .          .		}
         .       10ms		report := Report{
         .          .			ReservationID: reservation.ID,
         .          .			EventID:       event.ID,
      10ms       10ms			Rank:          sheet.Rank,
         .          .			Num:           sheet.Num,
         .          .			UserID:        reservation.UserID,
      10ms         1s			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .			Price:         event.Price + sheet.Price,
         .          .		}
         .          .		if reservation.CanceledAt != nil {
      10ms      750ms			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .		}
         .      680ms		reports = append(reports, report)
         .          .	}
         .      3.31s	return renderReportCSV(c, reports)
         .          .}
         .          .
         .          .var db *sql.DB
         .          .
         .          .func main() {

29.55
ratio 51.33 %
name main.getEvent in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     600ms     25.62s (flat, cum) 51.33% of Total
         .          .	return events, nil
         .          .}
         .          .
         .          .func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .	var event Event
         .      920ms	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .		return nil, err
         .          .	}
         .       10ms	event.Sheets = map[string]*Sheets{
         .       20ms		"S": &Sheets{},
         .          .		"A": &Sheets{},
         .          .		"B": &Sheets{},
         .          .		"C": &Sheets{},
         .          .	}
         .          .
         .      400ms	rows, err := db.Query("SELECT * FROM sheets ORDER BY `rank`, num")
         .          .	if err != nil {
         .          .		return nil, err
         .          .	}
         .          .	defer rows.Close()
         .          .
     110ms      7.40s	for rows.Next() {
      10ms      1.25s		var sheet Sheet
      30ms      9.54s		if err := rows.Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .			return nil, err
         .          .		}
      90ms      570ms		event.Sheets[sheet.Rank].Price = event.Price + sheet.Price
      40ms       40ms		event.Total++
     120ms      480ms		event.Sheets[sheet.Rank].Total++
         .          .		
      10ms      3.45s		reservation := eventSheetCache.Get(event.ID, sheet.ID)
      10ms       10ms		if reservation != nil {
         .          .			sheet.Mine = reservation.UserID == loginUserID
         .          .			sheet.Reserved = true
         .          .			sheet.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .		} else {
         .          .			event.Remains++
      40ms      330ms			event.Sheets[sheet.Rank].Remains++
         .          .		}
         .          .
     140ms      1.20s		event.Sheets[sheet.Rank].Detail = append(event.Sheets[sheet.Rank].Detail, &sheet)
         .          .	}
         .          .
         .          .	return &event, nil
         .          .}
         .          .

51.33
ratio 0.06 %
name main.getEvent in /home/isucon/local/go/src/time/time.go
      30ms       30ms (flat, cum)  0.06% of Total
         .          .	return int32(t.wall & nsecMask)
         .          .}
         .          .
         .          .// sec returns the time's seconds since Jan 1 year 1.
         .          .func (t *Time) sec() int64 {
      20ms       20ms	if t.wall&hasMonotonic != 0 {
         .          .		return wallToInternal + int64(t.wall<<1>>(nsecShift+1))
         .          .	}
         .          .	return int64(t.ext)
         .          .}
         .          .
         .          .// unixSec returns the time's seconds since Jan 1 1970 (Unix time).
      10ms       10msfunc (t *Time) unixSec() int64 { return t.sec() + internalToUnix }
         .          .
         .          .// addSec adds d seconds to the time.
         .          .func (t *Time) addSec(d int64) {
         .          .	if t.wall&hasMonotonic != 0 {
         .          .		sec := int64(t.wall << 1 >> (nsecShift + 1))

0.06
ratio 4.73 %
name main.getEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.36s (flat, cum)  4.73% of Total
         .          .	if err != nil {
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .          .
         .          .	loginUserID := int64(-1)
         .      190ms	if user, err := getLoginUser(c); err == nil {
         .          .		loginUserID = user.ID
         .          .	}
         .          .
         .      1.69s	event, err := getEvent(eventID, loginUserID)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .          .		return err
         .          .	} else if !event.PublicFg {
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .      480ms	return c.JSON(200, sanitizeEvent(event))
         .          .}
         .          .func postReserveHandler(c echo.Context) error {
         .          .	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .	if err != nil {
         .          .		return resError(c, "not_found", 404)

4.73
ratio 37.15 %
name main.getEvents in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms     18.54s (flat, cum) 37.15% of Total
         .          .	err := db.QueryRow("SELECT id, nickname FROM administrators WHERE id = ?", administratorID).Scan(&administrator.ID, &administrator.Nickname)
         .          .	return &administrator, err
         .          .}
         .          .
         .          .func getEvents(all bool) ([]*Event, error) {
         .       30ms	tx, err := db.Begin()
         .          .	if err != nil {
         .          .		return nil, err
         .          .	}
         .          .	defer tx.Commit()
         .          .
         .       20ms	rows, err := tx.Query("SELECT * FROM events ORDER BY id ASC")
         .          .	if err != nil {
         .          .		return nil, err
         .          .	}
         .          .	defer rows.Close()
         .          .
         .          .	var events []*Event
         .       40ms	for rows.Next() {
         .          .		var event Event
         .       40ms		if err := rows.Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .			return nil, err
         .          .		}
         .          .		if !all && !event.PublicFg {
         .          .			continue
         .          .		}
         .          .		events = append(events, &event)
         .          .	}
      10ms       10ms	for i, v := range events {
         .     18.38s		event, err := getEvent(v.ID, -1)
         .          .		if err != nil {
         .          .			return nil, err
         .          .		}
         .          .		for k := range event.Sheets {
         .          .			event.Sheets[k].Detail = nil
         .          .		}
         .          .		events[i] = event
         .          .	}
         .       20ms	return events, nil
         .          .}
         .          .
         .          .func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .	var event Event
         .          .	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {

37.15
ratio 31.6 %
name main.getIndexHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0     15.77s (flat, cum) 31.60% of Total
         .          .func (r *Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
         .          .	return r.templates.ExecuteTemplate(w, name, data)
         .          .}
         .          .
         .          .func getIndexHandler(c echo.Context) error {
         .     15.51s	events, err := getEvents(false)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	for i, v := range events {
         .          .		events[i] = sanitizeEvent(v)
         .          .	}
         .      260ms	return c.Render(200, "index.tmpl", echo.Map{
         .          .		"events": events,
         .          .		"user":   c.Get("user"),
         .          .		"origin": c.Scheme() + "://" + c.Request().Host,
         .          .	})
         .          .}

31.6
ratio 0.14 %
name main.getInitializeHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       70ms (flat, cum)  0.14% of Total
         .          .	rows, err := db.Query("SELECT * FROM reservations WHERE canceled_at IS NULL")
         .          .	if err != nil {
         .          .		log.Fatal(err)
         .          .	}
         .          .	
         .       30ms	for rows.Next() {
         .       20ms		var reservation Reservation
         .       10ms		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt); err != nil {
         .          .			log.Fatal(err)
         .          .		}
         .          .	
         .          .		if reservation.CanceledAt == nil {
         .       10ms			eventSheetCache.Set(reservation.EventID, reservation.SheetID, EventSheetReservation{ reservation.UserID, *(reservation.ReservedAt)} )
         .          .		}
         .          .	}
         .          .	
         .          .	return c.NoContent(204)
         .          .}

0.14
ratio 0.18 %
name main.getLoginAdministrator in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       90ms (flat, cum)  0.18% of Total
         .          .	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .	return &user, err
         .          .}
         .          .
         .          .func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .       50ms	administratorID := sessAdministratorID(c)
         .          .	if administratorID == 0 {
         .          .		return nil, errors.New("not logged in")
         .          .	}
         .          .	var administrator Administrator
         .       40ms	err := db.QueryRow("SELECT id, nickname FROM administrators WHERE id = ?", administratorID).Scan(&administrator.ID, &administrator.Nickname)
         .          .	return &administrator, err
         .          .}
         .          .
         .          .func getEvents(all bool) ([]*Event, error) {
         .          .	tx, err := db.Begin()

0.18
ratio 1.22 %
name main.getLoginUser in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      610ms (flat, cum)  1.22% of Total
         .          .		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func getLoginUser(c echo.Context) (*User, error) {
         .      180ms	userID := sessUserID(c)
         .          .	if userID == 0 {
         .          .		return nil, errors.New("not logged in")
         .          .	}
         .          .	var user User
         .      430ms	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .	return &user, err
         .          .}
         .          .
         .          .func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .          .	administratorID := sessAdministratorID(c)

1.22
ratio 5.21 %
name main.getUserHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.60s (flat, cum)  5.21% of Total
         .          .		var sheet Sheet
         .          .		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num); err != nil {
         .          .			return err
         .          .		}
         .          .
         .      1.25s		event, err := getEvent(reservation.EventID, -1)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		price := event.Sheets[sheet.Rank].Price
         .          .		event.Sheets = nil
         .          .		event.Total = 0
         .          .		event.Remains = 0
         .          .
         .          .		reservation.Event = event
         .          .		reservation.SheetRank = sheet.Rank
         .          .		reservation.SheetNum = sheet.Num
         .          .		reservation.Price = price
         .          .		reservation.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .		if reservation.CanceledAt != nil {
         .          .			reservation.CanceledAtUnix = reservation.CanceledAt.Unix()
         .          .		}
         .          .		recentReservations = append(recentReservations, reservation)
         .          .	}
         .          .	if recentReservations == nil {
         .          .		recentReservations = make([]Reservation, 0)
         .          .	}
         .          .
         .          .	var totalPrice int
         .          .	if err := db.QueryRow("SELECT IFNULL(SUM(e.price + s.price), 0) FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.user_id = ? AND r.canceled_at IS NULL", user.ID).Scan(&totalPrice); err != nil {
         .          .		return err
         .          .	}
         .          .
         .          .	rows, err = db.Query("SELECT event_id FROM reservations WHERE user_id = ? GROUP BY event_id ORDER BY MAX(IFNULL(canceled_at, reserved_at)) DESC LIMIT 5", user.ID)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	defer rows.Close()
         .          .
         .          .	var recentEvents []*Event
         .          .	for rows.Next() {
         .          .		var eventID int64
         .          .		if err := rows.Scan(&eventID); err != nil {
         .          .			return err
         .          .		}
         .      1.34s		event, err := getEvent(eventID, -1)
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .		for k := range event.Sheets {
         .          .			event.Sheets[k].Detail = nil
         .          .		}
         .          .		recentEvents = append(recentEvents, event)
         .          .	}
         .          .	if recentEvents == nil {
         .          .		recentEvents = make([]*Event, 0)
         .          .	}
         .          .
         .       10ms	return c.JSON(200, echo.Map{
         .          .		"id":                  user.ID,
         .          .		"nickname":            user.Nickname,
         .          .		"recent_reservations": recentReservations,
         .          .		"total_price":         totalPrice,
         .          .		"recent_events":       recentEvents,

5.21
ratio 11.3 %
name main.loginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      5.64s (flat, cum) 11.30% of Total
         .          .	sess.Save(c.Request(), c.Response())
         .          .}
         .          .
         .          .func loginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {
         .      210ms		if _, err := getLoginUser(c); err != nil {
         .          .			return resError(c, "login_required", 401)
         .          .		}
         .      5.43s		return next(c)
         .          .	}
         .          .}
         .          .
         .          .func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .	return func(c echo.Context) error {

11.3
ratio 0.32 %
name main.main in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      160ms (flat, cum)  0.32% of Total
         .          .	e.GET("/admin/api/events/:id", getAdminEventHandler, adminLoginRequired)
         .          .	e.POST("/admin/api/events/:id/actions/edit", postAdminEditEventHandler, adminLoginRequired)
         .          .	e.GET("/admin/api/reports/events/:id/sales", getAdminReportsEventHandler, adminLoginRequired)
         .          .	e.GET("/admin/api/reports/sales", getAdminReportsHandler, adminLoginRequired)
         .          .
         .      160ms	e.Start(":8080")
         .          .}
         .          .
         .          .type Report struct {
         .          .	ReservationID int64
         .          .	EventID       int64

0.32
ratio 0.12 %
name main.main.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       60ms (flat, cum)  0.12% of Total
         .          .	}
         .          .
         .          .	e := echo.New()
         .          .	funcs := template.FuncMap{
         .          .		"encode_json": func(v interface{}) string {
         .       50ms			b, _ := json.Marshal(v)
         .       10ms			return string(b)
         .          .		},
         .          .	}
         .          .	e.Renderer = &Renderer{
         .          .		templates: template.Must(template.New("").Delims("[[", "]]").Funcs(funcs).ParseGlob("views/*.tmpl")),
         .          .	}

0.12
ratio 0.14 %
name main.postAdminEditEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       70ms (flat, cum)  0.14% of Total
         .          .	c.Bind(&params)
         .          .	if params.Closed {
         .          .		params.Public = false
         .          .	}
         .          .
         .       60ms	event, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "not_found", 404)
         .          .		}
         .          .		return err
         .          .	}
         .          .
         .          .	if event.ClosedFg {
         .          .		return resError(c, "cannot_edit_closed_event", 400)
         .          .	} else if event.PublicFg && params.Closed {
         .          .		return resError(c, "cannot_close_public_event", 400)
         .          .	}
         .          .
         .          .	tx, err := db.Begin()
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	if _, err := tx.Exec("UPDATE events SET public_fg = ?, closed_fg = ? WHERE id = ?", params.Public, params.Closed, event.ID); err != nil {
         .          .		tx.Rollback()
         .          .		return err
         .          .	}
         .          .	if err := tx.Commit(); err != nil {
         .          .		return err
         .          .	}
         .          .
         .       10ms	e, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	c.JSON(200, e)
         .          .	return nil

0.14
ratio 0.06 %
name main.postAdminEventsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       30ms (flat, cum)  0.06% of Total
         .          .	}
         .          .	if err := tx.Commit(); err != nil {
         .          .		return err
         .          .	}
         .          .
         .       30ms	event, err := getEvent(eventID, -1)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	return c.JSON(200, event)
         .          .}

0.06
ratio 0.1 %
name main.postAdminLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       50ms (flat, cum)   0.1% of Total
         .          .func postAdminLoginHandler(c echo.Context) error {
         .          .	var params struct {
         .          .		LoginName string `json:"login_name"`
         .          .		Password  string `json:"password"`
         .          .	}
         .       10ms	c.Bind(&params)
         .          .
         .          .	administrator := new(Administrator)
         .       20ms	if err := db.QueryRow("SELECT * FROM administrators WHERE login_name = ?", params.LoginName).Scan(&administrator.ID, &administrator.LoginName, &administrator.Nickname, &administrator.PassHash); err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "authentication_failed", 401)
         .          .		}
         .          .		return err
         .          .	}
         .          .
         .          .	var passHash string
         .       10ms	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .		return err
         .          .	}
         .          .	if administrator.PassHash != passHash {
         .          .		return resError(c, "authentication_failed", 401)
         .          .	}
         .          .
         .       10ms	sessSetAdministratorID(c, administrator.ID)
         .          .	administrator, err := getLoginAdministrator(c)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .	return c.JSON(200, administrator)

0.1
ratio 0.8 %
name main.postLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      400ms (flat, cum)   0.8% of Total
         .          .	})
         .          .
         .          .}
         .          .
         .          .func postLoginHandler(c echo.Context) error {
         .       10ms	var params struct {
         .          .		LoginName string `json:"login_name"`
         .          .		Password  string `json:"password"`
         .          .	}
         .          .	c.Bind(&params)
         .          .
         .          .	user := new(User)
         .      120ms	if err := db.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != nil {
         .          .		if err == sql.ErrNoRows {
         .       10ms			return resError(c, "authentication_failed", 401)
         .          .		}
         .          .		return err
         .          .	}
         .          .
         .          .	var passHash string
         .       70ms	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .		return err
         .          .	}
         .          .	if user.PassHash != passHash {
         .          .		return resError(c, "authentication_failed", 401)
         .          .	}
         .          .
         .       70ms	sessSetUserID(c, user.ID)
         .      100ms	user, err := getLoginUser(c)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .       20ms	return c.JSON(200, user)
         .          .}
         .          .
         .          .func postLogoutHandler(c echo.Context) error {
         .          .	sessDeleteUserID(c)
         .          .	return c.NoContent(204)

0.8
ratio 3.91 %
name main.postReserveHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.95s (flat, cum)  3.91% of Total
         .          .		return resError(c, "not_found", 404)
         .          .	}
         .          .	var params struct {
         .          .		Rank string `json:"sheet_rank"`
         .          .	}
         .       10ms	c.Bind(&params)
         .          .
         .       50ms	user, err := getLoginUser(c)
         .          .	if err != nil {
         .          .		return err
         .          .	}
         .          .
         .      1.76s	event, err := getEvent(eventID, user.ID)
         .          .	if err != nil {
         .          .		if err == sql.ErrNoRows {
         .          .			return resError(c, "invalid_event", 404)
         .          .		}
         .          .		return err
         .          .	} else if !event.PublicFg {
         .          .		return resError(c, "invalid_event", 404)
         .          .	}
         .          .
         .       10ms	if !validateRank(params.Rank) {
         .          .		return resError(c, "invalid_rank", 400)
         .          .	}
         .          .
         .          .	var sheet Sheet
         .          .	var reservationID int64
         .          .	for {
         .          .		tx, err := db.Begin()
         .       60ms		if err := tx.QueryRow("SELECT * FROM sheets WHERE id NOT IN (SELECT sheet_id FROM reservations WHERE event_id = ? AND canceled_at IS NULL FOR UPDATE) AND `rank` = ? ORDER BY RAND() LIMIT 1", event.ID, params.Rank).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .			if err == sql.ErrNoRows {
         .          .				return resError(c, "sold_out", 409)
         .          .			}
         .          .			return err
         .          .		}
         .          .
         .          .		
         .          .		if err != nil {
         .          .			return err
         .          .		}
         .          .
         .          .		t := time.Now()
         .       20ms		res, err := tx.Exec("INSERT INTO reservations (event_id, sheet_id, user_id, reserved_at) VALUES (?, ?, ?, ?)", event.ID, sheet.ID, user.ID, t.UTC().Format("2006-01-02 15:04:05.000000"))
         .          .		if err != nil {
         .          .			tx.Rollback()
         .          .			log.Println("re-try: rollback by", err)
         .          .			continue
         .          .		}
         .          .		reservationID, err = res.LastInsertId()
         .          .		if err != nil {
         .          .			tx.Rollback()
         .          .			log.Println("re-try: rollback by", err)
         .          .			continue
         .          .		}
         .          .
         .          .		eventSheetCache.Set(event.ID, sheet.ID, EventSheetReservation{ user.ID, t })
         .       30ms		if err := tx.Commit(); err != nil {
         .          .			tx.Rollback()
         .          .			log.Println("re-try: rollback by", err)
         .          .			continue
         .          .		}
         .          .		break
         .          .	}
         .       10ms	return c.JSON(202, echo.Map{
         .          .		"id":         reservationID,
         .          .		"sheet_rank": params.Rank,
         .          .		"sheet_num":  sheet.Num,
         .          .	})
         .          .}

3.91
ratio 0.02 %
name main.postUsersHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum)  0.02% of Total
         .          .	var params struct {
         .          .		Nickname  string `json:"nickname"`
         .          .		LoginName string `json:"login_name"`
         .          .		Password  string `json:"password"`
         .          .	}
         .       10ms	c.Bind(&params)
         .          .
         .          .	tx, err := db.Begin()
         .          .	if err != nil {
         .          .		return err
         .          .	}

0.02
ratio 7.39 %
name main.renderReportCSV in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      50ms      3.69s (flat, cum)  7.39% of Total
         .          .	CanceledAt    string
         .          .	Price         int64
         .          .}
         .          .
         .          .func renderReportCSV(c echo.Context, reports []Report) error {
         .      900ms	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .
         .          .	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
      10ms       50ms	for _, v := range reports {
      10ms      1.98s		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
      30ms      710ms			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
         .          .	}
         .          .
         .          .	c.Response().Header().Set("Content-Type", `text/csv; charset=UTF-8`)
         .          .	c.Response().Header().Set("Content-Disposition", `attachment; filename="report.csv"`)
         .       50ms	_, err := io.Copy(c.Response(), body)
         .          .	return err
         .          .}
         .          .
         .          .func resError(c echo.Context, e string, status int) error {
         .          .	if e == "" {

7.39
ratio 0.36 %
name main.renderReportCSV.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     180ms      180ms (flat, cum)  0.36% of Total
         .          .	CanceledAt    string
         .          .	Price         int64
         .          .}
         .          .
         .          .func renderReportCSV(c echo.Context, reports []Report) error {
     180ms      180ms	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .
         .          .	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .          .	for _, v := range reports {
         .          .		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
         .          .			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))

0.36
ratio 1.08 %
name main.renderReportCSV.func1 in /home/isucon/local/go/src/strings/compare.go
     110ms      540ms (flat, cum)  1.08% of Total
         .          .	// using strings.Compare. Basically no one should use strings.Compare.
         .          .	// As the comment above says, it is here only for symmetry with package bytes.
         .          .	// If performance is important, the compiler should be changed to recognize
         .          .	// the pattern so that all code doing three-way comparisons, not just code
         .          .	// using strings.Compare, can benefit.
         .      220ms	if a == b {
         .          .		return 0
         .          .	}
     110ms      320ms	if a < b {
         .          .		return -1
         .          .	}
         .          .	return +1
         .          .}

1.08
ratio 0.02 %
name main.resError in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum)  0.02% of Total
         .          .		e = "unknown"
         .          .	}
         .          .	if status < 100 {
         .          .		status = 500
         .          .	}
         .       10ms	return c.JSON(status, map[string]string{"error": e})
         .          .}

0.02
ratio 0.1 %
name main.sessAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       50ms (flat, cum)   0.1% of Total
         .          .	delete(sess.Values, "user_id")
         .          .	sess.Save(c.Request(), c.Response())
         .          .}
         .          .
         .          .func sessAdministratorID(c echo.Context) int64 {
         .       50ms	sess, _ := session.Get("session", c)
         .          .	var administratorID int64
         .          .	if x, ok := sess.Values["administrator_id"]; ok {
         .          .		administratorID, _ = x.(int64)
         .          .	}
         .          .	return administratorID

0.1
ratio 0.02 %
name main.sessSetAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum)  0.02% of Total
         .          .		Path:     "/",
         .          .		MaxAge:   3600,
         .          .		HttpOnly: true,
         .          .	}
         .          .	sess.Values["administrator_id"] = id
         .       10ms	sess.Save(c.Request(), c.Response())
         .          .}
         .          .
         .          .func sessDeleteAdministratorID(c echo.Context) {
         .          .	sess, _ := session.Get("session", c)
         .          .	sess.Options = &sessions.Options{

0.02
ratio 0.14 %
name main.sessSetUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       70ms (flat, cum)  0.14% of Total
         .          .	}
         .          .	return userID
         .          .}
         .          .
         .          .func sessSetUserID(c echo.Context, id int64) {
         .       10ms	sess, _ := session.Get("session", c)
         .          .	sess.Options = &sessions.Options{
         .          .		Path:     "/",
         .          .		MaxAge:   3600,
         .          .		HttpOnly: true,
         .          .	}
         .          .	sess.Values["user_id"] = id
         .       60ms	sess.Save(c.Request(), c.Response())
         .          .}
         .          .
         .          .func sessDeleteUserID(c echo.Context) {
         .          .	sess, _ := session.Get("session", c)
         .          .	sess.Options = &sessions.Options{

0.14
ratio 0.36 %
name main.sessUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      180ms (flat, cum)  0.36% of Total
         .          .
         .          .var eventSheetCache EventSheetReservationCache
         .          .
         .          .
         .          .func sessUserID(c echo.Context) int64 {
         .      180ms	sess, _ := session.Get("session", c)
         .          .	var userID int64
         .          .	if x, ok := sess.Values["user_id"]; ok {
         .          .		userID, _ = x.(int64)
         .          .	}
         .          .	return userID

0.36
ratio 0.04 %
name main.validateRank in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum)  0.04% of Total
         .          .	}
         .          .}
         .          .
         .          .func validateRank(rank string) bool {
         .          .	var count int
         .       20ms	db.QueryRow("SELECT COUNT(*) FROM sheets WHERE `rank` = ?", rank).Scan(&count)
         .          .	return count > 0
         .          .}
         .          .
         .          .type Renderer struct {
         .          .	templates *template.Template

0.04
ratio 0.32 %
name runtime.main in /home/isucon/local/go/src/runtime/proc.go
         0      160ms (flat, cum)  0.32% of Total
         .          .		// A program compiled with -buildmode=c-archive or c-shared
         .          .		// has a main, but it is not executed.
         .          .		return
         .          .	}
         .          .	fn = main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .      160ms	fn()
         .          .	if raceenabled {
         .          .		racefini()
         .          .	}
         .          .
         .          .	// Make racy client program work: if panicking on

0.32
