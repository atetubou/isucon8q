Total: 33.45s
ROUTINE ======================== main.(*EventSheetReservationCache).Get in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     320ms      3.58s (flat, cum) 10.70% of Total
         .          .    105:	return EventSheetReservationCache{
         .          .    106:		cache: make(map[EventSheetKey]EventSheetReservation),
         .          .    107:	}
         .          .    108:}
         .          .    109:
      10ms       10ms    110:func (c *EventSheetReservationCache) Get(eventId int64, sheetId int64) *EventSheetReservation {
         .          .    111:	key := EventSheetKey{eventId, sheetId}
      90ms      370ms    112:	c.mu.RLock()
      30ms      310ms    113:	defer c.mu.RUnlock()
     170ms      2.18s    114:	if v, ok := c.cache[key]; ok {
      10ms      310ms    115:		return &v
         .          .    116:	}
      10ms      400ms    117:	return nil
         .          .    118:}
         .          .    119:
         .          .    120:func (c *EventSheetReservationCache) Set(eventId int64, sheetId int64, reservation EventSheetReservation) {
         .          .    121:	key := EventSheetKey{eventId, sheetId}
         .          .    122:	c.mu.Lock()
ROUTINE ======================== main.(*Renderer).Render in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      170ms (flat, cum)  0.51% of Total
         .          .    344:type Renderer struct {
         .          .    345:	templates *template.Template
         .          .    346:}
         .          .    347:
         .          .    348:func (r *Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
         .      170ms    349:	return r.templates.ExecuteTemplate(w, name, data)
         .          .    350:}
         .          .    351:
         .          .    352:func getIndexHandler(c echo.Context) error {
         .          .    353:	events, err := getEvents(false)
         .          .    354:	if err != nil {
ROUTINE ======================== main.adminLoginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0     18.12s (flat, cum) 54.17% of Total
         .          .    204:	}
         .          .    205:}
         .          .    206:
         .          .    207:func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    208:	return func(c echo.Context) error {
         .       30ms    209:		if _, err := getLoginAdministrator(c); err != nil {
         .          .    210:			return resError(c, "admin_login_required", 401)
         .          .    211:		}
         .     18.09s    212:		return next(c)
         .          .    213:	}
         .          .    214:}
         .          .    215:
         .          .    216:func getLoginUser(c echo.Context) (*User, error) {
         .          .    217:	userID := sessUserID(c)
ROUTINE ======================== main.deleteReservationHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      180ms (flat, cum)  0.54% of Total
         .          .    719:	user, err := getLoginUser(c)
         .          .    720:	if err != nil {
         .          .    721:		return err
         .          .    722:	}
         .          .    723:
         .      150ms    724:	event, err := getEvent(eventID, user.ID)
         .          .    725:	if err != nil {
         .          .    726:		if err == sql.ErrNoRows {
         .          .    727:			return resError(c, "invalid_event", 404)
         .          .    728:		}
         .          .    729:		return err
         .          .    730:	} else if !event.PublicFg {
         .          .    731:		return resError(c, "invalid_event", 404)
         .          .    732:	}
         .          .    733:
         .          .    734:	if !validateRank(rank) {
         .          .    735:		return resError(c, "invalid_rank", 404)
         .          .    736:	}
         .          .    737:
         .          .    738:	var sheet Sheet
         .       20ms    739:	if err := db.QueryRow("SELECT * FROM sheets WHERE `rank` = ? AND num = ?", rank, num).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .    740:		if err == sql.ErrNoRows {
         .          .    741:			return resError(c, "invalid_sheet", 404)
         .          .    742:		}
         .          .    743:		log.Println("we shouldn't reach here...", err)
         .          .    744:		return err
         .          .    745:	}
         .          .    746:
         .          .    747:	for {
         .       10ms    748:		tx, err := db.Begin()
         .          .    749:		if err != nil {
         .          .    750:			return err
         .          .    751:		}
         .          .    752:
         .          .    753:		var reservation Reservation
ROUTINE ======================== main.fillinAdministrator.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.52s (flat, cum)  4.54% of Total
         .          .    324:	}
         .          .    325:}
         .          .    326:
         .          .    327:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    328:	return func(c echo.Context) error {
         .       30ms    329:		if administrator, err := getLoginAdministrator(c); err == nil {
         .          .    330:			c.Set("administrator", administrator)
         .          .    331:		} else {
         .       10ms    332:			log.Printf("fillinAdministrator: %v", err)
         .          .    333:		}
         .      1.48s    334:		return next(c)
         .          .    335:	}
         .          .    336:}
         .          .    337:
         .          .    338:func validateRank(rank string) bool {
         .          .    339:	var count int
ROUTINE ======================== main.fillinUser.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      4.67s (flat, cum) 13.96% of Total
         .          .    318:func fillinUser(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    319:	return func(c echo.Context) error {
         .          .    320:		if user, err := getLoginUser(c); err == nil {
         .          .    321:			c.Set("user", user)
         .          .    322:		}
         .      4.67s    323:		return next(c)
         .          .    324:	}
         .          .    325:}
         .          .    326:
         .          .    327:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    328:	return func(c echo.Context) error {
ROUTINE ======================== main.getAdminHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.48s (flat, cum)  4.42% of Total
         .          .    786:	var events []*Event
         .          .    787:	administrator := c.Get("administrator")
         .          .    788:	log.Printf("getAdminHandler: %q", administrator)
         .          .    789:	if administrator != nil {
         .          .    790:		var err error
         .      1.45s    791:		if events, err = getEvents(true); err != nil {
         .          .    792:			log.Printf("getEvents: %v", err)
         .          .    793:			return err
         .          .    794:		}
         .          .    795:	}
         .       30ms    796:	return c.Render(200, "admin.tmpl", echo.Map{
         .          .    797:		"events":        events,
         .          .    798:		"administrator": administrator,
         .          .    799:		"origin":        c.Scheme() + "://" + c.Request().Host,
         .          .    800:	})
         .          .    801:}
ROUTINE ======================== main.getAdminReportsEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      790ms (flat, cum)  2.36% of Total
         .          .    947:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    948:	if err != nil {
         .          .    949:		return resError(c, "not_found", 404)
         .          .    950:	}
         .          .    951:
         .       70ms    952:	event, err := getEvent(eventID, -1)
         .          .    953:	if err != nil {
         .          .    954:		return err
         .          .    955:	}
         .          .    956:
         .       20ms    957:	rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num, s.price AS sheet_price, e.price AS event_price FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.event_id = ? ORDER BY reserved_at ASC FOR UPDATE", event.ID)
         .          .    958:	if err != nil {
         .          .    959:		return err
         .          .    960:	}
         .          .    961:	defer rows.Close()
         .          .    962:
         .          .    963:	var reports []Report
         .      140ms    964:	for rows.Next() {
         .       20ms    965:		var reservation Reservation
         .       10ms    966:		var sheet Sheet
         .      150ms    967:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.Price); err != nil {
         .          .    968:			return err
         .          .    969:		}
         .          .    970:		report := Report{
         .          .    971:			ReservationID: reservation.ID,
         .          .    972:			EventID:       event.ID,
         .          .    973:			Rank:          sheet.Rank,
         .          .    974:			Num:           sheet.Num,
         .          .    975:			UserID:        reservation.UserID,
         .       50ms    976:			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .    977:			Price:         event.Price + sheet.Price,
         .          .    978:		}
         .          .    979:		if reservation.CanceledAt != nil {
         .       50ms    980:			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .    981:		}
         .       70ms    982:		reports = append(reports, report)
         .          .    983:	}
         .      210ms    984:	return renderReportCSV(c, reports)
         .          .    985:}
         .          .    986:
         .          .    987:func getAdminReportsHandler(c echo.Context) error {
         .          .    988:	rows, err := db.Query("select r.*, s.rank as sheet_rank, s.num as sheet_num, s.price as sheet_price, e.id as event_id, e.price as event_price from reservations r inner join sheets s on s.id = r.sheet_id inner join events e on e.id = r.event_id order by reserved_at asc for update")
         .          .    989:	if err != nil {
ROUTINE ======================== main.getAdminReportsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      90ms     17.23s (flat, cum) 51.51% of Total
         .          .    983:	}
         .          .    984:	return renderReportCSV(c, reports)
         .          .    985:}
         .          .    986:
         .          .    987:func getAdminReportsHandler(c echo.Context) error {
         .       10ms    988:	rows, err := db.Query("select r.*, s.rank as sheet_rank, s.num as sheet_num, s.price as sheet_price, e.id as event_id, e.price as event_price from reservations r inner join sheets s on s.id = r.sheet_id inner join events e on e.id = r.event_id order by reserved_at asc for update")
         .          .    989:	if err != nil {
         .          .    990:		return err
         .          .    991:	}
         .          .    992:	defer rows.Close()
         .          .    993:
         .          .    994:	var reports []Report
      30ms      5.21s    995:	for rows.Next() {
         .      230ms    996:		var reservation Reservation
         .      170ms    997:		var sheet Sheet
         .      180ms    998:		var event Event
      20ms      4.70s    999:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.ID, &event.Price); err != nil {
         .          .   1000:			return err
         .          .   1001:		}
         .          .   1002:		report := Report{
         .          .   1003:			ReservationID: reservation.ID,
         .          .   1004:			EventID:       event.ID,
         .          .   1005:			Rank:          sheet.Rank,
         .          .   1006:			Num:           sheet.Num,
         .          .   1007:			UserID:        reservation.UserID,
      20ms      910ms   1008:			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .   1009:			Price:         event.Price + sheet.Price,
         .          .   1010:		}
         .          .   1011:		if reservation.CanceledAt != nil {
         .      880ms   1012:			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .   1013:		}
      20ms      1.05s   1014:		reports = append(reports, report)
         .          .   1015:	}
         .      3.89s   1016:	return renderReportCSV(c, reports)
         .          .   1017:}
         .          .   1018:
         .          .   1019:var db *sql.DB
         .          .   1020:
         .          .   1021:func main() {
ROUTINE ======================== main.getEvent in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     490ms      8.16s (flat, cum) 24.39% of Total
         .          .    273:	return events, nil
         .          .    274:}
         .          .    275:
         .          .    276:func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .    277:	var event Event
         .      820ms    278:	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .    279:		return nil, err
         .          .    280:	}
         .          .    281:	event.Sheets = map[string]*Sheets{
         .       10ms    282:		"S": &Sheets{},
         .          .    283:		"A": &Sheets{},
         .          .    284:		"B": &Sheets{},
         .          .    285:		"C": &Sheets{},
         .          .    286:	}
         .          .    287:
      40ms      150ms    288:	for _, sheet := range allSheets {
      10ms      1.06s    289:		sheet := sheet
      70ms      560ms    290:		event.Sheets[sheet.Rank].Price = event.Price + sheet.Price
      30ms       30ms    291:		event.Total++
      50ms      340ms    292:		event.Sheets[sheet.Rank].Total++
         .          .    293:
         .      3.58s    294:		reservation := eventSheetCache.Get(event.ID, sheet.ID)
         .          .    295:		if reservation != nil {
         .          .    296:			sheet.Mine = reservation.UserID == loginUserID
         .          .    297:			sheet.Reserved = true
         .          .    298:			sheet.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .    299:		} else {
         .          .    300:			event.Remains++
      40ms      370ms    301:			event.Sheets[sheet.Rank].Remains++
         .          .    302:		}
         .          .    303:
     250ms      1.24s    304:		event.Sheets[sheet.Rank].Detail = append(event.Sheets[sheet.Rank].Detail, &sheet)
         .          .    305:	}
         .          .    306:
         .          .    307:	return &event, nil
         .          .    308:}
         .          .    309:
ROUTINE ======================== main.getEvent in /home/isucon/local/go/src/time/time.go
      10ms       10ms (flat, cum)  0.03% of Total
         .          .    156:// sec returns the time's seconds since Jan 1 year 1.
         .          .    157:func (t *Time) sec() int64 {
         .          .    158:	if t.wall&hasMonotonic != 0 {
         .          .    159:		return wallToInternal + int64(t.wall<<1>>(nsecShift+1))
         .          .    160:	}
      10ms       10ms    161:	return int64(t.ext)
         .          .    162:}
         .          .    163:
         .          .    164:// unixSec returns the time's seconds since Jan 1 1970 (Unix time).
         .          .    165:func (t *Time) unixSec() int64 { return t.sec() + internalToUnix }
         .          .    166:
ROUTINE ======================== main.getEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      960ms (flat, cum)  2.87% of Total
         .          .    620:	if err != nil {
         .          .    621:		return resError(c, "not_found", 404)
         .          .    622:	}
         .          .    623:
         .          .    624:	loginUserID := int64(-1)
         .      140ms    625:	if user, err := getLoginUser(c); err == nil {
         .          .    626:		loginUserID = user.ID
         .          .    627:	}
         .          .    628:
         .      430ms    629:	event, err := getEvent(eventID, loginUserID)
         .          .    630:	if err != nil {
         .          .    631:		if err == sql.ErrNoRows {
         .          .    632:			return resError(c, "not_found", 404)
         .          .    633:		}
         .          .    634:		return err
         .          .    635:	} else if !event.PublicFg {
         .          .    636:		return resError(c, "not_found", 404)
         .          .    637:	}
         .      390ms    638:	return c.JSON(200, sanitizeEvent(event))
         .          .    639:}
         .          .    640:func postReserveHandler(c echo.Context) error {
         .          .    641:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    642:	if err != nil {
         .          .    643:		return resError(c, "not_found", 404)
ROUTINE ======================== main.getEvents in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      5.94s (flat, cum) 17.76% of Total
         .          .    235:	}
         .          .    236:	return &administrator, err
         .          .    237:}
         .          .    238:
         .          .    239:func getEvents(all bool) ([]*Event, error) {
         .       30ms    240:	tx, err := db.Begin()
         .          .    241:	if err != nil {
         .          .    242:		return nil, err
         .          .    243:	}
         .          .    244:	defer tx.Commit()
         .          .    245:
         .          .    246:	rows, err := tx.Query("SELECT * FROM events ORDER BY id ASC")
         .          .    247:	if err != nil {
         .          .    248:		return nil, err
         .          .    249:	}
         .          .    250:	defer rows.Close()
         .          .    251:
         .          .    252:	var events []*Event
         .       30ms    253:	for rows.Next() {
         .       10ms    254:		var event Event
         .       40ms    255:		if err := rows.Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .    256:			return nil, err
         .          .    257:		}
         .          .    258:		if !all && !event.PublicFg {
         .          .    259:			continue
         .          .    260:		}
         .          .    261:		events = append(events, &event)
         .          .    262:	}
         .          .    263:	for i, v := range events {
         .      5.83s    264:		event, err := getEvent(v.ID, -1)
         .          .    265:		if err != nil {
         .          .    266:			return nil, err
         .          .    267:		}
         .          .    268:		for k := range event.Sheets {
         .          .    269:			event.Sheets[k].Detail = nil
ROUTINE ======================== main.getIndexHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      4.67s (flat, cum) 13.96% of Total
         .          .    348:func (r *Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
         .          .    349:	return r.templates.ExecuteTemplate(w, name, data)
         .          .    350:}
         .          .    351:
         .          .    352:func getIndexHandler(c echo.Context) error {
         .      4.49s    353:	events, err := getEvents(false)
         .          .    354:	if err != nil {
         .          .    355:		return err
         .          .    356:	}
         .          .    357:	for i, v := range events {
         .          .    358:		events[i] = sanitizeEvent(v)
         .          .    359:	}
         .      170ms    360:	return c.Render(200, "index.tmpl", echo.Map{
         .          .    361:		"events": events,
         .          .    362:		"user":   c.Get("user"),
         .       10ms    363:		"origin": c.Scheme() + "://" + c.Request().Host,
         .          .    364:	})
         .          .    365:}
         .          .    366:
         .          .    367:var allSheets []Sheet
         .          .    368:
ROUTINE ======================== main.getLoginAdministrator in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       60ms (flat, cum)  0.18% of Total
         .          .    222:	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .    223:	return &user, err
         .          .    224:}
         .          .    225:
         .          .    226:func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .       20ms    227:	administratorID := sessAdministratorID(c)
         .          .    228:	if administratorID == 0 {
         .          .    229:		return nil, errors.New("not logged in")
         .          .    230:	}
         .          .    231:	var administrator Administrator
         .       40ms    232:	err := db.QueryRow("SELECT id, nickname FROM administrators WHERE id = ?", administratorID).Scan(&administrator.ID, &administrator.Nickname)
         .          .    233:	if err != nil {
         .          .    234:		log.Fatal("db.QueryRow:", err)
         .          .    235:	}
         .          .    236:	return &administrator, err
         .          .    237:}
ROUTINE ======================== main.getLoginUser in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      530ms (flat, cum)  1.58% of Total
         .          .    212:		return next(c)
         .          .    213:	}
         .          .    214:}
         .          .    215:
         .          .    216:func getLoginUser(c echo.Context) (*User, error) {
         .      280ms    217:	userID := sessUserID(c)
         .          .    218:	if userID == 0 {
         .          .    219:		return nil, errors.New("not logged in")
         .          .    220:	}
         .          .    221:	var user User
         .      250ms    222:	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .    223:	return &user, err
         .          .    224:}
         .          .    225:
         .          .    226:func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .          .    227:	administratorID := sessAdministratorID(c)
ROUTINE ======================== main.getUserHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms      1.37s (flat, cum)  4.10% of Total
         .          .    478:		"nickname": params.Nickname,
         .          .    479:	})
         .          .    480:}
         .          .    481:func getUserHandler(c echo.Context) error {
         .          .    482:	var user User
         .       20ms    483:	if err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", c.Param("id")).Scan(&user.ID, &user.Nickname); err != nil {
         .          .    484:		return err
         .          .    485:	}
         .          .    486:
         .       10ms    487:	loginUser, err := getLoginUser(c)
         .          .    488:	if err != nil {
         .          .    489:		return err
         .          .    490:	}
         .          .    491:	if user.ID != loginUser.ID {
         .          .    492:		return resError(c, "forbidden", 403)
         .          .    493:	}
         .          .    494:
         .       10ms    495:	rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id WHERE r.user_id = ? ORDER BY IFNULL(r.canceled_at, r.reserved_at) DESC LIMIT 5", user.ID)
         .          .    496:	if err != nil {
         .          .    497:		return err
         .          .    498:	}
         .          .    499:	defer rows.Close()
         .          .    500:
         .          .    501:	var recentReservations []Reservation
         .          .    502:	for rows.Next() {
         .          .    503:		var reservation Reservation
         .          .    504:		var sheet Sheet
         .          .    505:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num); err != nil {
         .          .    506:			return err
         .          .    507:		}
         .          .    508:
         .      630ms    509:		event, err := getEvent(reservation.EventID, -1)
         .          .    510:		if err != nil {
         .          .    511:			return err
         .          .    512:		}
         .          .    513:		price := event.Sheets[sheet.Rank].Price
         .          .    514:		event.Sheets = nil
         .          .    515:		event.Total = 0
         .          .    516:		event.Remains = 0
         .          .    517:
         .          .    518:		reservation.Event = event
         .          .    519:		reservation.SheetRank = sheet.Rank
         .          .    520:		reservation.SheetNum = sheet.Num
         .          .    521:		reservation.Price = price
         .          .    522:		reservation.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .    523:		if reservation.CanceledAt != nil {
         .          .    524:			reservation.CanceledAtUnix = reservation.CanceledAt.Unix()
         .          .    525:		}
         .          .    526:		recentReservations = append(recentReservations, reservation)
         .          .    527:	}
         .          .    528:	if recentReservations == nil {
         .          .    529:		recentReservations = make([]Reservation, 0)
         .          .    530:	}
         .          .    531:
         .          .    532:	var totalPrice int
         .       10ms    533:	if err := db.QueryRow("SELECT IFNULL(SUM(e.price + s.price), 0) FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.user_id = ? AND r.canceled_at IS NULL", user.ID).Scan(&totalPrice); err != nil {
         .          .    534:		return err
         .          .    535:	}
         .          .    536:
         .          .    537:	rows, err = db.Query("SELECT event_id FROM reservations WHERE user_id = ? GROUP BY event_id ORDER BY MAX(IFNULL(canceled_at, reserved_at)) DESC LIMIT 5", user.ID)
         .          .    538:	if err != nil {
         .          .    539:		return err
         .          .    540:	}
         .          .    541:	defer rows.Close()
         .          .    542:
         .          .    543:	var recentEvents []*Event
         .       20ms    544:	for rows.Next() {
         .          .    545:		var eventID int64
         .          .    546:		if err := rows.Scan(&eventID); err != nil {
         .          .    547:			return err
         .          .    548:		}
      10ms      640ms    549:		event, err := getEvent(eventID, -1)
         .          .    550:		if err != nil {
         .          .    551:			return err
         .          .    552:		}
         .          .    553:		for k := range event.Sheets {
         .          .    554:			event.Sheets[k].Detail = nil
         .          .    555:		}
         .          .    556:		recentEvents = append(recentEvents, event)
         .          .    557:	}
         .          .    558:	if recentEvents == nil {
         .          .    559:		recentEvents = make([]*Event, 0)
         .          .    560:	}
         .          .    561:
         .       30ms    562:	return c.JSON(200, echo.Map{
         .          .    563:		"id":                  user.ID,
         .          .    564:		"nickname":            user.Nickname,
         .          .    565:		"recent_reservations": recentReservations,
         .          .    566:		"total_price":         totalPrice,
         .          .    567:		"recent_events":       recentEvents,
ROUTINE ======================== main.loginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.35s (flat, cum)  7.03% of Total
         .          .    195:	sess.Save(c.Request(), c.Response())
         .          .    196:}
         .          .    197:
         .          .    198:func loginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    199:	return func(c echo.Context) error {
         .      280ms    200:		if _, err := getLoginUser(c); err != nil {
         .          .    201:			return resError(c, "login_required", 401)
         .          .    202:		}
         .      2.07s    203:		return next(c)
         .          .    204:	}
         .          .    205:}
         .          .    206:
         .          .    207:func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    208:	return func(c echo.Context) error {
ROUTINE ======================== main.main in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      120ms (flat, cum)  0.36% of Total
         .          .   1079:	e.GET("/admin/api/events/:id", getAdminEventHandler, adminLoginRequired)
         .          .   1080:	e.POST("/admin/api/events/:id/actions/edit", postAdminEditEventHandler, adminLoginRequired)
         .          .   1081:	e.GET("/admin/api/reports/events/:id/sales", getAdminReportsEventHandler, adminLoginRequired)
         .          .   1082:	e.GET("/admin/api/reports/sales", getAdminReportsHandler, adminLoginRequired)
         .          .   1083:
         .      120ms   1084:	e.Start(":8080")
         .          .   1085:}
         .          .   1086:
         .          .   1087:type Report struct {
         .          .   1088:	ReservationID int64
         .          .   1089:	EventID       int64
ROUTINE ======================== main.main.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       50ms (flat, cum)  0.15% of Total
         .          .   1042:	mainInit()
         .          .   1043:
         .          .   1044:	e := echo.New()
         .          .   1045:	funcs := template.FuncMap{
         .          .   1046:		"encode_json": func(v interface{}) string {
         .       40ms   1047:			b, _ := json.Marshal(v)
         .       10ms   1048:			return string(b)
         .          .   1049:		},
         .          .   1050:	}
         .          .   1051:	e.Renderer = &Renderer{
         .          .   1052:		templates: template.Must(template.New("").Delims("[[", "]]").Funcs(funcs).ParseGlob("views/*.tmpl")),
         .          .   1053:	}
ROUTINE ======================== main.postAdminEditEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       60ms (flat, cum)  0.18% of Total
         .          .    901:
         .          .    902:	var params struct {
         .          .    903:		Public bool `json:"public"`
         .          .    904:		Closed bool `json:"closed"`
         .          .    905:	}
         .       10ms    906:	c.Bind(&params)
         .          .    907:	if params.Closed {
         .          .    908:		params.Public = false
         .          .    909:	}
         .          .    910:
         .       30ms    911:	event, err := getEvent(eventID, -1)
         .          .    912:	if err != nil {
         .          .    913:		if err == sql.ErrNoRows {
         .          .    914:			return resError(c, "not_found", 404)
         .          .    915:		}
         .          .    916:		return err
         .          .    917:	}
         .          .    918:
         .          .    919:	if event.ClosedFg {
         .          .    920:		return resError(c, "cannot_edit_closed_event", 400)
         .          .    921:	} else if event.PublicFg && params.Closed {
         .          .    922:		return resError(c, "cannot_close_public_event", 400)
         .          .    923:	}
         .          .    924:
         .          .    925:	tx, err := db.Begin()
         .          .    926:	if err != nil {
         .          .    927:		return err
         .          .    928:	}
         .          .    929:	if _, err := tx.Exec("UPDATE events SET public_fg = ?, closed_fg = ? WHERE id = ?", params.Public, params.Closed, event.ID); err != nil {
         .          .    930:		tx.Rollback()
         .          .    931:		return err
         .          .    932:	}
         .          .    933:	if err := tx.Commit(); err != nil {
         .          .    934:		return err
         .          .    935:	}
         .          .    936:
         .       20ms    937:	e, err := getEvent(eventID, -1)
         .          .    938:	if err != nil {
         .          .    939:		return err
         .          .    940:	}
         .          .    941:	c.JSON(200, e)
         .          .    942:	return nil
ROUTINE ======================== main.postAdminEventsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum)  0.03% of Total
         .          .    869:	}
         .          .    870:	if err := tx.Commit(); err != nil {
         .          .    871:		return err
         .          .    872:	}
         .          .    873:
         .       10ms    874:	event, err := getEvent(eventID, -1)
         .          .    875:	if err != nil {
         .          .    876:		return err
         .          .    877:	}
         .          .    878:	return c.JSON(200, event)
         .          .    879:}
ROUTINE ======================== main.postAdminLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       70ms (flat, cum)  0.21% of Total
         .          .    806:		Password  string `json:"password"`
         .          .    807:	}
         .          .    808:	c.Bind(&params)
         .          .    809:
         .          .    810:	administrator := new(Administrator)
         .       40ms    811:	if err := db.QueryRow("SELECT * FROM administrators WHERE login_name = ?", params.LoginName).Scan(&administrator.ID, &administrator.LoginName, &administrator.Nickname, &administrator.PassHash); err != nil {
         .          .    812:		if err == sql.ErrNoRows {
         .          .    813:			return resError(c, "authentication_failed", 401)
         .          .    814:		}
         .          .    815:		return err
         .          .    816:	}
         .          .    817:
         .          .    818:	var passHash string
         .       20ms    819:	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .    820:		return err
         .          .    821:	}
         .          .    822:	if administrator.PassHash != passHash {
         .          .    823:		return resError(c, "authentication_failed", 401)
         .          .    824:	}
         .          .    825:
         .       10ms    826:	sessSetAdministratorID(c, administrator.ID)
         .          .    827:	administrator, err := getLoginAdministrator(c)
         .          .    828:	if err != nil {
         .          .    829:		return err
         .          .    830:	}
         .          .    831:	return c.JSON(200, administrator)
ROUTINE ======================== main.postLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      360ms (flat, cum)  1.08% of Total
         .          .    572:func postLoginHandler(c echo.Context) error {
         .          .    573:	var params struct {
         .          .    574:		LoginName string `json:"login_name"`
         .          .    575:		Password  string `json:"password"`
         .          .    576:	}
         .       10ms    577:	c.Bind(&params)
         .          .    578:
         .          .    579:	user := new(User)
         .      120ms    580:	if err := db.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != nil {
         .          .    581:		if err == sql.ErrNoRows {
         .          .    582:			return resError(c, "authentication_failed", 401)
         .          .    583:		}
         .          .    584:		return err
         .          .    585:	}
         .          .    586:
         .          .    587:	var passHash string
         .       60ms    588:	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .    589:		return err
         .          .    590:	}
         .          .    591:	if user.PassHash != passHash {
         .          .    592:		return resError(c, "authentication_failed", 401)
         .          .    593:	}
         .          .    594:
         .       60ms    595:	sessSetUserID(c, user.ID)
         .       80ms    596:	user, err := getLoginUser(c)
         .          .    597:	if err != nil {
         .          .    598:		return err
         .          .    599:	}
         .       30ms    600:	return c.JSON(200, user)
         .          .    601:}
         .          .    602:
         .          .    603:func postLogoutHandler(c echo.Context) error {
         .          .    604:	sessDeleteUserID(c)
         .          .    605:	return c.NoContent(204)
ROUTINE ======================== main.postReserveHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      520ms (flat, cum)  1.55% of Total
         .          .    643:		return resError(c, "not_found", 404)
         .          .    644:	}
         .          .    645:	var params struct {
         .          .    646:		Rank string `json:"sheet_rank"`
         .          .    647:	}
         .       30ms    648:	c.Bind(&params)
         .          .    649:
         .       20ms    650:	user, err := getLoginUser(c)
         .          .    651:	if err != nil {
         .          .    652:		log.Println("failed to get login user:", err)
         .          .    653:		return err
         .          .    654:	}
         .          .    655:
         .      370ms    656:	event, err := getEvent(eventID, user.ID)
         .          .    657:	if err != nil {
         .          .    658:		if err == sql.ErrNoRows {
         .          .    659:			return resError(c, "invalid_event", 404)
         .          .    660:		}
         .          .    661:		return err
         .          .    662:	} else if !event.PublicFg {
         .          .    663:		return resError(c, "invalid_event", 404)
         .          .    664:	}
         .          .    665:
         .       20ms    666:	if !validateRank(params.Rank) {
         .          .    667:		return resError(c, "invalid_rank", 400)
         .          .    668:	}
         .          .    669:
         .          .    670:	var sheet Sheet
         .          .    671:	var reservationID int64
         .          .    672:	for {
         .          .    673:		tx, err := db.Begin()
         .       40ms    674:		if err := tx.QueryRow("SELECT * FROM sheets WHERE id NOT IN (SELECT sheet_id FROM reservations WHERE event_id = ? AND canceled_at IS NULL FOR UPDATE) AND `rank` = ? ORDER BY RAND() LIMIT 1", event.ID, params.Rank).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .    675:			tx.Rollback()
         .          .    676:			if err == sql.ErrNoRows {
         .          .    677:				return resError(c, "sold_out", 409)
         .          .    678:			}
         .          .    679:			log.Println("re-try: rollback by", err)
         .          .    680:			continue
         .          .    681:		}
         .          .    682:
         .          .    683:		t := time.Now()
         .       20ms    684:		res, err := tx.Exec("INSERT INTO reservations (event_id, sheet_id, user_id, reserved_at) VALUES (?, ?, ?, ?)", event.ID, sheet.ID, user.ID, t.UTC().Format("2006-01-02 15:04:05.000000"))
         .          .    685:		if err != nil {
         .          .    686:			tx.Rollback()
         .          .    687:			log.Println("re-try: rollback by", err)
         .          .    688:			continue
         .          .    689:		}
         .          .    690:		reservationID, err = res.LastInsertId()
         .          .    691:		if err != nil {
         .          .    692:			tx.Rollback()
         .          .    693:			log.Println("re-try: rollback by", err)
         .          .    694:			continue
         .          .    695:		}
         .          .    696:
         .          .    697:		eventSheetCache.Set(event.ID, sheet.ID, EventSheetReservation{user.ID, t})
         .       20ms    698:		if err := tx.Commit(); err != nil {
         .          .    699:			tx.Rollback()
         .          .    700:			log.Println("re-try: rollback by", err)
         .          .    701:			continue
         .          .    702:		}
         .          .    703:		break
ROUTINE ======================== main.postUsersHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       30ms (flat, cum)  0.09% of Total
         .          .    441:	var params struct {
         .          .    442:		Nickname  string `json:"nickname"`
         .          .    443:		LoginName string `json:"login_name"`
         .          .    444:		Password  string `json:"password"`
         .          .    445:	}
         .       10ms    446:	c.Bind(&params)
         .          .    447:
         .       20ms    448:	tx, err := db.Begin()
         .          .    449:	if err != nil {
         .          .    450:		return err
         .          .    451:	}
         .          .    452:
         .          .    453:	var user User
ROUTINE ======================== main.renderReportCSV in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      60ms      4.10s (flat, cum) 12.26% of Total
         .          .   1094:	CanceledAt    string
         .          .   1095:	Price         int64
         .          .   1096:}
         .          .   1097:
         .          .   1098:func renderReportCSV(c echo.Context, reports []Report) error {
         .      1.08s   1099:	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .   1100:
         .          .   1101:	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
      10ms       40ms   1102:	for _, v := range reports {
      20ms      2.21s   1103:		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
      30ms      710ms   1104:			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
         .          .   1105:	}
         .          .   1106:
         .          .   1107:	c.Response().Header().Set("Content-Type", `text/csv; charset=UTF-8`)
         .          .   1108:	c.Response().Header().Set("Content-Disposition", `attachment; filename="report.csv"`)
         .       60ms   1109:	_, err := io.Copy(c.Response(), body)
         .          .   1110:	return err
         .          .   1111:}
         .          .   1112:
         .          .   1113:func resError(c echo.Context, e string, status int) error {
         .          .   1114:	if e == "" {
ROUTINE ======================== main.renderReportCSV.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     250ms      250ms (flat, cum)  0.75% of Total
         .          .   1094:	CanceledAt    string
         .          .   1095:	Price         int64
         .          .   1096:}
         .          .   1097:
         .          .   1098:func renderReportCSV(c echo.Context, reports []Report) error {
     250ms      250ms   1099:	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .   1100:
         .          .   1101:	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .          .   1102:	for _, v := range reports {
         .          .   1103:		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
         .          .   1104:			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
ROUTINE ======================== main.renderReportCSV.func1 in /home/isucon/local/go/src/strings/compare.go
     110ms      630ms (flat, cum)  1.88% of Total
         .          .     16:	// using strings.Compare. Basically no one should use strings.Compare.
         .          .     17:	// As the comment above says, it is here only for symmetry with package bytes.
         .          .     18:	// If performance is important, the compiler should be changed to recognize
         .          .     19:	// the pattern so that all code doing three-way comparisons, not just code
         .          .     20:	// using strings.Compare, can benefit.
      40ms      390ms     21:	if a == b {
         .          .     22:		return 0
         .          .     23:	}
      70ms      240ms     24:	if a < b {
         .          .     25:		return -1
         .          .     26:	}
         .          .     27:	return +1
         .          .     28:}
ROUTINE ======================== main.sessAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum)  0.06% of Total
         .          .    163:	delete(sess.Values, "user_id")
         .          .    164:	sess.Save(c.Request(), c.Response())
         .          .    165:}
         .          .    166:
         .          .    167:func sessAdministratorID(c echo.Context) int64 {
         .       20ms    168:	sess, _ := session.Get("session", c)
         .          .    169:	var administratorID int64
         .          .    170:	if x, ok := sess.Values["administrator_id"]; ok {
         .          .    171:		administratorID, _ = x.(int64)
         .          .    172:	}
         .          .    173:	return administratorID
ROUTINE ======================== main.sessSetAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum)  0.03% of Total
         .          .    179:		Path:     "/",
         .          .    180:		MaxAge:   3600,
         .          .    181:		HttpOnly: true,
         .          .    182:	}
         .          .    183:	sess.Values["administrator_id"] = id
         .       10ms    184:	sess.Save(c.Request(), c.Response())
         .          .    185:}
         .          .    186:
         .          .    187:func sessDeleteAdministratorID(c echo.Context) {
         .          .    188:	sess, _ := session.Get("session", c)
         .          .    189:	sess.Options = &sessions.Options{
ROUTINE ======================== main.sessSetUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       60ms (flat, cum)  0.18% of Total
         .          .    148:		Path:     "/",
         .          .    149:		MaxAge:   3600,
         .          .    150:		HttpOnly: true,
         .          .    151:	}
         .          .    152:	sess.Values["user_id"] = id
         .       60ms    153:	sess.Save(c.Request(), c.Response())
         .          .    154:}
         .          .    155:
         .          .    156:func sessDeleteUserID(c echo.Context) {
         .          .    157:	sess, _ := session.Get("session", c)
         .          .    158:	sess.Options = &sessions.Options{
ROUTINE ======================== main.sessUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      280ms (flat, cum)  0.84% of Total
         .          .    132:}
         .          .    133:
         .          .    134:var eventSheetCache EventSheetReservationCache
         .          .    135:
         .          .    136:func sessUserID(c echo.Context) int64 {
         .      270ms    137:	sess, _ := session.Get("session", c)
         .          .    138:	var userID int64
         .       10ms    139:	if x, ok := sess.Values["user_id"]; ok {
         .          .    140:		userID, _ = x.(int64)
         .          .    141:	}
         .          .    142:	return userID
         .          .    143:}
         .          .    144:
ROUTINE ======================== main.validateRank in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum)  0.06% of Total
         .          .    335:	}
         .          .    336:}
         .          .    337:
         .          .    338:func validateRank(rank string) bool {
         .          .    339:	var count int
         .       20ms    340:	db.QueryRow("SELECT COUNT(*) FROM sheets WHERE `rank` = ?", rank).Scan(&count)
         .          .    341:	return count > 0
         .          .    342:}
         .          .    343:
         .          .    344:type Renderer struct {
         .          .    345:	templates *template.Template
ROUTINE ======================== runtime.main in /home/isucon/local/go/src/runtime/proc.go
         0      120ms (flat, cum)  0.36% of Total
         .          .    193:		// A program compiled with -buildmode=c-archive or c-shared
         .          .    194:		// has a main, but it is not executed.
         .          .    195:		return
         .          .    196:	}
         .          .    197:	fn = main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .      120ms    198:	fn()
         .          .    199:	if raceenabled {
         .          .    200:		racefini()
         .          .    201:	}
         .          .    202:
         .          .    203:	// Make racy client program work: if panicking on
