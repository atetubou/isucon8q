Total: 42.25s
ROUTINE ======================== main.(*EventSheetReservationCache).Get in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     470ms      5.04s (flat, cum) 11.93% of Total
         .          .    105:	return EventSheetReservationCache{
         .          .    106:		cache: make(map[EventSheetKey]EventSheetReservation),
         .          .    107:	}
         .          .    108:}
         .          .    109:
      40ms       40ms    110:func (c *EventSheetReservationCache) Get(eventId int64, sheetId int64) *EventSheetReservation {
         .          .    111:	key := EventSheetKey{eventId, sheetId}
     100ms      440ms    112:	c.mu.RLock()
      40ms      450ms    113:	defer c.mu.RUnlock()
     250ms      3.05s    114:	if v, ok := c.cache[key]; ok {
      10ms      230ms    115:		return &v
         .          .    116:	}
      30ms      830ms    117:	return nil
         .          .    118:}
         .          .    119:
         .          .    120:func (c *EventSheetReservationCache) Set(eventId int64, sheetId int64, reservation EventSheetReservation) {
         .          .    121:	key := EventSheetKey{eventId, sheetId}
         .          .    122:	c.mu.Lock()
ROUTINE ======================== main.(*Renderer).Render in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      250ms (flat, cum)  0.59% of Total
         .          .    339:type Renderer struct {
         .          .    340:	templates *template.Template
         .          .    341:}
         .          .    342:
         .          .    343:func (r *Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
         .      250ms    344:	return r.templates.ExecuteTemplate(w, name, data)
         .          .    345:}
         .          .    346:
         .          .    347:func getIndexHandler(c echo.Context) error {
         .          .    348:	events, err := getEvents(false)
         .          .    349:	if err != nil {
ROUTINE ======================== main.adminLoginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0     21.23s (flat, cum) 50.25% of Total
         .          .    204:	}
         .          .    205:}
         .          .    206:
         .          .    207:func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    208:	return func(c echo.Context) error {
         .       60ms    209:		if _, err := getLoginAdministrator(c); err != nil {
         .          .    210:			return resError(c, "admin_login_required", 401)
         .          .    211:		}
         .     21.17s    212:		return next(c)
         .          .    213:	}
         .          .    214:}
         .          .    215:
         .          .    216:func getLoginUser(c echo.Context) (*User, error) {
         .          .    217:	userID := sessUserID(c)
ROUTINE ======================== main.deleteReservationHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      450ms (flat, cum)  1.07% of Total
         .          .    705:		return resError(c, "not_found", 404)
         .          .    706:	}
         .          .    707:	rank := c.Param("rank")
         .          .    708:	num := c.Param("num")
         .          .    709:
         .       10ms    710:	user, err := getLoginUser(c)
         .          .    711:	if err != nil {
         .          .    712:		return err
         .          .    713:	}
         .          .    714:
         .      330ms    715:	event, err := getEvent(eventID, user.ID)
         .          .    716:	if err != nil {
         .          .    717:		if err == sql.ErrNoRows {
         .          .    718:			return resError(c, "invalid_event", 404)
         .          .    719:		}
         .          .    720:		return err
         .          .    721:	} else if !event.PublicFg {
         .          .    722:		return resError(c, "invalid_event", 404)
         .          .    723:	}
         .          .    724:
         .       40ms    725:	if !validateRank(rank) {
         .          .    726:		return resError(c, "invalid_rank", 404)
         .          .    727:	}
         .          .    728:
         .          .    729:	var sheet Sheet
         .       30ms    730:	if err := db.QueryRow("SELECT * FROM sheets WHERE `rank` = ? AND num = ?", rank, num).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .    731:		if err == sql.ErrNoRows {
         .          .    732:			return resError(c, "invalid_sheet", 404)
         .          .    733:		}
         .          .    734:		return err
         .          .    735:	}
         .          .    736:
         .       10ms    737:	tx, err := db.Begin()
         .          .    738:	if err != nil {
         .          .    739:		return err
         .          .    740:	}
         .          .    741:
         .          .    742:	var reservation Reservation
         .       20ms    743:	if err := tx.QueryRow("SELECT * FROM reservations WHERE event_id = ? AND sheet_id = ? AND canceled_at IS NULL GROUP BY event_id HAVING reserved_at = MIN(reserved_at) FOR UPDATE", event.ID, sheet.ID).Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt); err != nil {
         .          .    744:		tx.Rollback()
         .          .    745:		if err == sql.ErrNoRows {
         .          .    746:			return resError(c, "not_reserved", 400)
         .          .    747:		}
         .          .    748:		return err
         .          .    749:	}
         .          .    750:	if reservation.UserID != user.ID {
         .          .    751:		tx.Rollback()
         .          .    752:		return resError(c, "not_permitted", 403)
         .          .    753:	}
         .          .    754:
         .          .    755:	eventSheetCache.Delete(reservation.EventID, reservation.SheetID)
         .       10ms    756:	if _, err := tx.Exec("UPDATE reservations SET canceled_at = ? WHERE id = ?", time.Now().UTC().Format("2006-01-02 15:04:05.000000"), reservation.ID); err != nil {
         .          .    757:		tx.Rollback()
         .          .    758:		return err
         .          .    759:	}
         .          .    760:	if err := tx.Commit(); err != nil {
         .          .    761:		return err
ROUTINE ======================== main.fillinAdministrator.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.54s (flat, cum)  3.64% of Total
         .          .    324:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    325:	return func(c echo.Context) error {
         .          .    326:		if administrator, err := getLoginAdministrator(c); err == nil {
         .          .    327:			c.Set("administrator", administrator)
         .          .    328:		}
         .      1.54s    329:		return next(c)
         .          .    330:	}
         .          .    331:}
         .          .    332:
         .          .    333:func validateRank(rank string) bool {
         .          .    334:	var count int
ROUTINE ======================== main.fillinUser.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      7.71s (flat, cum) 18.25% of Total
         .          .    312:	return &sanitized
         .          .    313:}
         .          .    314:
         .          .    315:func fillinUser(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    316:	return func(c echo.Context) error {
         .       40ms    317:		if user, err := getLoginUser(c); err == nil {
         .       10ms    318:			c.Set("user", user)
         .          .    319:		}
         .      7.66s    320:		return next(c)
         .          .    321:	}
         .          .    322:}
         .          .    323:
         .          .    324:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    325:	return func(c echo.Context) error {
ROUTINE ======================== main.getAdminEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       30ms (flat, cum) 0.071% of Total
         .          .    860:func getAdminEventHandler(c echo.Context) error {
         .          .    861:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    862:	if err != nil {
         .          .    863:		return resError(c, "not_found", 404)
         .          .    864:	}
         .       10ms    865:	event, err := getEvent(eventID, -1)
         .          .    866:	if err != nil {
         .          .    867:		if err == sql.ErrNoRows {
         .          .    868:			return resError(c, "not_found", 404)
         .          .    869:		}
         .          .    870:		return err
         .          .    871:	}
         .       20ms    872:	return c.JSON(200, event)
         .          .    873:}
         .          .    874:
         .          .    875:func postAdminEditEventHandler(c echo.Context) error {
         .          .    876:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    877:	if err != nil {
ROUTINE ======================== main.getAdminHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.54s (flat, cum)  3.64% of Total
         .          .    766:func getAdminHandler(c echo.Context) error {
         .          .    767:	var events []*Event
         .          .    768:	administrator := c.Get("administrator")
         .          .    769:	if administrator != nil {
         .          .    770:		var err error
         .      1.47s    771:		if events, err = getEvents(true); err != nil {
         .          .    772:			return err
         .          .    773:		}
         .          .    774:	}
         .       70ms    775:	return c.Render(200, "admin.tmpl", echo.Map{
         .          .    776:		"events":        events,
         .          .    777:		"administrator": administrator,
         .          .    778:		"origin":        c.Scheme() + "://" + c.Request().Host,
         .          .    779:	})
         .          .    780:}
ROUTINE ======================== main.getAdminReportsEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.12s (flat, cum)  2.65% of Total
         .          .    926:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    927:	if err != nil {
         .          .    928:		return resError(c, "not_found", 404)
         .          .    929:	}
         .          .    930:
         .       90ms    931:	event, err := getEvent(eventID, -1)
         .          .    932:	if err != nil {
         .          .    933:		return err
         .          .    934:	}
         .          .    935:
         .          .    936:	rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num, s.price AS sheet_price, e.price AS event_price FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.event_id = ? ORDER BY reserved_at ASC FOR UPDATE", event.ID)
         .          .    937:	if err != nil {
         .          .    938:		return err
         .          .    939:	}
         .          .    940:	defer rows.Close()
         .          .    941:
         .          .    942:	var reports []Report
         .      250ms    943:	for rows.Next() {
         .       10ms    944:		var reservation Reservation
         .          .    945:		var sheet Sheet
         .      270ms    946:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.Price); err != nil {
         .          .    947:			return err
         .          .    948:		}
         .          .    949:		report := Report{
         .          .    950:			ReservationID: reservation.ID,
         .          .    951:			EventID:       event.ID,
         .          .    952:			Rank:          sheet.Rank,
         .          .    953:			Num:           sheet.Num,
         .          .    954:			UserID:        reservation.UserID,
         .       90ms    955:			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .    956:			Price:         event.Price + sheet.Price,
         .          .    957:		}
         .          .    958:		if reservation.CanceledAt != nil {
         .       50ms    959:			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .    960:		}
         .      110ms    961:		reports = append(reports, report)
         .          .    962:	}
         .      250ms    963:	return renderReportCSV(c, reports)
         .          .    964:}
         .          .    965:
         .          .    966:func getAdminReportsHandler(c echo.Context) error {
         .          .    967:	rows, err := db.Query("select r.*, s.rank as sheet_rank, s.num as sheet_num, s.price as sheet_price, e.id as event_id, e.price as event_price from reservations r inner join sheets s on s.id = r.sheet_id inner join events e on e.id = r.event_id order by reserved_at asc for update")
         .          .    968:	if err != nil {
ROUTINE ======================== main.getAdminReportsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     190ms     19.99s (flat, cum) 47.31% of Total
         .          .    969:		return err
         .          .    970:	}
         .          .    971:	defer rows.Close()
         .          .    972:
         .          .    973:	var reports []Report
      50ms      6.03s    974:	for rows.Next() {
      10ms      310ms    975:		var reservation Reservation
         .      140ms    976:		var sheet Sheet
         .      100ms    977:		var event Event
      80ms      5.40s    978:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.ID, &event.Price); err != nil {
         .          .    979:			return err
         .          .    980:		}
         .       10ms    981:		report := Report{
         .          .    982:			ReservationID: reservation.ID,
      10ms       10ms    983:			EventID:       event.ID,
         .          .    984:			Rank:          sheet.Rank,
         .          .    985:			Num:           sheet.Num,
         .          .    986:			UserID:        reservation.UserID,
      30ms      1.24s    987:			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .    988:			Price:         event.Price + sheet.Price,
         .          .    989:		}
         .          .    990:		if reservation.CanceledAt != nil {
         .      1.05s    991:			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .    992:		}
      10ms      1.17s    993:		reports = append(reports, report)
         .          .    994:	}
         .      4.53s    995:	return renderReportCSV(c, reports)
         .          .    996:}
         .          .    997:
         .          .    998:var db *sql.DB
         .          .    999:
         .          .   1000:func main() {
ROUTINE ======================== main.getEvent in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     620ms     11.55s (flat, cum) 27.34% of Total
         .          .    270:	return events, nil
         .          .    271:}
         .          .    272:
         .          .    273:func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .    274:	var event Event
         .      1.09s    275:	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .    276:		return nil, err
         .          .    277:	}
         .          .    278:	event.Sheets = map[string]*Sheets{
         .       30ms    279:		"S": &Sheets{},
         .          .    280:		"A": &Sheets{},
         .          .    281:		"B": &Sheets{},
         .       10ms    282:		"C": &Sheets{},
         .          .    283:	}
         .          .    284:
      20ms      180ms    285:	for _, sheet := range allSheets {
      60ms      1.32s    286:		sheet := sheet
      70ms      940ms    287:		event.Sheets[sheet.Rank].Price = event.Price + sheet.Price
      50ms       50ms    288:		event.Total++
      50ms      600ms    289:		event.Sheets[sheet.Rank].Total++
         .          .    290:
      10ms      5.05s    291:		reservation := eventSheetCache.Get(event.ID, sheet.ID)
         .          .    292:		if reservation != nil {
         .          .    293:			sheet.Mine = reservation.UserID == loginUserID
         .          .    294:			sheet.Reserved = true
         .          .    295:			sheet.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .    296:		} else {
         .          .    297:			event.Remains++
      90ms      550ms    298:			event.Sheets[sheet.Rank].Remains++
         .          .    299:		}
         .          .    300:
     270ms      1.73s    301:		event.Sheets[sheet.Rank].Detail = append(event.Sheets[sheet.Rank].Detail, &sheet)
         .          .    302:	}
         .          .    303:
         .          .    304:	return &event, nil
         .          .    305:}
         .          .    306:
ROUTINE ======================== main.getEvent in /home/isucon/local/go/src/time/time.go
      30ms       30ms (flat, cum) 0.071% of Total
         .          .    153:	return int32(t.wall & nsecMask)
         .          .    154:}
         .          .    155:
         .          .    156:// sec returns the time's seconds since Jan 1 year 1.
         .          .    157:func (t *Time) sec() int64 {
      20ms       20ms    158:	if t.wall&hasMonotonic != 0 {
         .          .    159:		return wallToInternal + int64(t.wall<<1>>(nsecShift+1))
         .          .    160:	}
         .          .    161:	return int64(t.ext)
         .          .    162:}
         .          .    163:
         .          .    164:// unixSec returns the time's seconds since Jan 1 1970 (Unix time).
      10ms       10ms    165:func (t *Time) unixSec() int64 { return t.sec() + internalToUnix }
         .          .    166:
         .          .    167:// addSec adds d seconds to the time.
         .          .    168:func (t *Time) addSec(d int64) {
         .          .    169:	if t.wall&hasMonotonic != 0 {
         .          .    170:		sec := int64(t.wall << 1 >> (nsecShift + 1))
ROUTINE ======================== main.getEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.36s (flat, cum)  3.22% of Total
         .          .    610:	if err != nil {
         .          .    611:		return resError(c, "not_found", 404)
         .          .    612:	}
         .          .    613:
         .          .    614:	loginUserID := int64(-1)
         .      160ms    615:	if user, err := getLoginUser(c); err == nil {
         .          .    616:		loginUserID = user.ID
         .          .    617:	}
         .          .    618:
         .      600ms    619:	event, err := getEvent(eventID, loginUserID)
         .          .    620:	if err != nil {
         .          .    621:		if err == sql.ErrNoRows {
         .          .    622:			return resError(c, "not_found", 404)
         .          .    623:		}
         .          .    624:		return err
         .          .    625:	} else if !event.PublicFg {
         .          .    626:		return resError(c, "not_found", 404)
         .          .    627:	}
         .      600ms    628:	return c.JSON(200, sanitizeEvent(event))
         .          .    629:}
         .          .    630:func postReserveHandler(c echo.Context) error {
         .          .    631:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    632:	if err != nil {
         .          .    633:		return resError(c, "not_found", 404)
ROUTINE ======================== main.getEvents in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      8.85s (flat, cum) 20.95% of Total
         .          .    232:	err := db.QueryRow("SELECT id, nickname FROM administrators WHERE id = ?", administratorID).Scan(&administrator.ID, &administrator.Nickname)
         .          .    233:	return &administrator, err
         .          .    234:}
         .          .    235:
         .          .    236:func getEvents(all bool) ([]*Event, error) {
         .       20ms    237:	tx, err := db.Begin()
         .          .    238:	if err != nil {
         .          .    239:		return nil, err
         .          .    240:	}
         .          .    241:	defer tx.Commit()
         .          .    242:
         .       10ms    243:	rows, err := tx.Query("SELECT * FROM events ORDER BY id ASC")
         .          .    244:	if err != nil {
         .          .    245:		return nil, err
         .          .    246:	}
         .          .    247:	defer rows.Close()
         .          .    248:
         .          .    249:	var events []*Event
         .       30ms    250:	for rows.Next() {
         .          .    251:		var event Event
         .       20ms    252:		if err := rows.Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .    253:			return nil, err
         .          .    254:		}
         .          .    255:		if !all && !event.PublicFg {
         .          .    256:			continue
         .          .    257:		}
         .          .    258:		events = append(events, &event)
         .          .    259:	}
         .          .    260:	for i, v := range events {
         .      8.76s    261:		event, err := getEvent(v.ID, -1)
         .          .    262:		if err != nil {
         .          .    263:			return nil, err
         .          .    264:		}
         .          .    265:		for k := range event.Sheets {
         .          .    266:			event.Sheets[k].Detail = nil
         .          .    267:		}
         .          .    268:		events[i] = event
         .          .    269:	}
         .       10ms    270:	return events, nil
         .          .    271:}
         .          .    272:
         .          .    273:func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .    274:	var event Event
         .          .    275:	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
ROUTINE ======================== main.getIndexHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      7.66s (flat, cum) 18.13% of Total
         .          .    343:func (r *Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
         .          .    344:	return r.templates.ExecuteTemplate(w, name, data)
         .          .    345:}
         .          .    346:
         .          .    347:func getIndexHandler(c echo.Context) error {
         .      7.38s    348:	events, err := getEvents(false)
         .          .    349:	if err != nil {
         .          .    350:		return err
         .          .    351:	}
         .          .    352:	for i, v := range events {
         .          .    353:		events[i] = sanitizeEvent(v)
         .          .    354:	}
         .      270ms    355:	return c.Render(200, "index.tmpl", echo.Map{
         .          .    356:		"events": events,
         .          .    357:		"user":   c.Get("user"),
         .       10ms    358:		"origin": c.Scheme() + "://" + c.Request().Host,
         .          .    359:	})
         .          .    360:}
         .          .    361:
         .          .    362:var allSheets []Sheet
         .          .    363:
ROUTINE ======================== main.getLoginAdministrator in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       70ms (flat, cum)  0.17% of Total
         .          .    222:	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .    223:	return &user, err
         .          .    224:}
         .          .    225:
         .          .    226:func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .       40ms    227:	administratorID := sessAdministratorID(c)
         .          .    228:	if administratorID == 0 {
         .          .    229:		return nil, errors.New("not logged in")
         .          .    230:	}
         .          .    231:	var administrator Administrator
         .       30ms    232:	err := db.QueryRow("SELECT id, nickname FROM administrators WHERE id = ?", administratorID).Scan(&administrator.ID, &administrator.Nickname)
         .          .    233:	return &administrator, err
         .          .    234:}
         .          .    235:
         .          .    236:func getEvents(all bool) ([]*Event, error) {
         .          .    237:	tx, err := db.Begin()
ROUTINE ======================== main.getLoginUser in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      820ms (flat, cum)  1.94% of Total
         .          .    212:		return next(c)
         .          .    213:	}
         .          .    214:}
         .          .    215:
         .          .    216:func getLoginUser(c echo.Context) (*User, error) {
         .      280ms    217:	userID := sessUserID(c)
         .          .    218:	if userID == 0 {
         .          .    219:		return nil, errors.New("not logged in")
         .          .    220:	}
         .          .    221:	var user User
         .      540ms    222:	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .    223:	return &user, err
         .          .    224:}
         .          .    225:
         .          .    226:func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .          .    227:	administratorID := sessAdministratorID(c)
ROUTINE ======================== main.getUserHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.27s (flat, cum)  3.01% of Total
         .          .    468:		"nickname": params.Nickname,
         .          .    469:	})
         .          .    470:}
         .          .    471:func getUserHandler(c echo.Context) error {
         .          .    472:	var user User
         .       10ms    473:	if err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", c.Param("id")).Scan(&user.ID, &user.Nickname); err != nil {
         .          .    474:		return err
         .          .    475:	}
         .          .    476:
         .          .    477:	loginUser, err := getLoginUser(c)
         .          .    478:	if err != nil {
         .          .    479:		return err
         .          .    480:	}
         .          .    481:	if user.ID != loginUser.ID {
         .          .    482:		return resError(c, "forbidden", 403)
         .          .    483:	}
         .          .    484:
         .       20ms    485:	rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id WHERE r.user_id = ? ORDER BY IFNULL(r.canceled_at, r.reserved_at) DESC LIMIT 5", user.ID)
         .          .    486:	if err != nil {
         .          .    487:		return err
         .          .    488:	}
         .          .    489:	defer rows.Close()
         .          .    490:
         .          .    491:	var recentReservations []Reservation
         .          .    492:	for rows.Next() {
         .          .    493:		var reservation Reservation
         .          .    494:		var sheet Sheet
         .          .    495:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num); err != nil {
         .          .    496:			return err
         .          .    497:		}
         .          .    498:
         .      550ms    499:		event, err := getEvent(reservation.EventID, -1)
         .          .    500:		if err != nil {
         .          .    501:			return err
         .          .    502:		}
         .          .    503:		price := event.Sheets[sheet.Rank].Price
         .          .    504:		event.Sheets = nil
         .          .    505:		event.Total = 0
         .          .    506:		event.Remains = 0
         .          .    507:
         .          .    508:		reservation.Event = event
         .          .    509:		reservation.SheetRank = sheet.Rank
         .          .    510:		reservation.SheetNum = sheet.Num
         .          .    511:		reservation.Price = price
         .          .    512:		reservation.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .    513:		if reservation.CanceledAt != nil {
         .          .    514:			reservation.CanceledAtUnix = reservation.CanceledAt.Unix()
         .          .    515:		}
         .          .    516:		recentReservations = append(recentReservations, reservation)
         .          .    517:	}
         .          .    518:	if recentReservations == nil {
         .          .    519:		recentReservations = make([]Reservation, 0)
         .          .    520:	}
         .          .    521:
         .          .    522:	var totalPrice int
         .          .    523:	if err := db.QueryRow("SELECT IFNULL(SUM(e.price + s.price), 0) FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.user_id = ? AND r.canceled_at IS NULL", user.ID).Scan(&totalPrice); err != nil {
         .          .    524:		return err
         .          .    525:	}
         .          .    526:
         .       20ms    527:	rows, err = db.Query("SELECT event_id FROM reservations WHERE user_id = ? GROUP BY event_id ORDER BY MAX(IFNULL(canceled_at, reserved_at)) DESC LIMIT 5", user.ID)
         .          .    528:	if err != nil {
         .          .    529:		return err
         .          .    530:	}
         .          .    531:	defer rows.Close()
         .          .    532:
         .          .    533:	var recentEvents []*Event
         .          .    534:	for rows.Next() {
         .          .    535:		var eventID int64
         .          .    536:		if err := rows.Scan(&eventID); err != nil {
         .          .    537:			return err
         .          .    538:		}
         .      640ms    539:		event, err := getEvent(eventID, -1)
         .          .    540:		if err != nil {
         .          .    541:			return err
         .          .    542:		}
         .          .    543:		for k := range event.Sheets {
         .          .    544:			event.Sheets[k].Detail = nil
         .          .    545:		}
         .          .    546:		recentEvents = append(recentEvents, event)
         .          .    547:	}
         .          .    548:	if recentEvents == nil {
         .          .    549:		recentEvents = make([]*Event, 0)
         .          .    550:	}
         .          .    551:
         .       30ms    552:	return c.JSON(200, echo.Map{
         .          .    553:		"id":                  user.ID,
         .          .    554:		"nickname":            user.Nickname,
         .          .    555:		"recent_reservations": recentReservations,
         .          .    556:		"total_price":         totalPrice,
         .          .    557:		"recent_events":       recentEvents,
ROUTINE ======================== main.loginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.99s (flat, cum)  7.08% of Total
         .          .    195:	sess.Save(c.Request(), c.Response())
         .          .    196:}
         .          .    197:
         .          .    198:func loginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    199:	return func(c echo.Context) error {
         .      330ms    200:		if _, err := getLoginUser(c); err != nil {
         .          .    201:			return resError(c, "login_required", 401)
         .          .    202:		}
         .      2.66s    203:		return next(c)
         .          .    204:	}
         .          .    205:}
         .          .    206:
         .          .    207:func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    208:	return func(c echo.Context) error {
ROUTINE ======================== main.main in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      240ms (flat, cum)  0.57% of Total
         .          .   1041:	e.GET("/admin/api/events/:id", getAdminEventHandler, adminLoginRequired)
         .          .   1042:	e.POST("/admin/api/events/:id/actions/edit", postAdminEditEventHandler, adminLoginRequired)
         .          .   1043:	e.GET("/admin/api/reports/events/:id/sales", getAdminReportsEventHandler, adminLoginRequired)
         .          .   1044:	e.GET("/admin/api/reports/sales", getAdminReportsHandler, adminLoginRequired)
         .          .   1045:
         .      240ms   1046:	e.Start(":8080")
         .          .   1047:}
         .          .   1048:
         .          .   1049:type Report struct {
         .          .   1050:	ReservationID int64
         .          .   1051:	EventID       int64
ROUTINE ======================== main.main.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       90ms (flat, cum)  0.21% of Total
         .          .   1011:	}
         .          .   1012:
         .          .   1013:	e := echo.New()
         .          .   1014:	funcs := template.FuncMap{
         .          .   1015:		"encode_json": func(v interface{}) string {
         .       90ms   1016:			b, _ := json.Marshal(v)
         .          .   1017:			return string(b)
         .          .   1018:		},
         .          .   1019:	}
         .          .   1020:	e.Renderer = &Renderer{
         .          .   1021:		templates: template.Must(template.New("").Delims("[[", "]]").Funcs(funcs).ParseGlob("views/*.tmpl")),
ROUTINE ======================== main.postAdminEditEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       30ms (flat, cum) 0.071% of Total
         .          .    885:	c.Bind(&params)
         .          .    886:	if params.Closed {
         .          .    887:		params.Public = false
         .          .    888:	}
         .          .    889:
         .       20ms    890:	event, err := getEvent(eventID, -1)
         .          .    891:	if err != nil {
         .          .    892:		if err == sql.ErrNoRows {
         .          .    893:			return resError(c, "not_found", 404)
         .          .    894:		}
         .          .    895:		return err
         .          .    896:	}
         .          .    897:
         .          .    898:	if event.ClosedFg {
         .          .    899:		return resError(c, "cannot_edit_closed_event", 400)
         .          .    900:	} else if event.PublicFg && params.Closed {
         .          .    901:		return resError(c, "cannot_close_public_event", 400)
         .          .    902:	}
         .          .    903:
         .          .    904:	tx, err := db.Begin()
         .          .    905:	if err != nil {
         .          .    906:		return err
         .          .    907:	}
         .          .    908:	if _, err := tx.Exec("UPDATE events SET public_fg = ?, closed_fg = ? WHERE id = ?", params.Public, params.Closed, event.ID); err != nil {
         .          .    909:		tx.Rollback()
         .          .    910:		return err
         .          .    911:	}
         .          .    912:	if err := tx.Commit(); err != nil {
         .          .    913:		return err
         .          .    914:	}
         .          .    915:
         .       10ms    916:	e, err := getEvent(eventID, -1)
         .          .    917:	if err != nil {
         .          .    918:		return err
         .          .    919:	}
         .          .    920:	c.JSON(200, e)
         .          .    921:	return nil
ROUTINE ======================== main.postAdminLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       50ms (flat, cum)  0.12% of Total
         .          .    782:func postAdminLoginHandler(c echo.Context) error {
         .          .    783:	var params struct {
         .          .    784:		LoginName string `json:"login_name"`
         .          .    785:		Password  string `json:"password"`
         .          .    786:	}
         .       10ms    787:	c.Bind(&params)
         .          .    788:
         .          .    789:	administrator := new(Administrator)
         .       10ms    790:	if err := db.QueryRow("SELECT * FROM administrators WHERE login_name = ?", params.LoginName).Scan(&administrator.ID, &administrator.LoginName, &administrator.Nickname, &administrator.PassHash); err != nil {
         .          .    791:		if err == sql.ErrNoRows {
         .       10ms    792:			return resError(c, "authentication_failed", 401)
         .          .    793:		}
         .          .    794:		return err
         .          .    795:	}
         .          .    796:
         .          .    797:	var passHash string
         .          .    798:	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .    799:		return err
         .          .    800:	}
         .          .    801:	if administrator.PassHash != passHash {
         .          .    802:		return resError(c, "authentication_failed", 401)
         .          .    803:	}
         .          .    804:
         .       10ms    805:	sessSetAdministratorID(c, administrator.ID)
         .       10ms    806:	administrator, err := getLoginAdministrator(c)
         .          .    807:	if err != nil {
         .          .    808:		return err
         .          .    809:	}
         .          .    810:	return c.JSON(200, administrator)
         .          .    811:}
ROUTINE ======================== main.postLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms      600ms (flat, cum)  1.42% of Total
         .          .    562:func postLoginHandler(c echo.Context) error {
         .          .    563:	var params struct {
         .          .    564:		LoginName string `json:"login_name"`
         .          .    565:		Password  string `json:"password"`
         .          .    566:	}
         .       20ms    567:	c.Bind(&params)
         .          .    568:
         .          .    569:	user := new(User)
         .      250ms    570:	if err := db.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != nil {
         .          .    571:		if err == sql.ErrNoRows {
         .          .    572:			return resError(c, "authentication_failed", 401)
         .          .    573:		}
         .          .    574:		return err
         .          .    575:	}
         .          .    576:
         .          .    577:	var passHash string
         .       70ms    578:	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .    579:		return err
         .          .    580:	}
         .          .    581:	if user.PassHash != passHash {
         .          .    582:		return resError(c, "authentication_failed", 401)
         .          .    583:	}
         .          .    584:
         .       70ms    585:	sessSetUserID(c, user.ID)
      10ms      190ms    586:	user, err := getLoginUser(c)
         .          .    587:	if err != nil {
         .          .    588:		return err
         .          .    589:	}
         .          .    590:	return c.JSON(200, user)
         .          .    591:}
ROUTINE ======================== main.postReserveHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      940ms (flat, cum)  2.22% of Total
         .          .    633:		return resError(c, "not_found", 404)
         .          .    634:	}
         .          .    635:	var params struct {
         .          .    636:		Rank string `json:"sheet_rank"`
         .          .    637:	}
         .       40ms    638:	c.Bind(&params)
         .          .    639:
         .      100ms    640:	user, err := getLoginUser(c)
         .          .    641:	if err != nil {
         .          .    642:		return err
         .          .    643:	}
         .          .    644:
         .      570ms    645:	event, err := getEvent(eventID, user.ID)
         .          .    646:	if err != nil {
         .          .    647:		if err == sql.ErrNoRows {
         .          .    648:			return resError(c, "invalid_event", 404)
         .          .    649:		}
         .          .    650:		return err
         .          .    651:	} else if !event.PublicFg {
         .          .    652:		return resError(c, "invalid_event", 404)
         .          .    653:	}
         .          .    654:
         .       60ms    655:	if !validateRank(params.Rank) {
         .          .    656:		return resError(c, "invalid_rank", 400)
         .          .    657:	}
         .          .    658:
         .          .    659:	var sheet Sheet
         .          .    660:	var reservationID int64
         .          .    661:	for {
         .       10ms    662:		tx, err := db.Begin()
         .       80ms    663:		if err := tx.QueryRow("SELECT * FROM sheets WHERE id NOT IN (SELECT sheet_id FROM reservations WHERE event_id = ? AND canceled_at IS NULL FOR UPDATE) AND `rank` = ? ORDER BY RAND() LIMIT 1", event.ID, params.Rank).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .    664:			if err == sql.ErrNoRows {
         .          .    665:				return resError(c, "sold_out", 409)
         .          .    666:			}
         .          .    667:			return err
         .          .    668:		}
         .          .    669:
         .          .    670:		if err != nil {
         .          .    671:			return err
         .          .    672:		}
         .          .    673:
         .          .    674:		t := time.Now()
         .       70ms    675:		res, err := tx.Exec("INSERT INTO reservations (event_id, sheet_id, user_id, reserved_at) VALUES (?, ?, ?, ?)", event.ID, sheet.ID, user.ID, t.UTC().Format("2006-01-02 15:04:05.000000"))
         .          .    676:		if err != nil {
         .          .    677:			tx.Rollback()
         .          .    678:			log.Println("re-try: rollback by", err)
         .          .    679:			continue
         .          .    680:		}
         .          .    681:		reservationID, err = res.LastInsertId()
         .          .    682:		if err != nil {
         .          .    683:			tx.Rollback()
         .          .    684:			log.Println("re-try: rollback by", err)
         .          .    685:			continue
         .          .    686:		}
         .          .    687:
         .          .    688:		eventSheetCache.Set(event.ID, sheet.ID, EventSheetReservation{user.ID, t})
         .       10ms    689:		if err := tx.Commit(); err != nil {
         .          .    690:			tx.Rollback()
         .          .    691:			log.Println("re-try: rollback by", err)
         .          .    692:			continue
         .          .    693:		}
         .          .    694:		break
ROUTINE ======================== main.postUsersHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       40ms (flat, cum) 0.095% of Total
         .          .    433:		LoginName string `json:"login_name"`
         .          .    434:		Password  string `json:"password"`
         .          .    435:	}
         .          .    436:	c.Bind(&params)
         .          .    437:
         .       10ms    438:	tx, err := db.Begin()
         .          .    439:	if err != nil {
         .          .    440:		return err
         .          .    441:	}
         .          .    442:
         .          .    443:	var user User
         .       10ms    444:	if err := tx.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != sql.ErrNoRows {
         .          .    445:		tx.Rollback()
         .          .    446:		if err == nil {
         .          .    447:			return resError(c, "duplicated", 409)
         .          .    448:		}
         .          .    449:		return err
         .          .    450:	}
         .          .    451:
         .          .    452:	res, err := tx.Exec("INSERT INTO users (login_name, pass_hash, nickname) VALUES (?, SHA2(?, 256), ?)", params.LoginName, params.Password, params.Nickname)
         .          .    453:	if err != nil {
         .          .    454:		tx.Rollback()
         .          .    455:		return resError(c, "", 0)
         .          .    456:	}
         .          .    457:	userID, err := res.LastInsertId()
         .          .    458:	if err != nil {
         .          .    459:		tx.Rollback()
         .          .    460:		return resError(c, "", 0)
         .          .    461:	}
         .       20ms    462:	if err := tx.Commit(); err != nil {
         .          .    463:		return err
         .          .    464:	}
         .          .    465:
         .          .    466:	return c.JSON(201, echo.Map{
         .          .    467:		"id":       userID,
ROUTINE ======================== main.renderReportCSV in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      50ms      4.78s (flat, cum) 11.31% of Total
         .          .   1056:	CanceledAt    string
         .          .   1057:	Price         int64
         .          .   1058:}
         .          .   1059:
         .          .   1060:func renderReportCSV(c echo.Context, reports []Report) error {
         .      1.12s   1061:	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .   1062:
         .          .   1063:	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
      10ms       80ms   1064:	for _, v := range reports {
      20ms      2.53s   1065:		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
      20ms      1.01s   1066:			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
         .          .   1067:	}
         .          .   1068:
         .          .   1069:	c.Response().Header().Set("Content-Type", `text/csv; charset=UTF-8`)
         .          .   1070:	c.Response().Header().Set("Content-Disposition", `attachment; filename="report.csv"`)
         .       40ms   1071:	_, err := io.Copy(c.Response(), body)
         .          .   1072:	return err
         .          .   1073:}
         .          .   1074:
         .          .   1075:func resError(c echo.Context, e string, status int) error {
         .          .   1076:	if e == "" {
ROUTINE ======================== main.renderReportCSV.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     220ms      220ms (flat, cum)  0.52% of Total
         .          .   1056:	CanceledAt    string
         .          .   1057:	Price         int64
         .          .   1058:}
         .          .   1059:
         .          .   1060:func renderReportCSV(c echo.Context, reports []Report) error {
     220ms      220ms   1061:	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .   1062:
         .          .   1063:	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .          .   1064:	for _, v := range reports {
         .          .   1065:		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
         .          .   1066:			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
ROUTINE ======================== main.renderReportCSV.func1 in /home/isucon/local/go/src/strings/compare.go
      90ms      720ms (flat, cum)  1.70% of Total
         .          .     16:	// using strings.Compare. Basically no one should use strings.Compare.
         .          .     17:	// As the comment above says, it is here only for symmetry with package bytes.
         .          .     18:	// If performance is important, the compiler should be changed to recognize
         .          .     19:	// the pattern so that all code doing three-way comparisons, not just code
         .          .     20:	// using strings.Compare, can benefit.
      20ms      370ms     21:	if a == b {
         .          .     22:		return 0
         .          .     23:	}
      70ms      350ms     24:	if a < b {
         .          .     25:		return -1
         .          .     26:	}
         .          .     27:	return +1
         .          .     28:}
ROUTINE ======================== main.resError in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.024% of Total
         .          .   1077:		e = "unknown"
         .          .   1078:	}
         .          .   1079:	if status < 100 {
         .          .   1080:		status = 500
         .          .   1081:	}
         .       10ms   1082:	return c.JSON(status, map[string]string{"error": e})
         .          .   1083:}
ROUTINE ======================== main.sessAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       40ms (flat, cum) 0.095% of Total
         .          .    163:	delete(sess.Values, "user_id")
         .          .    164:	sess.Save(c.Request(), c.Response())
         .          .    165:}
         .          .    166:
         .          .    167:func sessAdministratorID(c echo.Context) int64 {
         .       40ms    168:	sess, _ := session.Get("session", c)
         .          .    169:	var administratorID int64
         .          .    170:	if x, ok := sess.Values["administrator_id"]; ok {
         .          .    171:		administratorID, _ = x.(int64)
         .          .    172:	}
         .          .    173:	return administratorID
ROUTINE ======================== main.sessSetAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.024% of Total
         .          .    178:	sess.Options = &sessions.Options{
         .          .    179:		Path:     "/",
         .          .    180:		MaxAge:   3600,
         .          .    181:		HttpOnly: true,
         .          .    182:	}
         .       10ms    183:	sess.Values["administrator_id"] = id
         .          .    184:	sess.Save(c.Request(), c.Response())
         .          .    185:}
         .          .    186:
         .          .    187:func sessDeleteAdministratorID(c echo.Context) {
         .          .    188:	sess, _ := session.Get("session", c)
ROUTINE ======================== main.sessSetUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       70ms (flat, cum)  0.17% of Total
         .          .    141:	}
         .          .    142:	return userID
         .          .    143:}
         .          .    144:
         .          .    145:func sessSetUserID(c echo.Context, id int64) {
         .       10ms    146:	sess, _ := session.Get("session", c)
         .          .    147:	sess.Options = &sessions.Options{
         .          .    148:		Path:     "/",
         .          .    149:		MaxAge:   3600,
         .          .    150:		HttpOnly: true,
         .          .    151:	}
         .          .    152:	sess.Values["user_id"] = id
         .       60ms    153:	sess.Save(c.Request(), c.Response())
         .          .    154:}
         .          .    155:
         .          .    156:func sessDeleteUserID(c echo.Context) {
         .          .    157:	sess, _ := session.Get("session", c)
         .          .    158:	sess.Options = &sessions.Options{
ROUTINE ======================== main.sessUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      280ms (flat, cum)  0.66% of Total
         .          .    132:}
         .          .    133:
         .          .    134:var eventSheetCache EventSheetReservationCache
         .          .    135:
         .          .    136:func sessUserID(c echo.Context) int64 {
         .      270ms    137:	sess, _ := session.Get("session", c)
         .          .    138:	var userID int64
         .       10ms    139:	if x, ok := sess.Values["user_id"]; ok {
         .          .    140:		userID, _ = x.(int64)
         .          .    141:	}
         .          .    142:	return userID
         .          .    143:}
         .          .    144:
ROUTINE ======================== main.validateRank in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      100ms (flat, cum)  0.24% of Total
         .          .    330:	}
         .          .    331:}
         .          .    332:
         .          .    333:func validateRank(rank string) bool {
         .          .    334:	var count int
         .      100ms    335:	db.QueryRow("SELECT COUNT(*) FROM sheets WHERE `rank` = ?", rank).Scan(&count)
         .          .    336:	return count > 0
         .          .    337:}
         .          .    338:
         .          .    339:type Renderer struct {
         .          .    340:	templates *template.Template
ROUTINE ======================== runtime.main in /home/isucon/local/go/src/runtime/proc.go
         0      240ms (flat, cum)  0.57% of Total
         .          .    193:		// A program compiled with -buildmode=c-archive or c-shared
         .          .    194:		// has a main, but it is not executed.
         .          .    195:		return
         .          .    196:	}
         .          .    197:	fn = main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .      240ms    198:	fn()
         .          .    199:	if raceenabled {
         .          .    200:		racefini()
         .          .    201:	}
         .          .    202:
         .          .    203:	// Make racy client program work: if panicking on
