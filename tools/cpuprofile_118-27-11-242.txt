Total: 43.44s
ROUTINE ======================== main.(*EventSheetReservationCache).Get in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     780ms      5.86s (flat, cum) 13.49% of Total
         .          .    105:	return EventSheetReservationCache{
         .          .    106:		cache: make(map[EventSheetKey]EventSheetReservation),
         .          .    107:	}
         .          .    108:}
         .          .    109:
      30ms       30ms    110:func (c *EventSheetReservationCache) Get(eventId int64, sheetId int64) *EventSheetReservation {
         .          .    111:	key := EventSheetKey{eventId, sheetId}
     210ms      680ms    112:	c.mu.RLock()
      40ms      640ms    113:	defer c.mu.RUnlock()
     480ms      3.47s    114:	if v, ok := c.cache[key]; ok {
         .      270ms    115:		return &v
         .          .    116:	}
      20ms      770ms    117:	return nil
         .          .    118:}
         .          .    119:
         .          .    120:func (c *EventSheetReservationCache) Set(eventId int64, sheetId int64, reservation EventSheetReservation) {
         .          .    121:	key := EventSheetKey{eventId, sheetId}
         .          .    122:	c.mu.Lock()
ROUTINE ======================== main.(*Renderer).Render in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      410ms (flat, cum)  0.94% of Total
         .          .    342:type Renderer struct {
         .          .    343:	templates *template.Template
         .          .    344:}
         .          .    345:
         .          .    346:func (r *Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
         .      410ms    347:	return r.templates.ExecuteTemplate(w, name, data)
         .          .    348:}
         .          .    349:
         .          .    350:func getIndexHandler(c echo.Context) error {
         .          .    351:	events, err := getEvents(false)
         .          .    352:	if err != nil {
ROUTINE ======================== main.adminLoginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0     20.54s (flat, cum) 47.28% of Total
         .          .    204:	}
         .          .    205:}
         .          .    206:
         .          .    207:func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    208:	return func(c echo.Context) error {
         .       40ms    209:		if _, err := getLoginAdministrator(c); err != nil {
         .          .    210:			return resError(c, "admin_login_required", 401)
         .          .    211:		}
         .     20.50s    212:		return next(c)
         .          .    213:	}
         .          .    214:}
         .          .    215:
         .          .    216:func getLoginUser(c echo.Context) (*User, error) {
         .          .    217:	userID := sessUserID(c)
ROUTINE ======================== main.deleteReservationHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      510ms (flat, cum)  1.17% of Total
         .          .    708:		return resError(c, "not_found", 404)
         .          .    709:	}
         .          .    710:	rank := c.Param("rank")
         .          .    711:	num := c.Param("num")
         .          .    712:
         .       30ms    713:	user, err := getLoginUser(c)
         .          .    714:	if err != nil {
         .          .    715:		return err
         .          .    716:	}
         .          .    717:
         .      330ms    718:	event, err := getEvent(eventID, user.ID)
         .          .    719:	if err != nil {
         .          .    720:		if err == sql.ErrNoRows {
         .          .    721:			return resError(c, "invalid_event", 404)
         .          .    722:		}
         .          .    723:		return err
         .          .    724:	} else if !event.PublicFg {
         .          .    725:		return resError(c, "invalid_event", 404)
         .          .    726:	}
         .          .    727:
         .       70ms    728:	if !validateRank(rank) {
         .          .    729:		return resError(c, "invalid_rank", 404)
         .          .    730:	}
         .          .    731:
         .       10ms    732:	var sheet Sheet
         .       30ms    733:	if err := db.QueryRow("SELECT * FROM sheets WHERE `rank` = ? AND num = ?", rank, num).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .    734:		if err == sql.ErrNoRows {
         .          .    735:			return resError(c, "invalid_sheet", 404)
         .          .    736:		}
         .          .    737:		return err
         .          .    738:	}
         .          .    739:
         .       20ms    740:	tx, err := db.Begin()
         .          .    741:	if err != nil {
         .          .    742:		return err
         .          .    743:	}
         .          .    744:
         .          .    745:	var reservation Reservation
         .       10ms    746:	if err := tx.QueryRow("SELECT * FROM reservations WHERE event_id = ? AND sheet_id = ? AND canceled_at IS NULL GROUP BY event_id HAVING reserved_at = MIN(reserved_at) FOR UPDATE", event.ID, sheet.ID).Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt); err != nil {
         .          .    747:		tx.Rollback()
         .          .    748:		if err == sql.ErrNoRows {
         .          .    749:			return resError(c, "not_reserved", 400)
         .          .    750:		}
         .          .    751:		return err
         .          .    752:	}
         .          .    753:	if reservation.UserID != user.ID {
         .          .    754:		tx.Rollback()
         .          .    755:		return resError(c, "not_permitted", 403)
         .          .    756:	}
         .          .    757:
         .       10ms    758:	if _, err := tx.Exec("UPDATE reservations SET canceled_at = ? WHERE id = ?", time.Now().UTC().Format("2006-01-02 15:04:05.000000"), reservation.ID); err != nil {
         .          .    759:		tx.Rollback()
         .          .    760:		return err
         .          .    761:	}
         .          .    762:	eventSheetCache.Delete(reservation.EventID, reservation.SheetID)
         .          .    763:	if err := tx.Commit(); err != nil {
ROUTINE ======================== main.fillinAdministrator.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.64s (flat, cum)  3.78% of Total
         .          .    324:	}
         .          .    325:}
         .          .    326:
         .          .    327:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    328:	return func(c echo.Context) error {
         .       20ms    329:		if administrator, err := getLoginAdministrator(c); err == nil {
         .          .    330:			c.Set("administrator", administrator)
         .          .    331:		}
         .      1.62s    332:		return next(c)
         .          .    333:	}
         .          .    334:}
         .          .    335:
         .          .    336:func validateRank(rank string) bool {
         .          .    337:	var count int
ROUTINE ======================== main.fillinUser.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      9.63s (flat, cum) 22.17% of Total
         .          .    315:	return &sanitized
         .          .    316:}
         .          .    317:
         .          .    318:func fillinUser(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    319:	return func(c echo.Context) error {
         .       10ms    320:		if user, err := getLoginUser(c); err == nil {
         .          .    321:			c.Set("user", user)
         .          .    322:		}
         .      9.62s    323:		return next(c)
         .          .    324:	}
         .          .    325:}
         .          .    326:
         .          .    327:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    328:	return func(c echo.Context) error {
ROUTINE ======================== main.getAdminEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       50ms (flat, cum)  0.12% of Total
         .          .    865:func getAdminEventHandler(c echo.Context) error {
         .          .    866:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    867:	if err != nil {
         .          .    868:		return resError(c, "not_found", 404)
         .          .    869:	}
         .       20ms    870:	event, err := getEvent(eventID, -1)
         .          .    871:	if err != nil {
         .          .    872:		if err == sql.ErrNoRows {
         .          .    873:			return resError(c, "not_found", 404)
         .          .    874:		}
         .          .    875:		return err
         .          .    876:	}
         .       30ms    877:	return c.JSON(200, event)
         .          .    878:}
         .          .    879:
         .          .    880:func postAdminEditEventHandler(c echo.Context) error {
         .          .    881:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    882:	if err != nil {
ROUTINE ======================== main.getAdminHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.62s (flat, cum)  3.73% of Total
         .          .    770:	var events []*Event
         .          .    771:	administrator := c.Get("administrator")
         .          .    772:	log.Printf("getAdminHandler: %q", administrator)
         .          .    773:	if administrator != nil {
         .          .    774:		var err error
         .      1.60s    775:		if events, err = getEvents(true); err != nil {
         .          .    776:			log.Printf("getEvents: %v", err)
         .          .    777:			return err
         .          .    778:		}
         .          .    779:	}
         .       20ms    780:	return c.Render(200, "admin.tmpl", echo.Map{
         .          .    781:		"events":        events,
         .          .    782:		"administrator": administrator,
         .          .    783:		"origin":        c.Scheme() + "://" + c.Request().Host,
         .          .    784:	})
         .          .    785:}
ROUTINE ======================== main.getAdminReportsEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms      1.03s (flat, cum)  2.37% of Total
         .          .    931:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    932:	if err != nil {
         .          .    933:		return resError(c, "not_found", 404)
         .          .    934:	}
         .          .    935:
         .       50ms    936:	event, err := getEvent(eventID, -1)
         .          .    937:	if err != nil {
         .          .    938:		return err
         .          .    939:	}
         .          .    940:
         .       10ms    941:	rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num, s.price AS sheet_price, e.price AS event_price FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.event_id = ? ORDER BY reserved_at ASC FOR UPDATE", event.ID)
         .          .    942:	if err != nil {
         .          .    943:		return err
         .          .    944:	}
         .          .    945:	defer rows.Close()
         .          .    946:
         .          .    947:	var reports []Report
      10ms      150ms    948:	for rows.Next() {
         .       50ms    949:		var reservation Reservation
         .       20ms    950:		var sheet Sheet
         .      270ms    951:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.Price); err != nil {
         .          .    952:			return err
         .          .    953:		}
         .          .    954:		report := Report{
         .          .    955:			ReservationID: reservation.ID,
         .          .    956:			EventID:       event.ID,
         .          .    957:			Rank:          sheet.Rank,
         .          .    958:			Num:           sheet.Num,
         .          .    959:			UserID:        reservation.UserID,
         .       80ms    960:			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .    961:			Price:         event.Price + sheet.Price,
         .          .    962:		}
         .          .    963:		if reservation.CanceledAt != nil {
         .       70ms    964:			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .    965:		}
         .       70ms    966:		reports = append(reports, report)
         .          .    967:	}
         .      260ms    968:	return renderReportCSV(c, reports)
         .          .    969:}
         .          .    970:
         .          .    971:func getAdminReportsHandler(c echo.Context) error {
         .          .    972:	rows, err := db.Query("select r.*, s.rank as sheet_rank, s.num as sheet_num, s.price as sheet_price, e.id as event_id, e.price as event_price from reservations r inner join sheets s on s.id = r.sheet_id inner join events e on e.id = r.event_id order by reserved_at asc for update")
         .          .    973:	if err != nil {
ROUTINE ======================== main.getAdminReportsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     170ms     19.35s (flat, cum) 44.54% of Total
         .          .    974:		return err
         .          .    975:	}
         .          .    976:	defer rows.Close()
         .          .    977:
         .          .    978:	var reports []Report
      10ms      5.81s    979:	for rows.Next() {
         .      270ms    980:		var reservation Reservation
         .      190ms    981:		var sheet Sheet
      10ms      130ms    982:		var event Event
      90ms      4.99s    983:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.ID, &event.Price); err != nil {
         .          .    984:			return err
         .          .    985:		}
         .       10ms    986:		report := Report{
         .          .    987:			ReservationID: reservation.ID,
         .          .    988:			EventID:       event.ID,
         .          .    989:			Rank:          sheet.Rank,
         .          .    990:			Num:           sheet.Num,
         .          .    991:			UserID:        reservation.UserID,
      30ms      1.35s    992:			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .    993:			Price:         event.Price + sheet.Price,
         .          .    994:		}
      10ms       10ms    995:		if reservation.CanceledAt != nil {
      20ms      1.21s    996:			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .    997:		}
         .      1.04s    998:		reports = append(reports, report)
         .          .    999:	}
         .      4.34s   1000:	return renderReportCSV(c, reports)
         .          .   1001:}
         .          .   1002:
         .          .   1003:var db *sql.DB
         .          .   1004:
         .          .   1005:func main() {
ROUTINE ======================== main.getEvent in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     890ms     13.54s (flat, cum) 31.17% of Total
         .          .    273:	return events, nil
         .          .    274:}
         .          .    275:
         .          .    276:func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .    277:	var event Event
         .      1.36s    278:	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .    279:		return nil, err
         .          .    280:	}
         .       10ms    281:	event.Sheets = map[string]*Sheets{
         .       20ms    282:		"S": &Sheets{},
         .       10ms    283:		"A": &Sheets{},
         .       10ms    284:		"B": &Sheets{},
      10ms       10ms    285:		"C": &Sheets{},
         .          .    286:	}
         .          .    287:
      70ms      240ms    288:	for _, sheet := range allSheets {
      40ms      1.67s    289:		sheet := sheet
      80ms      990ms    290:		event.Sheets[sheet.Rank].Price = event.Price + sheet.Price
      20ms       20ms    291:		event.Total++
     140ms      710ms    292:		event.Sheets[sheet.Rank].Total++
         .          .    293:
      20ms      5.88s    294:		reservation := eventSheetCache.Get(event.ID, sheet.ID)
         .          .    295:		if reservation != nil {
         .          .    296:			sheet.Mine = reservation.UserID == loginUserID
         .          .    297:			sheet.Reserved = true
      10ms       10ms    298:			sheet.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .    299:		} else {
         .          .    300:			event.Remains++
      80ms      520ms    301:			event.Sheets[sheet.Rank].Remains++
         .          .    302:		}
         .          .    303:
     420ms      2.08s    304:		event.Sheets[sheet.Rank].Detail = append(event.Sheets[sheet.Rank].Detail, &sheet)
         .          .    305:	}
         .          .    306:
         .          .    307:	return &event, nil
         .          .    308:}
         .          .    309:
ROUTINE ======================== main.getEvent in /home/isucon/local/go/src/time/time.go
      10ms       10ms (flat, cum) 0.023% of Total
         .          .    156:// sec returns the time's seconds since Jan 1 year 1.
         .          .    157:func (t *Time) sec() int64 {
         .          .    158:	if t.wall&hasMonotonic != 0 {
         .          .    159:		return wallToInternal + int64(t.wall<<1>>(nsecShift+1))
         .          .    160:	}
      10ms       10ms    161:	return int64(t.ext)
         .          .    162:}
         .          .    163:
         .          .    164:// unixSec returns the time's seconds since Jan 1 1970 (Unix time).
         .          .    165:func (t *Time) unixSec() int64 { return t.sec() + internalToUnix }
         .          .    166:
ROUTINE ======================== main.getEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.66s (flat, cum)  3.82% of Total
         .          .    613:	if err != nil {
         .          .    614:		return resError(c, "not_found", 404)
         .          .    615:	}
         .          .    616:
         .          .    617:	loginUserID := int64(-1)
         .      260ms    618:	if user, err := getLoginUser(c); err == nil {
         .          .    619:		loginUserID = user.ID
         .          .    620:	}
         .          .    621:
         .      740ms    622:	event, err := getEvent(eventID, loginUserID)
         .          .    623:	if err != nil {
         .          .    624:		if err == sql.ErrNoRows {
         .          .    625:			return resError(c, "not_found", 404)
         .          .    626:		}
         .          .    627:		return err
         .          .    628:	} else if !event.PublicFg {
         .          .    629:		return resError(c, "not_found", 404)
         .          .    630:	}
         .      660ms    631:	return c.JSON(200, sanitizeEvent(event))
         .          .    632:}
         .          .    633:func postReserveHandler(c echo.Context) error {
         .          .    634:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    635:	if err != nil {
         .          .    636:		return resError(c, "not_found", 404)
ROUTINE ======================== main.getEvents in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms     10.77s (flat, cum) 24.79% of Total
         .          .    235:	}
         .          .    236:	return &administrator, err
         .          .    237:}
         .          .    238:
         .          .    239:func getEvents(all bool) ([]*Event, error) {
         .       50ms    240:	tx, err := db.Begin()
         .          .    241:	if err != nil {
         .          .    242:		return nil, err
         .          .    243:	}
         .          .    244:	defer tx.Commit()
         .          .    245:
         .       40ms    246:	rows, err := tx.Query("SELECT * FROM events ORDER BY id ASC")
         .          .    247:	if err != nil {
         .          .    248:		return nil, err
         .          .    249:	}
         .          .    250:	defer rows.Close()
         .          .    251:
         .          .    252:	var events []*Event
      10ms       20ms    253:	for rows.Next() {
         .          .    254:		var event Event
         .       20ms    255:		if err := rows.Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .    256:			return nil, err
         .          .    257:		}
         .          .    258:		if !all && !event.PublicFg {
         .          .    259:			continue
         .          .    260:		}
         .          .    261:		events = append(events, &event)
         .          .    262:	}
         .          .    263:	for i, v := range events {
         .     10.60s    264:		event, err := getEvent(v.ID, -1)
         .          .    265:		if err != nil {
         .          .    266:			return nil, err
         .          .    267:		}
         .          .    268:		for k := range event.Sheets {
         .          .    269:			event.Sheets[k].Detail = nil
         .          .    270:		}
         .          .    271:		events[i] = event
         .          .    272:	}
         .       40ms    273:	return events, nil
         .          .    274:}
         .          .    275:
         .          .    276:func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .    277:	var event Event
         .          .    278:	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
ROUTINE ======================== main.getIndexHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms      9.62s (flat, cum) 22.15% of Total
         .          .    306:
         .          .    307:	return &event, nil
         .          .    308:}
         .          .    309:
         .          .    310:func sanitizeEvent(e *Event) *Event {
      10ms       10ms    311:	sanitized := *e
         .          .    312:	sanitized.Price = 0
         .          .    313:	sanitized.PublicFg = false
         .          .    314:	sanitized.ClosedFg = false
         .          .    315:	return &sanitized
         .          .    316:}
         .          .    317:
         .          .    318:func fillinUser(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    319:	return func(c echo.Context) error {
         .          .    320:		if user, err := getLoginUser(c); err == nil {
         .          .    321:			c.Set("user", user)
         .          .    322:		}
         .          .    323:		return next(c)
         .          .    324:	}
         .          .    325:}
         .          .    326:
         .          .    327:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    328:	return func(c echo.Context) error {
         .          .    329:		if administrator, err := getLoginAdministrator(c); err == nil {
         .          .    330:			c.Set("administrator", administrator)
         .          .    331:		}
         .          .    332:		return next(c)
         .          .    333:	}
         .          .    334:}
         .          .    335:
         .          .    336:func validateRank(rank string) bool {
         .          .    337:	var count int
         .          .    338:	db.QueryRow("SELECT COUNT(*) FROM sheets WHERE `rank` = ?", rank).Scan(&count)
         .          .    339:	return count > 0
         .          .    340:}
         .          .    341:
         .          .    342:type Renderer struct {
         .          .    343:	templates *template.Template
         .          .    344:}
         .          .    345:
         .          .    346:func (r *Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
         .          .    347:	return r.templates.ExecuteTemplate(w, name, data)
         .          .    348:}
         .          .    349:
         .          .    350:func getIndexHandler(c echo.Context) error {
         .      9.17s    351:	events, err := getEvents(false)
         .          .    352:	if err != nil {
         .          .    353:		return err
         .          .    354:	}
         .          .    355:	for i, v := range events {
         .          .    356:		events[i] = sanitizeEvent(v)
         .          .    357:	}
         .      430ms    358:	return c.Render(200, "index.tmpl", echo.Map{
         .          .    359:		"events": events,
         .          .    360:		"user":   c.Get("user"),
         .       10ms    361:		"origin": c.Scheme() + "://" + c.Request().Host,
         .          .    362:	})
         .          .    363:}
         .          .    364:
         .          .    365:var allSheets []Sheet
         .          .    366:
ROUTINE ======================== main.getLoginAdministrator in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       60ms (flat, cum)  0.14% of Total
         .          .    222:	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .    223:	return &user, err
         .          .    224:}
         .          .    225:
         .          .    226:func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .       40ms    227:	administratorID := sessAdministratorID(c)
         .          .    228:	if administratorID == 0 {
         .          .    229:		return nil, errors.New("not logged in")
         .          .    230:	}
         .          .    231:	var administrator Administrator
         .       20ms    232:	err := db.QueryRow("SELECT id, nickname FROM administrators WHERE id = ?", administratorID).Scan(&administrator.ID, &administrator.Nickname)
         .          .    233:	if err != nil {
         .          .    234:		log.Fatal("db.QueryRow:", err)
         .          .    235:	}
         .          .    236:	return &administrator, err
         .          .    237:}
ROUTINE ======================== main.getLoginUser in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      760ms (flat, cum)  1.75% of Total
         .          .    212:		return next(c)
         .          .    213:	}
         .          .    214:}
         .          .    215:
         .          .    216:func getLoginUser(c echo.Context) (*User, error) {
         .      320ms    217:	userID := sessUserID(c)
         .          .    218:	if userID == 0 {
         .          .    219:		return nil, errors.New("not logged in")
         .          .    220:	}
         .          .    221:	var user User
         .      440ms    222:	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .    223:	return &user, err
         .          .    224:}
         .          .    225:
         .          .    226:func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .          .    227:	administratorID := sessAdministratorID(c)
ROUTINE ======================== main.getUserHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.06s (flat, cum)  2.44% of Total
         .          .    471:		"nickname": params.Nickname,
         .          .    472:	})
         .          .    473:}
         .          .    474:func getUserHandler(c echo.Context) error {
         .          .    475:	var user User
         .       10ms    476:	if err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", c.Param("id")).Scan(&user.ID, &user.Nickname); err != nil {
         .          .    477:		return err
         .          .    478:	}
         .          .    479:
         .          .    480:	loginUser, err := getLoginUser(c)
         .          .    481:	if err != nil {
         .          .    482:		return err
         .          .    483:	}
         .          .    484:	if user.ID != loginUser.ID {
         .          .    485:		return resError(c, "forbidden", 403)
         .          .    486:	}
         .          .    487:
         .          .    488:	rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id WHERE r.user_id = ? ORDER BY IFNULL(r.canceled_at, r.reserved_at) DESC LIMIT 5", user.ID)
         .          .    489:	if err != nil {
         .          .    490:		return err
         .          .    491:	}
         .          .    492:	defer rows.Close()
         .          .    493:
         .          .    494:	var recentReservations []Reservation
         .       10ms    495:	for rows.Next() {
         .          .    496:		var reservation Reservation
         .          .    497:		var sheet Sheet
         .          .    498:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num); err != nil {
         .          .    499:			return err
         .          .    500:		}
         .          .    501:
         .      550ms    502:		event, err := getEvent(reservation.EventID, -1)
         .          .    503:		if err != nil {
         .          .    504:			return err
         .          .    505:		}
         .          .    506:		price := event.Sheets[sheet.Rank].Price
         .          .    507:		event.Sheets = nil
         .          .    508:		event.Total = 0
         .          .    509:		event.Remains = 0
         .          .    510:
         .          .    511:		reservation.Event = event
         .          .    512:		reservation.SheetRank = sheet.Rank
         .          .    513:		reservation.SheetNum = sheet.Num
         .          .    514:		reservation.Price = price
         .          .    515:		reservation.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .    516:		if reservation.CanceledAt != nil {
         .          .    517:			reservation.CanceledAtUnix = reservation.CanceledAt.Unix()
         .          .    518:		}
         .          .    519:		recentReservations = append(recentReservations, reservation)
         .          .    520:	}
         .          .    521:	if recentReservations == nil {
         .          .    522:		recentReservations = make([]Reservation, 0)
         .          .    523:	}
         .          .    524:
         .          .    525:	var totalPrice int
         .       10ms    526:	if err := db.QueryRow("SELECT IFNULL(SUM(e.price + s.price), 0) FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.user_id = ? AND r.canceled_at IS NULL", user.ID).Scan(&totalPrice); err != nil {
         .          .    527:		return err
         .          .    528:	}
         .          .    529:
         .          .    530:	rows, err = db.Query("SELECT event_id FROM reservations WHERE user_id = ? GROUP BY event_id ORDER BY MAX(IFNULL(canceled_at, reserved_at)) DESC LIMIT 5", user.ID)
         .          .    531:	if err != nil {
         .          .    532:		return err
         .          .    533:	}
         .          .    534:	defer rows.Close()
         .          .    535:
         .          .    536:	var recentEvents []*Event
         .       30ms    537:	for rows.Next() {
         .          .    538:		var eventID int64
         .       10ms    539:		if err := rows.Scan(&eventID); err != nil {
         .          .    540:			return err
         .          .    541:		}
         .      420ms    542:		event, err := getEvent(eventID, -1)
         .          .    543:		if err != nil {
         .          .    544:			return err
         .          .    545:		}
         .          .    546:		for k := range event.Sheets {
         .          .    547:			event.Sheets[k].Detail = nil
         .          .    548:		}
         .          .    549:		recentEvents = append(recentEvents, event)
         .          .    550:	}
         .          .    551:	if recentEvents == nil {
         .          .    552:		recentEvents = make([]*Event, 0)
         .          .    553:	}
         .          .    554:
         .       20ms    555:	return c.JSON(200, echo.Map{
         .          .    556:		"id":                  user.ID,
         .          .    557:		"nickname":            user.Nickname,
         .          .    558:		"recent_reservations": recentReservations,
         .          .    559:		"total_price":         totalPrice,
         .          .    560:		"recent_events":       recentEvents,
ROUTINE ======================== main.loginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      3.02s (flat, cum)  6.95% of Total
         .          .    195:	sess.Save(c.Request(), c.Response())
         .          .    196:}
         .          .    197:
         .          .    198:func loginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    199:	return func(c echo.Context) error {
         .      280ms    200:		if _, err := getLoginUser(c); err != nil {
         .          .    201:			return resError(c, "login_required", 401)
         .          .    202:		}
         .      2.74s    203:		return next(c)
         .          .    204:	}
         .          .    205:}
         .          .    206:
         .          .    207:func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    208:	return func(c echo.Context) error {
ROUTINE ======================== main.main in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      110ms (flat, cum)  0.25% of Total
         .          .   1046:	e.GET("/admin/api/events/:id", getAdminEventHandler, adminLoginRequired)
         .          .   1047:	e.POST("/admin/api/events/:id/actions/edit", postAdminEditEventHandler, adminLoginRequired)
         .          .   1048:	e.GET("/admin/api/reports/events/:id/sales", getAdminReportsEventHandler, adminLoginRequired)
         .          .   1049:	e.GET("/admin/api/reports/sales", getAdminReportsHandler, adminLoginRequired)
         .          .   1050:
         .      110ms   1051:	e.Start(":8080")
         .          .   1052:}
         .          .   1053:
         .          .   1054:type Report struct {
         .          .   1055:	ReservationID int64
         .          .   1056:	EventID       int64
ROUTINE ======================== main.main.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      160ms (flat, cum)  0.37% of Total
         .          .   1016:	}
         .          .   1017:
         .          .   1018:	e := echo.New()
         .          .   1019:	funcs := template.FuncMap{
         .          .   1020:		"encode_json": func(v interface{}) string {
         .      160ms   1021:			b, _ := json.Marshal(v)
         .          .   1022:			return string(b)
         .          .   1023:		},
         .          .   1024:	}
         .          .   1025:	e.Renderer = &Renderer{
         .          .   1026:		templates: template.Must(template.New("").Delims("[[", "]]").Funcs(funcs).ParseGlob("views/*.tmpl")),
ROUTINE ======================== main.postAdminEditEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       40ms (flat, cum) 0.092% of Total
         .          .    890:	c.Bind(&params)
         .          .    891:	if params.Closed {
         .          .    892:		params.Public = false
         .          .    893:	}
         .          .    894:
         .       10ms    895:	event, err := getEvent(eventID, -1)
         .          .    896:	if err != nil {
         .          .    897:		if err == sql.ErrNoRows {
         .          .    898:			return resError(c, "not_found", 404)
         .          .    899:		}
         .          .    900:		return err
         .          .    901:	}
         .          .    902:
         .          .    903:	if event.ClosedFg {
         .          .    904:		return resError(c, "cannot_edit_closed_event", 400)
         .          .    905:	} else if event.PublicFg && params.Closed {
         .          .    906:		return resError(c, "cannot_close_public_event", 400)
         .          .    907:	}
         .          .    908:
         .          .    909:	tx, err := db.Begin()
         .          .    910:	if err != nil {
         .          .    911:		return err
         .          .    912:	}
         .          .    913:	if _, err := tx.Exec("UPDATE events SET public_fg = ?, closed_fg = ? WHERE id = ?", params.Public, params.Closed, event.ID); err != nil {
         .          .    914:		tx.Rollback()
         .          .    915:		return err
         .          .    916:	}
         .          .    917:	if err := tx.Commit(); err != nil {
         .          .    918:		return err
         .          .    919:	}
         .          .    920:
         .       30ms    921:	e, err := getEvent(eventID, -1)
         .          .    922:	if err != nil {
         .          .    923:		return err
         .          .    924:	}
         .          .    925:	c.JSON(200, e)
         .          .    926:	return nil
ROUTINE ======================== main.postAdminEventsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       30ms (flat, cum) 0.069% of Total
         .          .    839:	tx, err := db.Begin()
         .          .    840:	if err != nil {
         .          .    841:		return err
         .          .    842:	}
         .          .    843:
         .       10ms    844:	res, err := tx.Exec("INSERT INTO events (title, public_fg, closed_fg, price) VALUES (?, ?, 0, ?)", params.Title, params.Public, params.Price)
         .          .    845:	if err != nil {
         .          .    846:		tx.Rollback()
         .          .    847:		return err
         .          .    848:	}
         .          .    849:	eventID, err := res.LastInsertId()
         .          .    850:	if err != nil {
         .          .    851:		tx.Rollback()
         .          .    852:		return err
         .          .    853:	}
         .          .    854:	if err := tx.Commit(); err != nil {
         .          .    855:		return err
         .          .    856:	}
         .          .    857:
         .       20ms    858:	event, err := getEvent(eventID, -1)
         .          .    859:	if err != nil {
         .          .    860:		return err
         .          .    861:	}
         .          .    862:	return c.JSON(200, event)
         .          .    863:}
ROUTINE ======================== main.postAdminLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       30ms (flat, cum) 0.069% of Total
         .          .    798:		}
         .          .    799:		return err
         .          .    800:	}
         .          .    801:
         .          .    802:	var passHash string
         .       20ms    803:	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .    804:		return err
         .          .    805:	}
         .          .    806:	if administrator.PassHash != passHash {
         .          .    807:		return resError(c, "authentication_failed", 401)
         .          .    808:	}
         .          .    809:
         .       10ms    810:	sessSetAdministratorID(c, administrator.ID)
         .          .    811:	administrator, err := getLoginAdministrator(c)
         .          .    812:	if err != nil {
         .          .    813:		return err
         .          .    814:	}
         .          .    815:	return c.JSON(200, administrator)
ROUTINE ======================== main.postLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      490ms (flat, cum)  1.13% of Total
         .          .    565:func postLoginHandler(c echo.Context) error {
         .          .    566:	var params struct {
         .          .    567:		LoginName string `json:"login_name"`
         .          .    568:		Password  string `json:"password"`
         .          .    569:	}
         .       20ms    570:	c.Bind(&params)
         .          .    571:
         .          .    572:	user := new(User)
         .      130ms    573:	if err := db.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != nil {
         .          .    574:		if err == sql.ErrNoRows {
         .          .    575:			return resError(c, "authentication_failed", 401)
         .          .    576:		}
         .          .    577:		return err
         .          .    578:	}
         .          .    579:
         .          .    580:	var passHash string
         .      100ms    581:	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .    582:		return err
         .          .    583:	}
         .          .    584:	if user.PassHash != passHash {
         .          .    585:		return resError(c, "authentication_failed", 401)
         .          .    586:	}
         .          .    587:
         .      120ms    588:	sessSetUserID(c, user.ID)
         .      100ms    589:	user, err := getLoginUser(c)
         .          .    590:	if err != nil {
         .          .    591:		return err
         .          .    592:	}
         .       20ms    593:	return c.JSON(200, user)
         .          .    594:}
         .          .    595:
         .          .    596:func postLogoutHandler(c echo.Context) error {
         .          .    597:	sessDeleteUserID(c)
         .          .    598:	return c.NoContent(204)
ROUTINE ======================== main.postReserveHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      1.17s (flat, cum)  2.69% of Total
         .          .    636:		return resError(c, "not_found", 404)
         .          .    637:	}
         .          .    638:	var params struct {
         .          .    639:		Rank string `json:"sheet_rank"`
         .          .    640:	}
         .       20ms    641:	c.Bind(&params)
         .          .    642:
         .       80ms    643:	user, err := getLoginUser(c)
         .          .    644:	if err != nil {
         .          .    645:		return err
         .          .    646:	}
         .          .    647:
         .      780ms    648:	event, err := getEvent(eventID, user.ID)
         .          .    649:	if err != nil {
         .          .    650:		if err == sql.ErrNoRows {
         .          .    651:			return resError(c, "invalid_event", 404)
         .          .    652:		}
         .          .    653:		return err
         .          .    654:	} else if !event.PublicFg {
         .          .    655:		return resError(c, "invalid_event", 404)
         .          .    656:	}
         .          .    657:
         .      110ms    658:	if !validateRank(params.Rank) {
         .          .    659:		return resError(c, "invalid_rank", 400)
         .          .    660:	}
         .          .    661:
         .          .    662:	var sheet Sheet
         .          .    663:	var reservationID int64
         .          .    664:	for {
         .       20ms    665:		tx, err := db.Begin()
         .       90ms    666:		if err := tx.QueryRow("SELECT * FROM sheets WHERE id NOT IN (SELECT sheet_id FROM reservations WHERE event_id = ? AND canceled_at IS NULL FOR UPDATE) AND `rank` = ? ORDER BY RAND() LIMIT 1", event.ID, params.Rank).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .    667:			if err == sql.ErrNoRows {
         .          .    668:				return resError(c, "sold_out", 409)
         .          .    669:			}
         .          .    670:			return err
         .          .    671:		}
         .          .    672:
         .          .    673:		if err != nil {
         .          .    674:			return err
         .          .    675:		}
         .          .    676:
         .          .    677:		t := time.Now()
         .       40ms    678:		res, err := tx.Exec("INSERT INTO reservations (event_id, sheet_id, user_id, reserved_at) VALUES (?, ?, ?, ?)", event.ID, sheet.ID, user.ID, t.UTC().Format("2006-01-02 15:04:05.000000"))
         .          .    679:		if err != nil {
         .          .    680:			tx.Rollback()
         .          .    681:			log.Println("re-try: rollback by", err)
         .          .    682:			continue
         .          .    683:		}
         .          .    684:		reservationID, err = res.LastInsertId()
         .          .    685:		if err != nil {
         .          .    686:			tx.Rollback()
         .          .    687:			log.Println("re-try: rollback by", err)
         .          .    688:			continue
         .          .    689:		}
         .          .    690:
         .          .    691:		eventSheetCache.Set(event.ID, sheet.ID, EventSheetReservation{user.ID, t})
         .       10ms    692:		if err := tx.Commit(); err != nil {
         .          .    693:			tx.Rollback()
         .          .    694:			log.Println("re-try: rollback by", err)
         .          .    695:			continue
         .          .    696:		}
         .          .    697:		break
         .          .    698:	}
         .       20ms    699:	return c.JSON(202, echo.Map{
         .          .    700:		"id":         reservationID,
         .          .    701:		"sheet_rank": params.Rank,
         .          .    702:		"sheet_num":  sheet.Num,
         .          .    703:	})
         .          .    704:}
ROUTINE ======================== main.postUsersHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       40ms (flat, cum) 0.092% of Total
         .          .    434:	var params struct {
         .          .    435:		Nickname  string `json:"nickname"`
         .          .    436:		LoginName string `json:"login_name"`
         .          .    437:		Password  string `json:"password"`
         .          .    438:	}
         .       10ms    439:	c.Bind(&params)
         .          .    440:
         .       20ms    441:	tx, err := db.Begin()
         .          .    442:	if err != nil {
         .          .    443:		return err
         .          .    444:	}
         .          .    445:
         .          .    446:	var user User
         .       10ms    447:	if err := tx.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != sql.ErrNoRows {
         .          .    448:		tx.Rollback()
         .          .    449:		if err == nil {
         .          .    450:			return resError(c, "duplicated", 409)
         .          .    451:		}
         .          .    452:		return err
ROUTINE ======================== main.renderReportCSV in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     100ms      4.60s (flat, cum) 10.59% of Total
         .          .   1061:	CanceledAt    string
         .          .   1062:	Price         int64
         .          .   1063:}
         .          .   1064:
         .          .   1065:func renderReportCSV(c echo.Context, reports []Report) error {
         .      1.05s   1066:	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .   1067:
         .          .   1068:	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .       20ms   1069:	for _, v := range reports {
      10ms      2.54s   1070:		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
      90ms      900ms   1071:			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
         .          .   1072:	}
         .          .   1073:
         .          .   1074:	c.Response().Header().Set("Content-Type", `text/csv; charset=UTF-8`)
         .          .   1075:	c.Response().Header().Set("Content-Disposition", `attachment; filename="report.csv"`)
         .       90ms   1076:	_, err := io.Copy(c.Response(), body)
         .          .   1077:	return err
         .          .   1078:}
         .          .   1079:
         .          .   1080:func resError(c echo.Context, e string, status int) error {
         .          .   1081:	if e == "" {
ROUTINE ======================== main.renderReportCSV.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     220ms      220ms (flat, cum)  0.51% of Total
         .          .   1061:	CanceledAt    string
         .          .   1062:	Price         int64
         .          .   1063:}
         .          .   1064:
         .          .   1065:func renderReportCSV(c echo.Context, reports []Report) error {
     220ms      220ms   1066:	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .   1067:
         .          .   1068:	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .          .   1069:	for _, v := range reports {
         .          .   1070:		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
         .          .   1071:			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
ROUTINE ======================== main.renderReportCSV.func1 in /home/isucon/local/go/src/strings/compare.go
     140ms      630ms (flat, cum)  1.45% of Total
         .          .     16:	// using strings.Compare. Basically no one should use strings.Compare.
         .          .     17:	// As the comment above says, it is here only for symmetry with package bytes.
         .          .     18:	// If performance is important, the compiler should be changed to recognize
         .          .     19:	// the pattern so that all code doing three-way comparisons, not just code
         .          .     20:	// using strings.Compare, can benefit.
      50ms      360ms     21:	if a == b {
         .          .     22:		return 0
         .          .     23:	}
      90ms      270ms     24:	if a < b {
         .          .     25:		return -1
         .          .     26:	}
         .          .     27:	return +1
         .          .     28:}
ROUTINE ======================== main.sessAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       40ms (flat, cum) 0.092% of Total
         .          .    163:	delete(sess.Values, "user_id")
         .          .    164:	sess.Save(c.Request(), c.Response())
         .          .    165:}
         .          .    166:
         .          .    167:func sessAdministratorID(c echo.Context) int64 {
         .       40ms    168:	sess, _ := session.Get("session", c)
         .          .    169:	var administratorID int64
         .          .    170:	if x, ok := sess.Values["administrator_id"]; ok {
         .          .    171:		administratorID, _ = x.(int64)
         .          .    172:	}
         .          .    173:	return administratorID
ROUTINE ======================== main.sessSetAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.023% of Total
         .          .    179:		Path:     "/",
         .          .    180:		MaxAge:   3600,
         .          .    181:		HttpOnly: true,
         .          .    182:	}
         .          .    183:	sess.Values["administrator_id"] = id
         .       10ms    184:	sess.Save(c.Request(), c.Response())
         .          .    185:}
         .          .    186:
         .          .    187:func sessDeleteAdministratorID(c echo.Context) {
         .          .    188:	sess, _ := session.Get("session", c)
         .          .    189:	sess.Options = &sessions.Options{
ROUTINE ======================== main.sessSetUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      120ms (flat, cum)  0.28% of Total
         .          .    141:	}
         .          .    142:	return userID
         .          .    143:}
         .          .    144:
         .          .    145:func sessSetUserID(c echo.Context, id int64) {
         .       20ms    146:	sess, _ := session.Get("session", c)
         .          .    147:	sess.Options = &sessions.Options{
         .          .    148:		Path:     "/",
         .          .    149:		MaxAge:   3600,
         .          .    150:		HttpOnly: true,
         .          .    151:	}
         .          .    152:	sess.Values["user_id"] = id
         .      100ms    153:	sess.Save(c.Request(), c.Response())
         .          .    154:}
         .          .    155:
         .          .    156:func sessDeleteUserID(c echo.Context) {
         .          .    157:	sess, _ := session.Get("session", c)
         .          .    158:	sess.Options = &sessions.Options{
ROUTINE ======================== main.sessUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      320ms (flat, cum)  0.74% of Total
         .          .    132:}
         .          .    133:
         .          .    134:var eventSheetCache EventSheetReservationCache
         .          .    135:
         .          .    136:func sessUserID(c echo.Context) int64 {
         .      320ms    137:	sess, _ := session.Get("session", c)
         .          .    138:	var userID int64
         .          .    139:	if x, ok := sess.Values["user_id"]; ok {
         .          .    140:		userID, _ = x.(int64)
         .          .    141:	}
         .          .    142:	return userID
ROUTINE ======================== main.validateRank in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      180ms (flat, cum)  0.41% of Total
         .          .    333:	}
         .          .    334:}
         .          .    335:
         .          .    336:func validateRank(rank string) bool {
         .          .    337:	var count int
         .      180ms    338:	db.QueryRow("SELECT COUNT(*) FROM sheets WHERE `rank` = ?", rank).Scan(&count)
         .          .    339:	return count > 0
         .          .    340:}
         .          .    341:
         .          .    342:type Renderer struct {
         .          .    343:	templates *template.Template
ROUTINE ======================== runtime.main in /home/isucon/local/go/src/runtime/proc.go
         0      110ms (flat, cum)  0.25% of Total
         .          .    193:		// A program compiled with -buildmode=c-archive or c-shared
         .          .    194:		// has a main, but it is not executed.
         .          .    195:		return
         .          .    196:	}
         .          .    197:	fn = main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .      110ms    198:	fn()
         .          .    199:	if raceenabled {
         .          .    200:		racefini()
         .          .    201:	}
         .          .    202:
         .          .    203:	// Make racy client program work: if panicking on
