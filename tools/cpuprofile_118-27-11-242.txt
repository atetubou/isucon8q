Total: 1.06mins
ROUTINE ======================== main.(*EventSheetReservationCache).Get in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     670ms      9.67s (flat, cum) 15.26% of Total
         .          .    110:		mu:    make([]sync.RWMutex, 1010),
         .          .    111:		cache: cache,
         .          .    112:	}
         .          .    113:}
         .          .    114:
      50ms       50ms    115:func (c *EventSheetReservationCache) Get(eventId int64, sheetId int64) *EventSheetReservation {
         .          .    116:	//key := EventSheetKey{eventId, sheetId}
      50ms      680ms    117:	c.mu[sheetId].RLock()
      70ms      920ms    118:	defer c.mu[sheetId].RUnlock()
     450ms      5.98s    119:	if v, ok := c.cache[sheetId][eventId]; ok {
      10ms      620ms    120:		return &v
         .          .    121:	}
      40ms      1.42s    122:	return nil
         .          .    123:}
         .          .    124:
         .          .    125:func (c *EventSheetReservationCache) Set(eventId int64, sheetId int64, reservation EventSheetReservation) {
         .          .    126:	//key := EventSheetKey{eventId, sheetId}
         .          .    127:	c.mu[sheetId].Lock()
ROUTINE ======================== main.(*Renderer).Render in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      790ms (flat, cum)  1.25% of Total
         .          .    349:type Renderer struct {
         .          .    350:	templates *template.Template
         .          .    351:}
         .          .    352:
         .          .    353:func (r *Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
         .      790ms    354:	return r.templates.ExecuteTemplate(w, name, data)
         .          .    355:}
         .          .    356:
         .          .    357:func getIndexHandler(c echo.Context) error {
         .          .    358:	events, err := getEvents(false)
         .          .    359:	if err != nil {
ROUTINE ======================== main.adminLoginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0     20.44s (flat, cum) 32.25% of Total
         .          .    209:	}
         .          .    210:}
         .          .    211:
         .          .    212:func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    213:	return func(c echo.Context) error {
         .       50ms    214:		if _, err := getLoginAdministrator(c); err != nil {
         .          .    215:			return resError(c, "admin_login_required", 401)
         .          .    216:		}
         .     20.39s    217:		return next(c)
         .          .    218:	}
         .          .    219:}
         .          .    220:
         .          .    221:func getLoginUser(c echo.Context) (*User, error) {
         .          .    222:	userID := sessUserID(c)
ROUTINE ======================== main.deleteReservationHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      970ms (flat, cum)  1.53% of Total
         .          .    719:		return resError(c, "not_found", 404)
         .          .    720:	}
         .          .    721:	rank := c.Param("rank")
         .          .    722:	num := c.Param("num")
         .          .    723:
         .       50ms    724:	user, err := getLoginUser(c)
         .          .    725:	if err != nil {
         .          .    726:		return err
         .          .    727:	}
         .          .    728:
         .      660ms    729:	event, err := getEvent(eventID, user.ID)
         .          .    730:	if err != nil {
         .          .    731:		if err == sql.ErrNoRows {
         .          .    732:			return resError(c, "invalid_event", 404)
         .          .    733:		}
         .          .    734:		return err
         .          .    735:	} else if !event.PublicFg {
         .          .    736:		return resError(c, "invalid_event", 404)
         .          .    737:	}
         .          .    738:
         .       70ms    739:	if !validateRank(rank) {
         .          .    740:		return resError(c, "invalid_rank", 404)
         .          .    741:	}
         .          .    742:
         .          .    743:	var sheet Sheet
         .       70ms    744:	if err := db.QueryRow("SELECT * FROM sheets WHERE `rank` = ? AND num = ?", rank, num).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .    745:		if err == sql.ErrNoRows {
         .          .    746:			return resError(c, "invalid_sheet", 404)
         .          .    747:		}
         .          .    748:		log.Println("we shouldn't reach here...", err)
         .          .    749:		return err
         .          .    750:	}
         .          .    751:
         .          .    752:	for {
         .       10ms    753:		tx, err := db.Begin()
         .          .    754:		if err != nil {
         .          .    755:			return err
         .          .    756:		}
         .          .    757:
         .          .    758:		var reservation Reservation
         .       50ms    759:		if err := tx.QueryRow("SELECT * FROM reservations WHERE event_id = ? AND sheet_id = ? AND canceled_at IS NULL GROUP BY event_id HAVING reserved_at = MIN(reserved_at) FOR UPDATE", event.ID, sheet.ID).Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt); err != nil {
         .          .    760:			tx.Rollback()
         .          .    761:			if err == sql.ErrNoRows {
         .          .    762:				return resError(c, "not_reserved", 400)
         .          .    763:			}
         .          .    764:			log.Println("re-try: rollback by", err)
         .          .    765:			continue
         .          .    766:		}
         .          .    767:
         .          .    768:		if reservation.UserID != user.ID {
         .          .    769:			tx.Rollback()
         .          .    770:			return resError(c, "not_permitted", 403)
         .          .    771:		}
         .          .    772:
         .       50ms    773:		if _, err := tx.Exec("UPDATE reservations SET canceled_at = ? WHERE id = ?", time.Now().UTC().Format("2006-01-02 15:04:05.000000"), reservation.ID); err != nil {
         .          .    774:			tx.Rollback()
         .          .    775:			log.Println("re-try: rollback by", err)
         .          .    776:			continue
         .          .    777:		}
         .          .    778:
         .          .    779:		eventSheetCache.Delete(reservation.EventID, reservation.SheetID)
         .       10ms    780:		if err := tx.Commit(); err != nil {
         .          .    781:			return err
         .          .    782:			log.Println("re-try: rollback by", err)
         .          .    783:			continue
         .          .    784:		}
         .          .    785:		break
ROUTINE ======================== main.fillinAdministrator.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      760ms (flat, cum)  1.20% of Total
         .          .    332:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    333:	return func(c echo.Context) error {
         .          .    334:		if administrator, err := getLoginAdministrator(c); err == nil {
         .          .    335:			c.Set("administrator", administrator)
         .          .    336:		} else {
         .       10ms    337:			log.Printf("fillinAdministrator: %v", err)
         .          .    338:		}
         .      750ms    339:		return next(c)
         .          .    340:	}
         .          .    341:}
         .          .    342:
         .          .    343:func validateRank(rank string) bool {
         .          .    344:	var count int
ROUTINE ======================== main.fillinUser.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0     20.99s (flat, cum) 33.12% of Total
         .          .    320:	return &sanitized
         .          .    321:}
         .          .    322:
         .          .    323:func fillinUser(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    324:	return func(c echo.Context) error {
         .      220ms    325:		if user, err := getLoginUser(c); err == nil {
         .          .    326:			c.Set("user", user)
         .          .    327:		}
         .     20.77s    328:		return next(c)
         .          .    329:	}
         .          .    330:}
         .          .    331:
         .          .    332:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    333:	return func(c echo.Context) error {
ROUTINE ======================== main.getAdminEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       60ms (flat, cum) 0.095% of Total
         .          .    882:	}
         .          .    883:	return c.JSON(200, event)
         .          .    884:}
         .          .    885:
         .          .    886:func getAdminEventHandler(c echo.Context) error {
         .       10ms    887:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    888:	if err != nil {
         .          .    889:		return resError(c, "not_found", 404)
         .          .    890:	}
         .       40ms    891:	event, err := getEvent(eventID, -1)
         .          .    892:	if err != nil {
         .          .    893:		if err == sql.ErrNoRows {
         .          .    894:			return resError(c, "not_found", 404)
         .          .    895:		}
         .          .    896:		return err
         .          .    897:	}
         .       10ms    898:	return c.JSON(200, event)
         .          .    899:}
         .          .    900:
         .          .    901:func postAdminEditEventHandler(c echo.Context) error {
         .          .    902:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    903:	if err != nil {
ROUTINE ======================== main.getAdminHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      750ms (flat, cum)  1.18% of Total
         .          .    791:	var events []*Event
         .          .    792:	administrator := c.Get("administrator")
         .          .    793:	log.Printf("getAdminHandler: %q", administrator)
         .          .    794:	if administrator != nil {
         .          .    795:		var err error
         .      740ms    796:		if events, err = getEvents(true); err != nil {
         .          .    797:			log.Printf("getEvents: %v", err)
         .          .    798:			return err
         .          .    799:		}
         .          .    800:	}
         .       10ms    801:	return c.Render(200, "admin.tmpl", echo.Map{
         .          .    802:		"events":        events,
         .          .    803:		"administrator": administrator,
         .          .    804:		"origin":        c.Scheme() + "://" + c.Request().Host,
         .          .    805:	})
         .          .    806:}
ROUTINE ======================== main.getAdminReportsEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms      1.29s (flat, cum)  2.04% of Total
         .          .    952:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    953:	if err != nil {
         .          .    954:		return resError(c, "not_found", 404)
         .          .    955:	}
         .          .    956:
         .       40ms    957:	event, err := getEvent(eventID, -1)
         .          .    958:	if err != nil {
         .          .    959:		return err
         .          .    960:	}
         .          .    961:
         .       10ms    962:	rows, err := db.Query("SELECT r.*, s.rank AS sheet_rank, s.num AS sheet_num, s.price AS sheet_price, e.price AS event_price FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.event_id = ? ORDER BY reserved_at ASC FOR UPDATE", event.ID)
         .          .    963:	if err != nil {
         .          .    964:		return err
         .          .    965:	}
         .          .    966:	defer rows.Close()
         .          .    967:
         .          .    968:	var reports []Report
      10ms      270ms    969:	for rows.Next() {
         .       50ms    970:		var reservation Reservation
         .       10ms    971:		var sheet Sheet
         .      280ms    972:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.Price); err != nil {
         .          .    973:			return err
         .          .    974:		}
         .          .    975:		report := Report{
         .          .    976:			ReservationID: reservation.ID,
         .          .    977:			EventID:       event.ID,
         .          .    978:			Rank:          sheet.Rank,
         .          .    979:			Num:           sheet.Num,
         .          .    980:			UserID:        reservation.UserID,
         .      120ms    981:			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .    982:			Price:         event.Price + sheet.Price,
         .          .    983:		}
         .          .    984:		if reservation.CanceledAt != nil {
         .      100ms    985:			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .    986:		}
         .       40ms    987:		reports = append(reports, report)
         .          .    988:	}
         .      370ms    989:	return renderReportCSV(c, reports)
         .          .    990:}
         .          .    991:
         .          .    992:func getAdminReportsHandler(c echo.Context) error {
         .          .    993:	rows, err := db.Query("select r.*, s.rank as sheet_rank, s.num as sheet_num, s.price as sheet_price, e.id as event_id, e.price as event_price from reservations r inner join sheets s on s.id = r.sheet_id inner join events e on e.id = r.event_id order by reserved_at asc for update")
         .          .    994:	if err != nil {
ROUTINE ======================== main.getAdminReportsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     110ms     18.97s (flat, cum) 29.93% of Total
         .          .    995:		return err
         .          .    996:	}
         .          .    997:	defer rows.Close()
         .          .    998:
         .          .    999:	var reports []Report
      10ms      5.72s   1000:	for rows.Next() {
      10ms      260ms   1001:		var reservation Reservation
         .      210ms   1002:		var sheet Sheet
         .      250ms   1003:		var event Event
      70ms      4.96s   1004:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num, &sheet.Price, &event.ID, &event.Price); err != nil {
         .          .   1005:			return err
         .          .   1006:		}
         .       40ms   1007:		report := Report{
         .          .   1008:			ReservationID: reservation.ID,
         .          .   1009:			EventID:       event.ID,
         .          .   1010:			Rank:          sheet.Rank,
         .          .   1011:			Num:           sheet.Num,
         .          .   1012:			UserID:        reservation.UserID,
         .      1.01s   1013:			SoldAt:        reservation.ReservedAt.Format("2006-01-02T15:04:05.000000Z"),
         .          .   1014:			Price:         event.Price + sheet.Price,
         .          .   1015:		}
         .          .   1016:		if reservation.CanceledAt != nil {
      10ms      1.06s   1017:			report.CanceledAt = reservation.CanceledAt.Format("2006-01-02T15:04:05.000000Z")
         .          .   1018:		}
      10ms      1.07s   1019:		reports = append(reports, report)
         .          .   1020:	}
         .      4.39s   1021:	return renderReportCSV(c, reports)
         .          .   1022:}
         .          .   1023:
         .          .   1024:var db *sql.DB
         .          .   1025:
         .          .   1026:func main() {
ROUTINE ======================== main.getEvent in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     1.58s     24.72s (flat, cum) 39.00% of Total
         .          .    278:	return events, nil
         .          .    279:}
         .          .    280:
         .          .    281:func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .    282:	var event Event
      20ms      2.49s    283:	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .    284:		return nil, err
         .          .    285:	}
         .       20ms    286:	event.Sheets = map[string]*Sheets{
         .          .    287:		"S": &Sheets{},
         .       20ms    288:		"A": &Sheets{},
         .          .    289:		"B": &Sheets{},
         .       10ms    290:		"C": &Sheets{},
         .          .    291:	}
         .          .    292:
      70ms      400ms    293:	for _, sheet := range allSheets {
      80ms      3.79s    294:		sheet := sheet
     230ms      1.94s    295:		event.Sheets[sheet.Rank].Price = event.Price + sheet.Price
      60ms       60ms    296:		event.Total++
     180ms      1.34s    297:		event.Sheets[sheet.Rank].Total++
         .          .    298:
      30ms      9.70s    299:		reservation := eventSheetCache.Get(event.ID, sheet.ID)
      20ms       20ms    300:		if reservation != nil {
      30ms       30ms    301:			sheet.Mine = reservation.UserID == loginUserID
      20ms       20ms    302:			sheet.Reserved = true
      10ms       10ms    303:			sheet.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .    304:		} else {
      10ms       10ms    305:			event.Remains++
     240ms      1.10s    306:			event.Sheets[sheet.Rank].Remains++
         .          .    307:		}
         .          .    308:
     580ms      3.76s    309:		event.Sheets[sheet.Rank].Detail = append(event.Sheets[sheet.Rank].Detail, &sheet)
         .          .    310:	}
         .          .    311:
         .          .    312:	return &event, nil
         .          .    313:}
         .          .    314:
ROUTINE ======================== main.getEvent in /home/isucon/local/go/src/time/time.go
      70ms       70ms (flat, cum)  0.11% of Total
         .          .    153:	return int32(t.wall & nsecMask)
         .          .    154:}
         .          .    155:
         .          .    156:// sec returns the time's seconds since Jan 1 year 1.
         .          .    157:func (t *Time) sec() int64 {
      10ms       10ms    158:	if t.wall&hasMonotonic != 0 {
         .          .    159:		return wallToInternal + int64(t.wall<<1>>(nsecShift+1))
         .          .    160:	}
      10ms       10ms    161:	return int64(t.ext)
         .          .    162:}
         .          .    163:
         .          .    164:// unixSec returns the time's seconds since Jan 1 1970 (Unix time).
      50ms       50ms    165:func (t *Time) unixSec() int64 { return t.sec() + internalToUnix }
         .          .    166:
         .          .    167:// addSec adds d seconds to the time.
         .          .    168:func (t *Time) addSec(d int64) {
         .          .    169:	if t.wall&hasMonotonic != 0 {
         .          .    170:		sec := int64(t.wall << 1 >> (nsecShift + 1))
ROUTINE ======================== main.getEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      3.72s (flat, cum)  5.87% of Total
         .          .    625:	if err != nil {
         .          .    626:		return resError(c, "not_found", 404)
         .          .    627:	}
         .          .    628:
         .          .    629:	loginUserID := int64(-1)
         .      570ms    630:	if user, err := getLoginUser(c); err == nil {
         .          .    631:		loginUserID = user.ID
         .          .    632:	}
         .          .    633:
         .      1.56s    634:	event, err := getEvent(eventID, loginUserID)
         .          .    635:	if err != nil {
         .          .    636:		if err == sql.ErrNoRows {
         .          .    637:			return resError(c, "not_found", 404)
         .          .    638:		}
         .          .    639:		return err
         .          .    640:	} else if !event.PublicFg {
         .          .    641:		return resError(c, "not_found", 404)
         .          .    642:	}
         .      1.59s    643:	return c.JSON(200, sanitizeEvent(event))
         .          .    644:}
         .          .    645:func postReserveHandler(c echo.Context) error {
         .          .    646:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    647:	if err != nil {
         .          .    648:		return resError(c, "not_found", 404)
ROUTINE ======================== main.getEvents in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms     20.51s (flat, cum) 32.36% of Total
         .          .    240:	}
         .          .    241:	return &administrator, err
         .          .    242:}
         .          .    243:
         .          .    244:func getEvents(all bool) ([]*Event, error) {
         .       90ms    245:	tx, err := db.Begin()
         .          .    246:	if err != nil {
         .          .    247:		return nil, err
         .          .    248:	}
         .          .    249:	defer tx.Commit()
         .          .    250:
         .       50ms    251:	rows, err := tx.Query("SELECT * FROM events ORDER BY id ASC")
         .          .    252:	if err != nil {
         .          .    253:		return nil, err
         .          .    254:	}
         .          .    255:	defer rows.Close()
         .          .    256:
         .          .    257:	var events []*Event
         .       60ms    258:	for rows.Next() {
         .       10ms    259:		var event Event
         .      100ms    260:		if err := rows.Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
         .          .    261:			return nil, err
         .          .    262:		}
         .          .    263:		if !all && !event.PublicFg {
         .          .    264:			continue
         .          .    265:		}
         .          .    266:		events = append(events, &event)
         .          .    267:	}
      10ms       10ms    268:	for i, v := range events {
         .     20.08s    269:		event, err := getEvent(v.ID, -1)
         .          .    270:		if err != nil {
         .          .    271:			return nil, err
         .          .    272:		}
         .          .    273:		for k := range event.Sheets {
         .          .    274:			event.Sheets[k].Detail = nil
         .          .    275:		}
         .          .    276:		events[i] = event
         .          .    277:	}
         .      110ms    278:	return events, nil
         .          .    279:}
         .          .    280:
         .          .    281:func getEvent(eventID, loginUserID int64) (*Event, error) {
         .          .    282:	var event Event
         .          .    283:	if err := db.QueryRow("SELECT * FROM events WHERE id = ?", eventID).Scan(&event.ID, &event.Title, &event.PublicFg, &event.ClosedFg, &event.Price); err != nil {
ROUTINE ======================== main.getIndexHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
      10ms     20.77s (flat, cum) 32.77% of Total
         .          .    311:
         .          .    312:	return &event, nil
         .          .    313:}
         .          .    314:
         .          .    315:func sanitizeEvent(e *Event) *Event {
      10ms       20ms    316:	sanitized := *e
         .          .    317:	sanitized.Price = 0
         .          .    318:	sanitized.PublicFg = false
         .          .    319:	sanitized.ClosedFg = false
         .          .    320:	return &sanitized
         .          .    321:}
         .          .    322:
         .          .    323:func fillinUser(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    324:	return func(c echo.Context) error {
         .          .    325:		if user, err := getLoginUser(c); err == nil {
         .          .    326:			c.Set("user", user)
         .          .    327:		}
         .          .    328:		return next(c)
         .          .    329:	}
         .          .    330:}
         .          .    331:
         .          .    332:func fillinAdministrator(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    333:	return func(c echo.Context) error {
         .          .    334:		if administrator, err := getLoginAdministrator(c); err == nil {
         .          .    335:			c.Set("administrator", administrator)
         .          .    336:		} else {
         .          .    337:			log.Printf("fillinAdministrator: %v", err)
         .          .    338:		}
         .          .    339:		return next(c)
         .          .    340:	}
         .          .    341:}
         .          .    342:
         .          .    343:func validateRank(rank string) bool {
         .          .    344:	var count int
         .          .    345:	db.QueryRow("SELECT COUNT(*) FROM sheets WHERE `rank` = ?", rank).Scan(&count)
         .          .    346:	return count > 0
         .          .    347:}
         .          .    348:
         .          .    349:type Renderer struct {
         .          .    350:	templates *template.Template
         .          .    351:}
         .          .    352:
         .          .    353:func (r *Renderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
         .          .    354:	return r.templates.ExecuteTemplate(w, name, data)
         .          .    355:}
         .          .    356:
         .          .    357:func getIndexHandler(c echo.Context) error {
         .     19.77s    358:	events, err := getEvents(false)
         .          .    359:	if err != nil {
         .          .    360:		return err
         .          .    361:	}
         .          .    362:	for i, v := range events {
         .          .    363:		events[i] = sanitizeEvent(v)
         .          .    364:	}
         .      950ms    365:	return c.Render(200, "index.tmpl", echo.Map{
         .       20ms    366:		"events": events,
         .          .    367:		"user":   c.Get("user"),
         .       10ms    368:		"origin": c.Scheme() + "://" + c.Request().Host,
         .          .    369:	})
         .          .    370:}
         .          .    371:
         .          .    372:var allSheets []Sheet
         .          .    373:
ROUTINE ======================== main.getLoginAdministrator in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       50ms (flat, cum) 0.079% of Total
         .          .    227:	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .    228:	return &user, err
         .          .    229:}
         .          .    230:
         .          .    231:func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .       20ms    232:	administratorID := sessAdministratorID(c)
         .          .    233:	if administratorID == 0 {
         .          .    234:		return nil, errors.New("not logged in")
         .          .    235:	}
         .          .    236:	var administrator Administrator
         .       30ms    237:	err := db.QueryRow("SELECT id, nickname FROM administrators WHERE id = ?", administratorID).Scan(&administrator.ID, &administrator.Nickname)
         .          .    238:	if err != nil {
         .          .    239:		log.Fatal("db.QueryRow:", err)
         .          .    240:	}
         .          .    241:	return &administrator, err
         .          .    242:}
ROUTINE ======================== main.getLoginUser in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.07s (flat, cum)  3.27% of Total
         .          .    217:		return next(c)
         .          .    218:	}
         .          .    219:}
         .          .    220:
         .          .    221:func getLoginUser(c echo.Context) (*User, error) {
         .      720ms    222:	userID := sessUserID(c)
         .          .    223:	if userID == 0 {
         .          .    224:		return nil, errors.New("not logged in")
         .          .    225:	}
         .          .    226:	var user User
         .      1.35s    227:	err := db.QueryRow("SELECT id, nickname FROM users WHERE id = ?", userID).Scan(&user.ID, &user.Nickname)
         .          .    228:	return &user, err
         .          .    229:}
         .          .    230:
         .          .    231:func getLoginAdministrator(c echo.Context) (*Administrator, error) {
         .          .    232:	administratorID := sessAdministratorID(c)
ROUTINE ======================== main.getUserHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      620ms (flat, cum)  0.98% of Total
         .          .    509:		var sheet Sheet
         .          .    510:		if err := rows.Scan(&reservation.ID, &reservation.EventID, &reservation.SheetID, &reservation.UserID, &reservation.ReservedAt, &reservation.CanceledAt, &sheet.Rank, &sheet.Num); err != nil {
         .          .    511:			return err
         .          .    512:		}
         .          .    513:
         .      290ms    514:		event, err := getEvent(reservation.EventID, -1)
         .          .    515:		if err != nil {
         .          .    516:			return err
         .          .    517:		}
         .          .    518:		price := event.Sheets[sheet.Rank].Price
         .          .    519:		event.Sheets = nil
         .          .    520:		event.Total = 0
         .          .    521:		event.Remains = 0
         .          .    522:
         .          .    523:		reservation.Event = event
         .          .    524:		reservation.SheetRank = sheet.Rank
         .          .    525:		reservation.SheetNum = sheet.Num
         .          .    526:		reservation.Price = price
         .          .    527:		reservation.ReservedAtUnix = reservation.ReservedAt.Unix()
         .          .    528:		if reservation.CanceledAt != nil {
         .          .    529:			reservation.CanceledAtUnix = reservation.CanceledAt.Unix()
         .          .    530:		}
         .          .    531:		recentReservations = append(recentReservations, reservation)
         .          .    532:	}
         .          .    533:	if recentReservations == nil {
         .          .    534:		recentReservations = make([]Reservation, 0)
         .          .    535:	}
         .          .    536:
         .          .    537:	var totalPrice int
         .          .    538:	if err := db.QueryRow("SELECT IFNULL(SUM(e.price + s.price), 0) FROM reservations r INNER JOIN sheets s ON s.id = r.sheet_id INNER JOIN events e ON e.id = r.event_id WHERE r.user_id = ? AND r.canceled_at IS NULL", user.ID).Scan(&totalPrice); err != nil {
         .          .    539:		return err
         .          .    540:	}
         .          .    541:
         .          .    542:	rows, err = db.Query("SELECT event_id FROM reservations WHERE user_id = ? GROUP BY event_id ORDER BY MAX(IFNULL(canceled_at, reserved_at)) DESC LIMIT 5", user.ID)
         .          .    543:	if err != nil {
         .          .    544:		return err
         .          .    545:	}
         .          .    546:	defer rows.Close()
         .          .    547:
         .          .    548:	var recentEvents []*Event
         .       10ms    549:	for rows.Next() {
         .          .    550:		var eventID int64
         .          .    551:		if err := rows.Scan(&eventID); err != nil {
         .          .    552:			return err
         .          .    553:		}
         .      320ms    554:		event, err := getEvent(eventID, -1)
         .          .    555:		if err != nil {
         .          .    556:			return err
         .          .    557:		}
         .          .    558:		for k := range event.Sheets {
         .          .    559:			event.Sheets[k].Detail = nil
ROUTINE ======================== main.loginRequired.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      5.12s (flat, cum)  8.08% of Total
         .          .    200:	sess.Save(c.Request(), c.Response())
         .          .    201:}
         .          .    202:
         .          .    203:func loginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    204:	return func(c echo.Context) error {
         .      870ms    205:		if _, err := getLoginUser(c); err != nil {
         .          .    206:			return resError(c, "login_required", 401)
         .          .    207:		}
         .      4.25s    208:		return next(c)
         .          .    209:	}
         .          .    210:}
         .          .    211:
         .          .    212:func adminLoginRequired(next echo.HandlerFunc) echo.HandlerFunc {
         .          .    213:	return func(c echo.Context) error {
ROUTINE ======================== main.main in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      330ms (flat, cum)  0.52% of Total
         .          .   1084:	e.GET("/admin/api/events/:id", getAdminEventHandler, adminLoginRequired)
         .          .   1085:	e.POST("/admin/api/events/:id/actions/edit", postAdminEditEventHandler, adminLoginRequired)
         .          .   1086:	e.GET("/admin/api/reports/events/:id/sales", getAdminReportsEventHandler, adminLoginRequired)
         .          .   1087:	e.GET("/admin/api/reports/sales", getAdminReportsHandler, adminLoginRequired)
         .          .   1088:
         .      330ms   1089:	e.Start(":8080")
         .          .   1090:}
         .          .   1091:
         .          .   1092:type Report struct {
         .          .   1093:	ReservationID int64
         .          .   1094:	EventID       int64
ROUTINE ======================== main.main.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      240ms (flat, cum)  0.38% of Total
         .          .   1047:	mainInit()
         .          .   1048:
         .          .   1049:	e := echo.New()
         .          .   1050:	funcs := template.FuncMap{
         .          .   1051:		"encode_json": func(v interface{}) string {
         .      240ms   1052:			b, _ := json.Marshal(v)
         .          .   1053:			return string(b)
         .          .   1054:		},
         .          .   1055:	}
         .          .   1056:	e.Renderer = &Renderer{
         .          .   1057:		templates: template.Must(template.New("").Delims("[[", "]]").Funcs(funcs).ParseGlob("views/*.tmpl")),
ROUTINE ======================== main.postAdminEditEventHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       50ms (flat, cum) 0.079% of Total
         .          .    911:	c.Bind(&params)
         .          .    912:	if params.Closed {
         .          .    913:		params.Public = false
         .          .    914:	}
         .          .    915:
         .       10ms    916:	event, err := getEvent(eventID, -1)
         .          .    917:	if err != nil {
         .          .    918:		if err == sql.ErrNoRows {
         .          .    919:			return resError(c, "not_found", 404)
         .          .    920:		}
         .          .    921:		return err
         .          .    922:	}
         .          .    923:
         .          .    924:	if event.ClosedFg {
         .          .    925:		return resError(c, "cannot_edit_closed_event", 400)
         .          .    926:	} else if event.PublicFg && params.Closed {
         .          .    927:		return resError(c, "cannot_close_public_event", 400)
         .          .    928:	}
         .          .    929:
         .          .    930:	tx, err := db.Begin()
         .          .    931:	if err != nil {
         .          .    932:		return err
         .          .    933:	}
         .          .    934:	if _, err := tx.Exec("UPDATE events SET public_fg = ?, closed_fg = ? WHERE id = ?", params.Public, params.Closed, event.ID); err != nil {
         .          .    935:		tx.Rollback()
         .          .    936:		return err
         .          .    937:	}
         .          .    938:	if err := tx.Commit(); err != nil {
         .          .    939:		return err
         .          .    940:	}
         .          .    941:
         .       10ms    942:	e, err := getEvent(eventID, -1)
         .          .    943:	if err != nil {
         .          .    944:		return err
         .          .    945:	}
         .       30ms    946:	c.JSON(200, e)
         .          .    947:	return nil
         .          .    948:
         .          .    949:}
         .          .    950:
         .          .    951:func getAdminReportsEventHandler(c echo.Context) error {
ROUTINE ======================== main.postAdminEventsHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum) 0.032% of Total
         .          .    878:
         .          .    879:	event, err := getEvent(eventID, -1)
         .          .    880:	if err != nil {
         .          .    881:		return err
         .          .    882:	}
         .       20ms    883:	return c.JSON(200, event)
         .          .    884:}
         .          .    885:
         .          .    886:func getAdminEventHandler(c echo.Context) error {
         .          .    887:	eventID, err := strconv.ParseInt(c.Param("id"), 10, 64)
         .          .    888:	if err != nil {
ROUTINE ======================== main.postAdminLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       10ms (flat, cum) 0.016% of Total
         .          .    811:		Password  string `json:"password"`
         .          .    812:	}
         .          .    813:	c.Bind(&params)
         .          .    814:
         .          .    815:	administrator := new(Administrator)
         .       10ms    816:	if err := db.QueryRow("SELECT * FROM administrators WHERE login_name = ?", params.LoginName).Scan(&administrator.ID, &administrator.LoginName, &administrator.Nickname, &administrator.PassHash); err != nil {
         .          .    817:		if err == sql.ErrNoRows {
         .          .    818:			return resError(c, "authentication_failed", 401)
         .          .    819:		}
         .          .    820:		return err
         .          .    821:	}
ROUTINE ======================== main.postLoginHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      910ms (flat, cum)  1.44% of Total
         .          .    577:func postLoginHandler(c echo.Context) error {
         .          .    578:	var params struct {
         .          .    579:		LoginName string `json:"login_name"`
         .          .    580:		Password  string `json:"password"`
         .          .    581:	}
         .       30ms    582:	c.Bind(&params)
         .          .    583:
         .          .    584:	user := new(User)
         .      290ms    585:	if err := db.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != nil {
         .          .    586:		if err == sql.ErrNoRows {
         .          .    587:			return resError(c, "authentication_failed", 401)
         .          .    588:		}
         .          .    589:		return err
         .          .    590:	}
         .          .    591:
         .          .    592:	var passHash string
         .      220ms    593:	if err := db.QueryRow("SELECT SHA2(?, 256)", params.Password).Scan(&passHash); err != nil {
         .          .    594:		return err
         .          .    595:	}
         .          .    596:	if user.PassHash != passHash {
         .          .    597:		return resError(c, "authentication_failed", 401)
         .          .    598:	}
         .          .    599:
         .      100ms    600:	sessSetUserID(c, user.ID)
         .      220ms    601:	user, err := getLoginUser(c)
         .          .    602:	if err != nil {
         .          .    603:		return err
         .          .    604:	}
         .       50ms    605:	return c.JSON(200, user)
         .          .    606:}
         .          .    607:
         .          .    608:func postLogoutHandler(c echo.Context) error {
         .          .    609:	sessDeleteUserID(c)
         .          .    610:	return c.NoContent(204)
ROUTINE ======================== main.postReserveHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      2.66s (flat, cum)  4.20% of Total
         .          .    648:		return resError(c, "not_found", 404)
         .          .    649:	}
         .          .    650:	var params struct {
         .          .    651:		Rank string `json:"sheet_rank"`
         .          .    652:	}
         .       40ms    653:	c.Bind(&params)
         .          .    654:
         .      140ms    655:	user, err := getLoginUser(c)
         .          .    656:	if err != nil {
         .          .    657:		log.Println("failed to get login user:", err)
         .          .    658:		return err
         .          .    659:	}
         .          .    660:
         .      1.78s    661:	event, err := getEvent(eventID, user.ID)
         .          .    662:	if err != nil {
         .          .    663:		if err == sql.ErrNoRows {
         .          .    664:			return resError(c, "invalid_event", 404)
         .          .    665:		}
         .          .    666:		return err
         .          .    667:	} else if !event.PublicFg {
         .          .    668:		return resError(c, "invalid_event", 404)
         .          .    669:	}
         .          .    670:
         .      160ms    671:	if !validateRank(params.Rank) {
         .          .    672:		return resError(c, "invalid_rank", 400)
         .          .    673:	}
         .          .    674:
         .          .    675:	var sheet Sheet
         .          .    676:	var reservationID int64
         .          .    677:	for {
         .       70ms    678:		tx, err := db.Begin()
         .      240ms    679:		if err := tx.QueryRow("SELECT * FROM sheets WHERE id NOT IN (SELECT sheet_id FROM reservations WHERE event_id = ? AND canceled_at IS NULL FOR UPDATE) AND `rank` = ? ORDER BY RAND() LIMIT 1", event.ID, params.Rank).Scan(&sheet.ID, &sheet.Rank, &sheet.Num, &sheet.Price); err != nil {
         .          .    680:			tx.Rollback()
         .          .    681:			if err == sql.ErrNoRows {
         .          .    682:				return resError(c, "sold_out", 409)
         .          .    683:			}
         .          .    684:			log.Println("re-try: rollback by", err)
         .          .    685:			continue
         .          .    686:		}
         .          .    687:
         .          .    688:		t := time.Now()
         .      150ms    689:		res, err := tx.Exec("INSERT INTO reservations (event_id, sheet_id, user_id, reserved_at) VALUES (?, ?, ?, ?)", event.ID, sheet.ID, user.ID, t.UTC().Format("2006-01-02 15:04:05.000000"))
         .          .    690:		if err != nil {
         .          .    691:			tx.Rollback()
         .          .    692:			log.Println("re-try: rollback by", err)
         .          .    693:			continue
         .          .    694:		}
         .          .    695:		reservationID, err = res.LastInsertId()
         .          .    696:		if err != nil {
         .          .    697:			tx.Rollback()
         .          .    698:			log.Println("re-try: rollback by", err)
         .          .    699:			continue
         .          .    700:		}
         .          .    701:
         .          .    702:		eventSheetCache.Set(event.ID, sheet.ID, EventSheetReservation{user.ID, t})
         .       30ms    703:		if err := tx.Commit(); err != nil {
         .          .    704:			tx.Rollback()
         .          .    705:			log.Println("re-try: rollback by", err)
         .          .    706:			continue
         .          .    707:		}
         .          .    708:		break
         .          .    709:	}
         .       40ms    710:	return c.JSON(202, echo.Map{
         .       10ms    711:		"id":         reservationID,
         .          .    712:		"sheet_rank": params.Rank,
         .          .    713:		"sheet_num":  sheet.Num,
         .          .    714:	})
         .          .    715:}
         .          .    716:func deleteReservationHandler(c echo.Context) error {
ROUTINE ======================== main.postUsersHandler in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       30ms (flat, cum) 0.047% of Total
         .          .    454:	if err != nil {
         .          .    455:		return err
         .          .    456:	}
         .          .    457:
         .          .    458:	var user User
         .       10ms    459:	if err := tx.QueryRow("SELECT * FROM users WHERE login_name = ?", params.LoginName).Scan(&user.ID, &user.LoginName, &user.Nickname, &user.PassHash); err != sql.ErrNoRows {
         .       10ms    460:		tx.Rollback()
         .          .    461:		if err == nil {
         .          .    462:			return resError(c, "duplicated", 409)
         .          .    463:		}
         .          .    464:		return err
         .          .    465:	}
         .          .    466:
         .       10ms    467:	res, err := tx.Exec("INSERT INTO users (login_name, pass_hash, nickname) VALUES (?, SHA2(?, 256), ?)", params.LoginName, params.Password, params.Nickname)
         .          .    468:	if err != nil {
         .          .    469:		tx.Rollback()
         .          .    470:		return resError(c, "", 0)
         .          .    471:	}
         .          .    472:	userID, err := res.LastInsertId()
ROUTINE ======================== main.renderReportCSV in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     100ms      4.76s (flat, cum)  7.51% of Total
         .          .   1099:	CanceledAt    string
         .          .   1100:	Price         int64
         .          .   1101:}
         .          .   1102:
         .          .   1103:func renderReportCSV(c echo.Context, reports []Report) error {
         .      930ms   1104:	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .   1105:
         .          .   1106:	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .      100ms   1107:	for _, v := range reports {
         .      2.57s   1108:		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
     100ms      1.05s   1109:			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
         .          .   1110:	}
         .          .   1111:
         .          .   1112:	c.Response().Header().Set("Content-Type", `text/csv; charset=UTF-8`)
         .          .   1113:	c.Response().Header().Set("Content-Disposition", `attachment; filename="report.csv"`)
         .      110ms   1114:	_, err := io.Copy(c.Response(), body)
         .          .   1115:	return err
         .          .   1116:}
         .          .   1117:
         .          .   1118:func resError(c echo.Context, e string, status int) error {
         .          .   1119:	if e == "" {
ROUTINE ======================== main.renderReportCSV.func1 in /home/isucon/isucon8q/webapp/go/src/torb/app.go
     160ms      160ms (flat, cum)  0.25% of Total
         .          .   1099:	CanceledAt    string
         .          .   1100:	Price         int64
         .          .   1101:}
         .          .   1102:
         .          .   1103:func renderReportCSV(c echo.Context, reports []Report) error {
     160ms      160ms   1104:	sort.Slice(reports, func(i, j int) bool { return strings.Compare(reports[i].SoldAt, reports[j].SoldAt) < 0 })
         .          .   1105:
         .          .   1106:	body := bytes.NewBufferString("reservation_id,event_id,rank,num,price,user_id,sold_at,canceled_at\n")
         .          .   1107:	for _, v := range reports {
         .          .   1108:		body.WriteString(fmt.Sprintf("%d,%d,%s,%d,%d,%d,%s,%s\n",
         .          .   1109:			v.ReservationID, v.EventID, v.Rank, v.Num, v.Price, v.UserID, v.SoldAt, v.CanceledAt))
ROUTINE ======================== main.renderReportCSV.func1 in /home/isucon/local/go/src/strings/compare.go
     140ms      620ms (flat, cum)  0.98% of Total
         .          .     16:	// using strings.Compare. Basically no one should use strings.Compare.
         .          .     17:	// As the comment above says, it is here only for symmetry with package bytes.
         .          .     18:	// If performance is important, the compiler should be changed to recognize
         .          .     19:	// the pattern so that all code doing three-way comparisons, not just code
         .          .     20:	// using strings.Compare, can benefit.
      60ms      370ms     21:	if a == b {
         .          .     22:		return 0
         .          .     23:	}
      80ms      250ms     24:	if a < b {
         .          .     25:		return -1
         .          .     26:	}
         .          .     27:	return +1
         .          .     28:}
ROUTINE ======================== main.sessAdministratorID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0       20ms (flat, cum) 0.032% of Total
         .          .    168:	delete(sess.Values, "user_id")
         .          .    169:	sess.Save(c.Request(), c.Response())
         .          .    170:}
         .          .    171:
         .          .    172:func sessAdministratorID(c echo.Context) int64 {
         .       20ms    173:	sess, _ := session.Get("session", c)
         .          .    174:	var administratorID int64
         .          .    175:	if x, ok := sess.Values["administrator_id"]; ok {
         .          .    176:		administratorID, _ = x.(int64)
         .          .    177:	}
         .          .    178:	return administratorID
ROUTINE ======================== main.sessSetUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      100ms (flat, cum)  0.16% of Total
         .          .    152:	sess.Options = &sessions.Options{
         .          .    153:		Path:     "/",
         .          .    154:		MaxAge:   3600,
         .          .    155:		HttpOnly: true,
         .          .    156:	}
         .       10ms    157:	sess.Values["user_id"] = id
         .       90ms    158:	sess.Save(c.Request(), c.Response())
         .          .    159:}
         .          .    160:
         .          .    161:func sessDeleteUserID(c echo.Context) {
         .          .    162:	sess, _ := session.Get("session", c)
         .          .    163:	sess.Options = &sessions.Options{
ROUTINE ======================== main.sessUserID in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      720ms (flat, cum)  1.14% of Total
         .          .    137:}
         .          .    138:
         .          .    139:var eventSheetCache EventSheetReservationCache
         .          .    140:
         .          .    141:func sessUserID(c echo.Context) int64 {
         .      720ms    142:	sess, _ := session.Get("session", c)
         .          .    143:	var userID int64
         .          .    144:	if x, ok := sess.Values["user_id"]; ok {
         .          .    145:		userID, _ = x.(int64)
         .          .    146:	}
         .          .    147:	return userID
ROUTINE ======================== main.validateRank in /home/isucon/isucon8q/webapp/go/src/torb/app.go
         0      230ms (flat, cum)  0.36% of Total
         .          .    340:	}
         .          .    341:}
         .          .    342:
         .          .    343:func validateRank(rank string) bool {
         .          .    344:	var count int
         .      230ms    345:	db.QueryRow("SELECT COUNT(*) FROM sheets WHERE `rank` = ?", rank).Scan(&count)
         .          .    346:	return count > 0
         .          .    347:}
         .          .    348:
         .          .    349:type Renderer struct {
         .          .    350:	templates *template.Template
ROUTINE ======================== runtime.main in /home/isucon/local/go/src/runtime/proc.go
         0      330ms (flat, cum)  0.52% of Total
         .          .    193:		// A program compiled with -buildmode=c-archive or c-shared
         .          .    194:		// has a main, but it is not executed.
         .          .    195:		return
         .          .    196:	}
         .          .    197:	fn = main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime
         .      330ms    198:	fn()
         .          .    199:	if raceenabled {
         .          .    200:		racefini()
         .          .    201:	}
         .          .    202:
         .          .    203:	// Make racy client program work: if panicking on
